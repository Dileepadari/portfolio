--
-- PostgreSQL database dump
--

\restrict FcGai7xdXYpX8qityJ6SUz4FHDjuircSvil274BNQLJdFJKJs1cH9DPCnWPW3L4

-- Dumped from database version 17.6
-- Dumped by pg_dump version 17.6 (Ubuntu 17.6-1.pgdg24.04+1)

-- Started on 2025-09-23 10:29:08 IST

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- TOC entry 37 (class 2615 OID 16494)
-- Name: auth; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA auth;


ALTER SCHEMA auth OWNER TO supabase_admin;

--
-- TOC entry 23 (class 2615 OID 16388)
-- Name: extensions; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA extensions;


ALTER SCHEMA extensions OWNER TO postgres;

--
-- TOC entry 35 (class 2615 OID 16624)
-- Name: graphql; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql;


ALTER SCHEMA graphql OWNER TO supabase_admin;

--
-- TOC entry 34 (class 2615 OID 16613)
-- Name: graphql_public; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql_public;


ALTER SCHEMA graphql_public OWNER TO supabase_admin;

--
-- TOC entry 12 (class 2615 OID 16386)
-- Name: pgbouncer; Type: SCHEMA; Schema: -; Owner: pgbouncer
--

CREATE SCHEMA pgbouncer;


ALTER SCHEMA pgbouncer OWNER TO pgbouncer;

--
-- TOC entry 9 (class 2615 OID 16605)
-- Name: realtime; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA realtime;


ALTER SCHEMA realtime OWNER TO supabase_admin;

--
-- TOC entry 38 (class 2615 OID 16542)
-- Name: storage; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA storage;


ALTER SCHEMA storage OWNER TO supabase_admin;

--
-- TOC entry 11 (class 2615 OID 17292)
-- Name: supabase_migrations; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA supabase_migrations;


ALTER SCHEMA supabase_migrations OWNER TO postgres;

--
-- TOC entry 32 (class 2615 OID 16653)
-- Name: vault; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA vault;


ALTER SCHEMA vault OWNER TO supabase_admin;

--
-- TOC entry 6 (class 3079 OID 16689)
-- Name: pg_graphql; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_graphql WITH SCHEMA graphql;


--
-- TOC entry 4411 (class 0 OID 0)
-- Dependencies: 6
-- Name: EXTENSION pg_graphql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_graphql IS 'pg_graphql: GraphQL support';


--
-- TOC entry 4 (class 3079 OID 16389)
-- Name: pg_stat_statements; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_stat_statements WITH SCHEMA extensions;


--
-- TOC entry 4412 (class 0 OID 0)
-- Dependencies: 4
-- Name: EXTENSION pg_stat_statements; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_stat_statements IS 'track planning and execution statistics of all SQL statements executed';


--
-- TOC entry 2 (class 3079 OID 16443)
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA extensions;


--
-- TOC entry 4413 (class 0 OID 0)
-- Dependencies: 2
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- TOC entry 5 (class 3079 OID 16654)
-- Name: supabase_vault; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS supabase_vault WITH SCHEMA vault;


--
-- TOC entry 4414 (class 0 OID 0)
-- Dependencies: 5
-- Name: EXTENSION supabase_vault; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION supabase_vault IS 'Supabase Vault Extension';


--
-- TOC entry 3 (class 3079 OID 16432)
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA extensions;


--
-- TOC entry 4415 (class 0 OID 0)
-- Dependencies: 3
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


--
-- TOC entry 1121 (class 1247 OID 16782)
-- Name: aal_level; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.aal_level AS ENUM (
    'aal1',
    'aal2',
    'aal3'
);


ALTER TYPE auth.aal_level OWNER TO supabase_auth_admin;

--
-- TOC entry 1145 (class 1247 OID 16923)
-- Name: code_challenge_method; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.code_challenge_method AS ENUM (
    's256',
    'plain'
);


ALTER TYPE auth.code_challenge_method OWNER TO supabase_auth_admin;

--
-- TOC entry 1118 (class 1247 OID 16776)
-- Name: factor_status; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_status AS ENUM (
    'unverified',
    'verified'
);


ALTER TYPE auth.factor_status OWNER TO supabase_auth_admin;

--
-- TOC entry 1115 (class 1247 OID 16771)
-- Name: factor_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_type AS ENUM (
    'totp',
    'webauthn',
    'phone'
);


ALTER TYPE auth.factor_type OWNER TO supabase_auth_admin;

--
-- TOC entry 1157 (class 1247 OID 17004)
-- Name: oauth_registration_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.oauth_registration_type AS ENUM (
    'dynamic',
    'manual'
);


ALTER TYPE auth.oauth_registration_type OWNER TO supabase_auth_admin;

--
-- TOC entry 1151 (class 1247 OID 16965)
-- Name: one_time_token_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.one_time_token_type AS ENUM (
    'confirmation_token',
    'reauthentication_token',
    'recovery_token',
    'email_change_token_new',
    'email_change_token_current',
    'phone_change_token'
);


ALTER TYPE auth.one_time_token_type OWNER TO supabase_auth_admin;

--
-- TOC entry 1170 (class 1247 OID 17154)
-- Name: action; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.action AS ENUM (
    'INSERT',
    'UPDATE',
    'DELETE',
    'TRUNCATE',
    'ERROR'
);


ALTER TYPE realtime.action OWNER TO supabase_admin;

--
-- TOC entry 1175 (class 1247 OID 17115)
-- Name: equality_op; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.equality_op AS ENUM (
    'eq',
    'neq',
    'lt',
    'lte',
    'gt',
    'gte',
    'in'
);


ALTER TYPE realtime.equality_op OWNER TO supabase_admin;

--
-- TOC entry 1178 (class 1247 OID 17129)
-- Name: user_defined_filter; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.user_defined_filter AS (
	column_name text,
	op realtime.equality_op,
	value text
);


ALTER TYPE realtime.user_defined_filter OWNER TO supabase_admin;

--
-- TOC entry 1187 (class 1247 OID 17196)
-- Name: wal_column; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_column AS (
	name text,
	type_name text,
	type_oid oid,
	value jsonb,
	is_pkey boolean,
	is_selectable boolean
);


ALTER TYPE realtime.wal_column OWNER TO supabase_admin;

--
-- TOC entry 1184 (class 1247 OID 17167)
-- Name: wal_rls; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_rls AS (
	wal jsonb,
	is_rls_enabled boolean,
	subscription_ids uuid[],
	errors text[]
);


ALTER TYPE realtime.wal_rls OWNER TO supabase_admin;

--
-- TOC entry 1259 (class 1247 OID 22149)
-- Name: buckettype; Type: TYPE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TYPE storage.buckettype AS ENUM (
    'STANDARD',
    'ANALYTICS'
);


ALTER TYPE storage.buckettype OWNER TO supabase_storage_admin;

--
-- TOC entry 398 (class 1255 OID 16540)
-- Name: email(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.email() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.email', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'email')
  )::text
$$;


ALTER FUNCTION auth.email() OWNER TO supabase_auth_admin;

--
-- TOC entry 4416 (class 0 OID 0)
-- Dependencies: 398
-- Name: FUNCTION email(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.email() IS 'Deprecated. Use auth.jwt() -> ''email'' instead.';


--
-- TOC entry 417 (class 1255 OID 16753)
-- Name: jwt(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.jwt() RETURNS jsonb
    LANGUAGE sql STABLE
    AS $$
  select 
    coalesce(
        nullif(current_setting('request.jwt.claim', true), ''),
        nullif(current_setting('request.jwt.claims', true), '')
    )::jsonb
$$;


ALTER FUNCTION auth.jwt() OWNER TO supabase_auth_admin;

--
-- TOC entry 397 (class 1255 OID 16539)
-- Name: role(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.role() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.role', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'role')
  )::text
$$;


ALTER FUNCTION auth.role() OWNER TO supabase_auth_admin;

--
-- TOC entry 4419 (class 0 OID 0)
-- Dependencies: 397
-- Name: FUNCTION role(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.role() IS 'Deprecated. Use auth.jwt() -> ''role'' instead.';


--
-- TOC entry 396 (class 1255 OID 16538)
-- Name: uid(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.uid() RETURNS uuid
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.sub', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')
  )::uuid
$$;


ALTER FUNCTION auth.uid() OWNER TO supabase_auth_admin;

--
-- TOC entry 4421 (class 0 OID 0)
-- Dependencies: 396
-- Name: FUNCTION uid(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.uid() IS 'Deprecated. Use auth.jwt() -> ''sub'' instead.';


--
-- TOC entry 399 (class 1255 OID 16597)
-- Name: grant_pg_cron_access(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.grant_pg_cron_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_cron'
  )
  THEN
    grant usage on schema cron to postgres with grant option;

    alter default privileges in schema cron grant all on tables to postgres with grant option;
    alter default privileges in schema cron grant all on functions to postgres with grant option;
    alter default privileges in schema cron grant all on sequences to postgres with grant option;

    alter default privileges for user supabase_admin in schema cron grant all
        on sequences to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on tables to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on functions to postgres with grant option;

    grant all privileges on all tables in schema cron to postgres with grant option;
    revoke all on table cron.job from postgres;
    grant select on table cron.job to postgres with grant option;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_cron_access() OWNER TO supabase_admin;

--
-- TOC entry 4437 (class 0 OID 0)
-- Dependencies: 399
-- Name: FUNCTION grant_pg_cron_access(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.grant_pg_cron_access() IS 'Grants access to pg_cron';


--
-- TOC entry 403 (class 1255 OID 16618)
-- Name: grant_pg_graphql_access(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.grant_pg_graphql_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
    func_is_graphql_resolve bool;
BEGIN
    func_is_graphql_resolve = (
        SELECT n.proname = 'resolve'
        FROM pg_event_trigger_ddl_commands() AS ev
        LEFT JOIN pg_catalog.pg_proc AS n
        ON ev.objid = n.oid
    );

    IF func_is_graphql_resolve
    THEN
        -- Update public wrapper to pass all arguments through to the pg_graphql resolve func
        DROP FUNCTION IF EXISTS graphql_public.graphql;
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language sql
        as $$
            select graphql.resolve(
                query := query,
                variables := coalesce(variables, '{}'),
                "operationName" := "operationName",
                extensions := extensions
            );
        $$;

        -- This hook executes when `graphql.resolve` is created. That is not necessarily the last
        -- function in the extension so we need to grant permissions on existing entities AND
        -- update default permissions to any others that are created after `graphql.resolve`
        grant usage on schema graphql to postgres, anon, authenticated, service_role;
        grant select on all tables in schema graphql to postgres, anon, authenticated, service_role;
        grant execute on all functions in schema graphql to postgres, anon, authenticated, service_role;
        grant all on all sequences in schema graphql to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on tables to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on functions to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on sequences to postgres, anon, authenticated, service_role;

        -- Allow postgres role to allow granting usage on graphql and graphql_public schemas to custom roles
        grant usage on schema graphql_public to postgres with grant option;
        grant usage on schema graphql to postgres with grant option;
    END IF;

END;
$_$;


ALTER FUNCTION extensions.grant_pg_graphql_access() OWNER TO supabase_admin;

--
-- TOC entry 4439 (class 0 OID 0)
-- Dependencies: 403
-- Name: FUNCTION grant_pg_graphql_access(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.grant_pg_graphql_access() IS 'Grants access to pg_graphql';


--
-- TOC entry 400 (class 1255 OID 16599)
-- Name: grant_pg_net_access(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.grant_pg_net_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT 1
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_net'
  )
  THEN
    IF NOT EXISTS (
      SELECT 1
      FROM pg_roles
      WHERE rolname = 'supabase_functions_admin'
    )
    THEN
      CREATE USER supabase_functions_admin NOINHERIT CREATEROLE LOGIN NOREPLICATION;
    END IF;

    GRANT USAGE ON SCHEMA net TO supabase_functions_admin, postgres, anon, authenticated, service_role;

    IF EXISTS (
      SELECT FROM pg_extension
      WHERE extname = 'pg_net'
      -- all versions in use on existing projects as of 2025-02-20
      -- version 0.12.0 onwards don't need these applied
      AND extversion IN ('0.2', '0.6', '0.7', '0.7.1', '0.8', '0.10.0', '0.11.0')
    ) THEN
      ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;
      ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;

      ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;
      ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;

      REVOKE ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
      REVOKE ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;

      GRANT EXECUTE ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
      GRANT EXECUTE ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
    END IF;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_net_access() OWNER TO supabase_admin;

--
-- TOC entry 4441 (class 0 OID 0)
-- Dependencies: 400
-- Name: FUNCTION grant_pg_net_access(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.grant_pg_net_access() IS 'Grants access to pg_net';


--
-- TOC entry 401 (class 1255 OID 16609)
-- Name: pgrst_ddl_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_ddl_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  cmd record;
BEGIN
  FOR cmd IN SELECT * FROM pg_event_trigger_ddl_commands()
  LOOP
    IF cmd.command_tag IN (
      'CREATE SCHEMA', 'ALTER SCHEMA'
    , 'CREATE TABLE', 'CREATE TABLE AS', 'SELECT INTO', 'ALTER TABLE'
    , 'CREATE FOREIGN TABLE', 'ALTER FOREIGN TABLE'
    , 'CREATE VIEW', 'ALTER VIEW'
    , 'CREATE MATERIALIZED VIEW', 'ALTER MATERIALIZED VIEW'
    , 'CREATE FUNCTION', 'ALTER FUNCTION'
    , 'CREATE TRIGGER'
    , 'CREATE TYPE', 'ALTER TYPE'
    , 'CREATE RULE'
    , 'COMMENT'
    )
    -- don't notify in case of CREATE TEMP table or other objects created on pg_temp
    AND cmd.schema_name is distinct from 'pg_temp'
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_ddl_watch() OWNER TO supabase_admin;

--
-- TOC entry 402 (class 1255 OID 16610)
-- Name: pgrst_drop_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_drop_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  obj record;
BEGIN
  FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()
  LOOP
    IF obj.object_type IN (
      'schema'
    , 'table'
    , 'foreign table'
    , 'view'
    , 'materialized view'
    , 'function'
    , 'trigger'
    , 'type'
    , 'rule'
    )
    AND obj.is_temporary IS false -- no pg_temp objects
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_drop_watch() OWNER TO supabase_admin;

--
-- TOC entry 404 (class 1255 OID 16620)
-- Name: set_graphql_placeholder(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.set_graphql_placeholder() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
    DECLARE
    graphql_is_dropped bool;
    BEGIN
    graphql_is_dropped = (
        SELECT ev.schema_name = 'graphql_public'
        FROM pg_event_trigger_dropped_objects() AS ev
        WHERE ev.schema_name = 'graphql_public'
    );

    IF graphql_is_dropped
    THEN
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language plpgsql
        as $$
            DECLARE
                server_version float;
            BEGIN
                server_version = (SELECT (SPLIT_PART((select version()), ' ', 2))::float);

                IF server_version >= 14 THEN
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql extension is not enabled.'
                            )
                        )
                    );
                ELSE
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql is only available on projects running Postgres 14 onwards.'
                            )
                        )
                    );
                END IF;
            END;
        $$;
    END IF;

    END;
$_$;


ALTER FUNCTION extensions.set_graphql_placeholder() OWNER TO supabase_admin;

--
-- TOC entry 4470 (class 0 OID 0)
-- Dependencies: 404
-- Name: FUNCTION set_graphql_placeholder(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.set_graphql_placeholder() IS 'Reintroduces placeholder function for graphql_public.graphql';


--
-- TOC entry 346 (class 1255 OID 16387)
-- Name: get_auth(text); Type: FUNCTION; Schema: pgbouncer; Owner: supabase_admin
--

CREATE FUNCTION pgbouncer.get_auth(p_usename text) RETURNS TABLE(username text, password text)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$
begin
    raise debug 'PgBouncer auth request: %', p_usename;

    return query
    select 
        rolname::text, 
        case when rolvaliduntil < now() 
            then null 
            else rolpassword::text 
        end 
    from pg_authid 
    where rolname=$1 and rolcanlogin;
end;
$_$;


ALTER FUNCTION pgbouncer.get_auth(p_usename text) OWNER TO supabase_admin;

--
-- TOC entry 445 (class 1255 OID 20910)
-- Name: create_quick_task(uuid, jsonb); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.create_quick_task(template_id uuid DEFAULT NULL::uuid, task_data jsonb DEFAULT '{}'::jsonb) RETURNS uuid
    LANGUAGE plpgsql
    AS $$
DECLARE
  new_task_id UUID;
  template_data RECORD;
  final_data JSONB;
BEGIN
  -- If template_id provided, merge with template data
  IF template_id IS NOT NULL THEN
    SELECT * INTO template_data FROM public.task_templates WHERE id = template_id AND is_active = true;
    IF FOUND THEN
      final_data := jsonb_build_object(
        'title', COALESCE(task_data->>'title', template_data.title),
        'description', COALESCE(task_data->>'description', template_data.description),
        'category', COALESCE(task_data->>'category', template_data.category),
        'priority', COALESCE(task_data->>'priority', template_data.priority),
        'estimated_hours', COALESCE((task_data->>'estimated_hours')::NUMERIC, template_data.estimated_hours),
        'tags', COALESCE(task_data->'tags', to_jsonb(template_data.tags))
      );
    ELSE
      final_data := task_data;
    END IF;
  ELSE
    final_data := task_data;
  END IF;
  
  -- Create the task
  INSERT INTO public.tasks (
    title, description, category, priority, estimated_hours, tags
  ) VALUES (
    final_data->>'title',
    final_data->>'description',
    COALESCE(final_data->>'category', 'general'),
    COALESCE(final_data->>'priority', 'medium'),
    (final_data->>'estimated_hours')::NUMERIC,
    CASE 
      WHEN final_data ? 'tags' THEN ARRAY(SELECT jsonb_array_elements_text(final_data->'tags'))
      ELSE '{}'::TEXT[]
    END
  ) RETURNING id INTO new_task_id;
  
  RETURN new_task_id;
END;
$$;


ALTER FUNCTION public.create_quick_task(template_id uuid, task_data jsonb) OWNER TO postgres;

--
-- TOC entry 444 (class 1255 OID 20909)
-- Name: generate_recurring_events(uuid, jsonb, timestamp with time zone); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.generate_recurring_events(parent_schedule_id uuid, recurrence_rule jsonb, end_date timestamp with time zone) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
  parent_schedule RECORD;
  current_iter_date TIMESTAMP WITH TIME ZONE;
  next_date TIMESTAMP WITH TIME ZONE;
  interval_type TEXT;
  interval_value INTEGER;
  days_of_week INTEGER[];
  generated_count INTEGER := 0;
  max_events INTEGER := 100; -- Safety limit
BEGIN
  -- Get parent schedule details
  SELECT * INTO parent_schedule FROM public.schedules WHERE id = parent_schedule_id;
  
  IF NOT FOUND THEN
    RETURN 0;
  END IF;
  
  -- Extract recurrence parameters
  interval_type := recurrence_rule->>'type'; -- 'daily', 'weekly', 'monthly', 'yearly'
  interval_value := COALESCE((recurrence_rule->>'interval')::INTEGER, 1);
  days_of_week := CASE 
    WHEN recurrence_rule ? 'daysOfWeek' THEN 
      ARRAY(SELECT jsonb_array_elements_text(recurrence_rule->'daysOfWeek'))::INTEGER[]
    ELSE NULL
  END;
  
  current_iter_date := parent_schedule.start_time;
  
  -- Generate recurring events
  WHILE current_iter_date < end_date AND generated_count < max_events LOOP
    -- Calculate next occurrence based on recurrence type
    CASE interval_type
      WHEN 'daily' THEN
        next_date := current_iter_date + (interval_value || ' days')::INTERVAL;
      WHEN 'weekly' THEN
        IF days_of_week IS NOT NULL THEN
          -- Handle specific days of week
          next_date := current_iter_date + '1 day'::INTERVAL;
          WHILE NOT (EXTRACT(DOW FROM next_date)::INTEGER = ANY(days_of_week)) AND next_date < end_date LOOP
            next_date := next_date + '1 day'::INTERVAL;
          END LOOP;
        ELSE
          next_date := current_iter_date + (interval_value || ' weeks')::INTERVAL;
        END IF;
      WHEN 'monthly' THEN
        next_date := current_iter_date + (interval_value || ' months')::INTERVAL;
      WHEN 'yearly' THEN
        next_date := current_iter_date + (interval_value || ' years')::INTERVAL;
      ELSE
        EXIT; -- Unknown interval type
    END CASE;
    
    -- Skip if next date exceeds end date
    IF next_date >= end_date THEN
      EXIT;
    END IF;
    
    -- Create recurring event instance
    INSERT INTO public.schedules (
      title, description, start_time, end_time, type, category, status,
      attendees, location, meeting_url, is_public, color, reminder_minutes,
      notes, tags, is_recurring, parent_event_id, original_start_time
    ) VALUES (
      parent_schedule.title,
      parent_schedule.description,
      next_date,
      next_date + (parent_schedule.end_time - parent_schedule.start_time),
      parent_schedule.type,
      parent_schedule.category,
      'scheduled',
      parent_schedule.attendees,
      parent_schedule.location,
      parent_schedule.meeting_url,
      parent_schedule.is_public,
      parent_schedule.color,
      parent_schedule.reminder_minutes,
      parent_schedule.notes,
      parent_schedule.tags,
      false, -- Individual instances are not recurring
      parent_schedule_id,
      next_date
    );
    
    current_iter_date := next_date;
    generated_count := generated_count + 1;
  END LOOP;
  
  RETURN generated_count;
END;
$$;


ALTER FUNCTION public.generate_recurring_events(parent_schedule_id uuid, recurrence_rule jsonb, end_date timestamp with time zone) OWNER TO postgres;

--
-- TOC entry 441 (class 1255 OID 17580)
-- Name: handle_new_user(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.handle_new_user() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    SET search_path TO 'public'
    AS $$
BEGIN
  INSERT INTO public.profiles (user_id, email, full_name, is_admin)
  VALUES (
    NEW.id,
    NEW.email,
    COALESCE(NEW.raw_user_meta_data ->> 'full_name', NEW.email),
    NEW.email = 'rs200302@rguktsklm.ac.in' -- Make Dileep admin
  );
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.handle_new_user() OWNER TO postgres;

--
-- TOC entry 442 (class 1255 OID 20081)
-- Name: handle_updated_at(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.handle_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = TIMEZONE('utc'::text, NOW());
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.handle_updated_at() OWNER TO postgres;

--
-- TOC entry 439 (class 1255 OID 17556)
-- Name: is_admin(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.is_admin(user_id uuid) RETURNS boolean
    LANGUAGE sql SECURITY DEFINER
    SET search_path TO 'public'
    AS $_$
  SELECT EXISTS (
    SELECT 1 FROM public.profiles 
    WHERE profiles.user_id = $1 AND is_admin = true
  );
$_$;


ALTER FUNCTION public.is_admin(user_id uuid) OWNER TO postgres;

--
-- TOC entry 443 (class 1255 OID 20241)
-- Name: update_blog_comments_updated_at(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_blog_comments_updated_at() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = timezone('utc'::text, now());
    RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_blog_comments_updated_at() OWNER TO postgres;

--
-- TOC entry 440 (class 1255 OID 17571)
-- Name: update_updated_at_column(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.update_updated_at_column() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.update_updated_at_column() OWNER TO postgres;

--
-- TOC entry 432 (class 1255 OID 17189)
-- Name: apply_rls(jsonb, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer DEFAULT (1024 * 1024)) RETURNS SETOF realtime.wal_rls
    LANGUAGE plpgsql
    AS $$
declare
-- Regclass of the table e.g. public.notes
entity_ regclass = (quote_ident(wal ->> 'schema') || '.' || quote_ident(wal ->> 'table'))::regclass;

-- I, U, D, T: insert, update ...
action realtime.action = (
    case wal ->> 'action'
        when 'I' then 'INSERT'
        when 'U' then 'UPDATE'
        when 'D' then 'DELETE'
        else 'ERROR'
    end
);

-- Is row level security enabled for the table
is_rls_enabled bool = relrowsecurity from pg_class where oid = entity_;

subscriptions realtime.subscription[] = array_agg(subs)
    from
        realtime.subscription subs
    where
        subs.entity = entity_;

-- Subscription vars
roles regrole[] = array_agg(distinct us.claims_role::text)
    from
        unnest(subscriptions) us;

working_role regrole;
claimed_role regrole;
claims jsonb;

subscription_id uuid;
subscription_has_access bool;
visible_to_subscription_ids uuid[] = '{}';

-- structured info for wal's columns
columns realtime.wal_column[];
-- previous identity values for update/delete
old_columns realtime.wal_column[];

error_record_exceeds_max_size boolean = octet_length(wal::text) > max_record_bytes;

-- Primary jsonb output for record
output jsonb;

begin
perform set_config('role', null, true);

columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'columns') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

old_columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'identity') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

for working_role in select * from unnest(roles) loop

    -- Update `is_selectable` for columns and old_columns
    columns =
        array_agg(
            (
                c.name,
                c.type_name,
                c.type_oid,
                c.value,
                c.is_pkey,
                pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
            )::realtime.wal_column
        )
        from
            unnest(columns) c;

    old_columns =
            array_agg(
                (
                    c.name,
                    c.type_name,
                    c.type_oid,
                    c.value,
                    c.is_pkey,
                    pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
                )::realtime.wal_column
            )
            from
                unnest(old_columns) c;

    if action <> 'DELETE' and count(1) = 0 from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            -- subscriptions is already filtered by entity
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 400: Bad Request, no primary key']
        )::realtime.wal_rls;

    -- The claims role does not have SELECT permission to the primary key of entity
    elsif action <> 'DELETE' and sum(c.is_selectable::int) <> count(1) from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 401: Unauthorized']
        )::realtime.wal_rls;

    else
        output = jsonb_build_object(
            'schema', wal ->> 'schema',
            'table', wal ->> 'table',
            'type', action,
            'commit_timestamp', to_char(
                ((wal ->> 'timestamp')::timestamptz at time zone 'utc'),
                'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"'
            ),
            'columns', (
                select
                    jsonb_agg(
                        jsonb_build_object(
                            'name', pa.attname,
                            'type', pt.typname
                        )
                        order by pa.attnum asc
                    )
                from
                    pg_attribute pa
                    join pg_type pt
                        on pa.atttypid = pt.oid
                where
                    attrelid = entity_
                    and attnum > 0
                    and pg_catalog.has_column_privilege(working_role, entity_, pa.attname, 'SELECT')
            )
        )
        -- Add "record" key for insert and update
        || case
            when action in ('INSERT', 'UPDATE') then
                jsonb_build_object(
                    'record',
                    (
                        select
                            jsonb_object_agg(
                                -- if unchanged toast, get column name and value from old record
                                coalesce((c).name, (oc).name),
                                case
                                    when (c).name is null then (oc).value
                                    else (c).value
                                end
                            )
                        from
                            unnest(columns) c
                            full outer join unnest(old_columns) oc
                                on (c).name = (oc).name
                        where
                            coalesce((c).is_selectable, (oc).is_selectable)
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                    )
                )
            else '{}'::jsonb
        end
        -- Add "old_record" key for update and delete
        || case
            when action = 'UPDATE' then
                jsonb_build_object(
                        'old_record',
                        (
                            select jsonb_object_agg((c).name, (c).value)
                            from unnest(old_columns) c
                            where
                                (c).is_selectable
                                and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                        )
                    )
            when action = 'DELETE' then
                jsonb_build_object(
                    'old_record',
                    (
                        select jsonb_object_agg((c).name, (c).value)
                        from unnest(old_columns) c
                        where
                            (c).is_selectable
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                            and ( not is_rls_enabled or (c).is_pkey ) -- if RLS enabled, we can't secure deletes so filter to pkey
                    )
                )
            else '{}'::jsonb
        end;

        -- Create the prepared statement
        if is_rls_enabled and action <> 'DELETE' then
            if (select 1 from pg_prepared_statements where name = 'walrus_rls_stmt' limit 1) > 0 then
                deallocate walrus_rls_stmt;
            end if;
            execute realtime.build_prepared_statement_sql('walrus_rls_stmt', entity_, columns);
        end if;

        visible_to_subscription_ids = '{}';

        for subscription_id, claims in (
                select
                    subs.subscription_id,
                    subs.claims
                from
                    unnest(subscriptions) subs
                where
                    subs.entity = entity_
                    and subs.claims_role = working_role
                    and (
                        realtime.is_visible_through_filters(columns, subs.filters)
                        or (
                          action = 'DELETE'
                          and realtime.is_visible_through_filters(old_columns, subs.filters)
                        )
                    )
        ) loop

            if not is_rls_enabled or action = 'DELETE' then
                visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
            else
                -- Check if RLS allows the role to see the record
                perform
                    -- Trim leading and trailing quotes from working_role because set_config
                    -- doesn't recognize the role as valid if they are included
                    set_config('role', trim(both '"' from working_role::text), true),
                    set_config('request.jwt.claims', claims::text, true);

                execute 'execute walrus_rls_stmt' into subscription_has_access;

                if subscription_has_access then
                    visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
                end if;
            end if;
        end loop;

        perform set_config('role', null, true);

        return next (
            output,
            is_rls_enabled,
            visible_to_subscription_ids,
            case
                when error_record_exceeds_max_size then array['Error 413: Payload Too Large']
                else '{}'
            end
        )::realtime.wal_rls;

    end if;
end loop;

perform set_config('role', null, true);
end;
$$;


ALTER FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) OWNER TO supabase_admin;

--
-- TOC entry 438 (class 1255 OID 17272)
-- Name: broadcast_changes(text, text, text, text, text, record, record, text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text DEFAULT 'ROW'::text) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
    -- Declare a variable to hold the JSONB representation of the row
    row_data jsonb := '{}'::jsonb;
BEGIN
    IF level = 'STATEMENT' THEN
        RAISE EXCEPTION 'function can only be triggered for each row, not for each statement';
    END IF;
    -- Check the operation type and handle accordingly
    IF operation = 'INSERT' OR operation = 'UPDATE' OR operation = 'DELETE' THEN
        row_data := jsonb_build_object('old_record', OLD, 'record', NEW, 'operation', operation, 'table', table_name, 'schema', table_schema);
        PERFORM realtime.send (row_data, event_name, topic_name);
    ELSE
        RAISE EXCEPTION 'Unexpected operation type: %', operation;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Failed to process the row: %', SQLERRM;
END;

$$;


ALTER FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) OWNER TO supabase_admin;

--
-- TOC entry 434 (class 1255 OID 17201)
-- Name: build_prepared_statement_sql(text, regclass, realtime.wal_column[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) RETURNS text
    LANGUAGE sql
    AS $$
      /*
      Builds a sql string that, if executed, creates a prepared statement to
      tests retrive a row from *entity* by its primary key columns.
      Example
          select realtime.build_prepared_statement_sql('public.notes', '{"id"}'::text[], '{"bigint"}'::text[])
      */
          select
      'prepare ' || prepared_statement_name || ' as
          select
              exists(
                  select
                      1
                  from
                      ' || entity || '
                  where
                      ' || string_agg(quote_ident(pkc.name) || '=' || quote_nullable(pkc.value #>> '{}') , ' and ') || '
              )'
          from
              unnest(columns) pkc
          where
              pkc.is_pkey
          group by
              entity
      $$;


ALTER FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) OWNER TO supabase_admin;

--
-- TOC entry 430 (class 1255 OID 17151)
-- Name: cast(text, regtype); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime."cast"(val text, type_ regtype) RETURNS jsonb
    LANGUAGE plpgsql IMMUTABLE
    AS $$
    declare
      res jsonb;
    begin
      execute format('select to_jsonb(%L::'|| type_::text || ')', val)  into res;
      return res;
    end
    $$;


ALTER FUNCTION realtime."cast"(val text, type_ regtype) OWNER TO supabase_admin;

--
-- TOC entry 429 (class 1255 OID 17146)
-- Name: check_equality_op(realtime.equality_op, regtype, text, text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $$
      /*
      Casts *val_1* and *val_2* as type *type_* and check the *op* condition for truthiness
      */
      declare
          op_symbol text = (
              case
                  when op = 'eq' then '='
                  when op = 'neq' then '!='
                  when op = 'lt' then '<'
                  when op = 'lte' then '<='
                  when op = 'gt' then '>'
                  when op = 'gte' then '>='
                  when op = 'in' then '= any'
                  else 'UNKNOWN OP'
              end
          );
          res boolean;
      begin
          execute format(
              'select %L::'|| type_::text || ' ' || op_symbol
              || ' ( %L::'
              || (
                  case
                      when op = 'in' then type_::text || '[]'
                      else type_::text end
              )
              || ')', val_1, val_2) into res;
          return res;
      end;
      $$;


ALTER FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) OWNER TO supabase_admin;

--
-- TOC entry 433 (class 1255 OID 17197)
-- Name: is_visible_through_filters(realtime.wal_column[], realtime.user_defined_filter[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$
    /*
    Should the record be visible (true) or filtered out (false) after *filters* are applied
    */
        select
            -- Default to allowed when no filters present
            $2 is null -- no filters. this should not happen because subscriptions has a default
            or array_length($2, 1) is null -- array length of an empty array is null
            or bool_and(
                coalesce(
                    realtime.check_equality_op(
                        op:=f.op,
                        type_:=coalesce(
                            col.type_oid::regtype, -- null when wal2json version <= 2.4
                            col.type_name::regtype
                        ),
                        -- cast jsonb to text
                        val_1:=col.value #>> '{}',
                        val_2:=f.value
                    ),
                    false -- if null, filter does not match
                )
            )
        from
            unnest(filters) f
            join unnest(columns) col
                on f.column_name = col.name;
    $_$;


ALTER FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) OWNER TO supabase_admin;

--
-- TOC entry 435 (class 1255 OID 17212)
-- Name: list_changes(name, name, integer, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) RETURNS SETOF realtime.wal_rls
    LANGUAGE sql
    SET log_min_messages TO 'fatal'
    AS $$
      with pub as (
        select
          concat_ws(
            ',',
            case when bool_or(pubinsert) then 'insert' else null end,
            case when bool_or(pubupdate) then 'update' else null end,
            case when bool_or(pubdelete) then 'delete' else null end
          ) as w2j_actions,
          coalesce(
            string_agg(
              realtime.quote_wal2json(format('%I.%I', schemaname, tablename)::regclass),
              ','
            ) filter (where ppt.tablename is not null and ppt.tablename not like '% %'),
            ''
          ) w2j_add_tables
        from
          pg_publication pp
          left join pg_publication_tables ppt
            on pp.pubname = ppt.pubname
        where
          pp.pubname = publication
        group by
          pp.pubname
        limit 1
      ),
      w2j as (
        select
          x.*, pub.w2j_add_tables
        from
          pub,
          pg_logical_slot_get_changes(
            slot_name, null, max_changes,
            'include-pk', 'true',
            'include-transaction', 'false',
            'include-timestamp', 'true',
            'include-type-oids', 'true',
            'format-version', '2',
            'actions', pub.w2j_actions,
            'add-tables', pub.w2j_add_tables
          ) x
      )
      select
        xyz.wal,
        xyz.is_rls_enabled,
        xyz.subscription_ids,
        xyz.errors
      from
        w2j,
        realtime.apply_rls(
          wal := w2j.data::jsonb,
          max_record_bytes := max_record_bytes
        ) xyz(wal, is_rls_enabled, subscription_ids, errors)
      where
        w2j.w2j_add_tables <> ''
        and xyz.subscription_ids[1] is not null
    $$;


ALTER FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) OWNER TO supabase_admin;

--
-- TOC entry 428 (class 1255 OID 17145)
-- Name: quote_wal2json(regclass); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.quote_wal2json(entity regclass) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $$
      select
        (
          select string_agg('' || ch,'')
          from unnest(string_to_array(nsp.nspname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
        )
        || '.'
        || (
          select string_agg('' || ch,'')
          from unnest(string_to_array(pc.relname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
          )
      from
        pg_class pc
        join pg_namespace nsp
          on pc.relnamespace = nsp.oid
      where
        pc.oid = entity
    $$;


ALTER FUNCTION realtime.quote_wal2json(entity regclass) OWNER TO supabase_admin;

--
-- TOC entry 437 (class 1255 OID 17271)
-- Name: send(jsonb, text, text, boolean); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean DEFAULT true) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  BEGIN
    -- Set the topic configuration
    EXECUTE format('SET LOCAL realtime.topic TO %L', topic);

    -- Attempt to insert the message
    INSERT INTO realtime.messages (payload, event, topic, private, extension)
    VALUES (payload, event, topic, private, 'broadcast');
  EXCEPTION
    WHEN OTHERS THEN
      -- Capture and notify the error
      RAISE WARNING 'ErrorSendingBroadcastMessage: %', SQLERRM;
  END;
END;
$$;


ALTER FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) OWNER TO supabase_admin;

--
-- TOC entry 427 (class 1255 OID 17143)
-- Name: subscription_check_filters(); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.subscription_check_filters() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    /*
    Validates that the user defined filters for a subscription:
    - refer to valid columns that the claimed role may access
    - values are coercable to the correct column type
    */
    declare
        col_names text[] = coalesce(
                array_agg(c.column_name order by c.ordinal_position),
                '{}'::text[]
            )
            from
                information_schema.columns c
            where
                format('%I.%I', c.table_schema, c.table_name)::regclass = new.entity
                and pg_catalog.has_column_privilege(
                    (new.claims ->> 'role'),
                    format('%I.%I', c.table_schema, c.table_name)::regclass,
                    c.column_name,
                    'SELECT'
                );
        filter realtime.user_defined_filter;
        col_type regtype;

        in_val jsonb;
    begin
        for filter in select * from unnest(new.filters) loop
            -- Filtered column is valid
            if not filter.column_name = any(col_names) then
                raise exception 'invalid column for filter %', filter.column_name;
            end if;

            -- Type is sanitized and safe for string interpolation
            col_type = (
                select atttypid::regtype
                from pg_catalog.pg_attribute
                where attrelid = new.entity
                      and attname = filter.column_name
            );
            if col_type is null then
                raise exception 'failed to lookup type for column %', filter.column_name;
            end if;

            -- Set maximum number of entries for in filter
            if filter.op = 'in'::realtime.equality_op then
                in_val = realtime.cast(filter.value, (col_type::text || '[]')::regtype);
                if coalesce(jsonb_array_length(in_val), 0) > 100 then
                    raise exception 'too many values for `in` filter. Maximum 100';
                end if;
            else
                -- raises an exception if value is not coercable to type
                perform realtime.cast(filter.value, col_type);
            end if;

        end loop;

        -- Apply consistent order to filters so the unique constraint on
        -- (subscription_id, entity, filters) can't be tricked by a different filter order
        new.filters = coalesce(
            array_agg(f order by f.column_name, f.op, f.value),
            '{}'
        ) from unnest(new.filters) f;

        return new;
    end;
    $$;


ALTER FUNCTION realtime.subscription_check_filters() OWNER TO supabase_admin;

--
-- TOC entry 431 (class 1255 OID 17178)
-- Name: to_regrole(text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.to_regrole(role_name text) RETURNS regrole
    LANGUAGE sql IMMUTABLE
    AS $$ select role_name::regrole $$;


ALTER FUNCTION realtime.to_regrole(role_name text) OWNER TO supabase_admin;

--
-- TOC entry 436 (class 1255 OID 17265)
-- Name: topic(); Type: FUNCTION; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE FUNCTION realtime.topic() RETURNS text
    LANGUAGE sql STABLE
    AS $$
select nullif(current_setting('realtime.topic', true), '')::text;
$$;


ALTER FUNCTION realtime.topic() OWNER TO supabase_realtime_admin;

--
-- TOC entry 449 (class 1255 OID 22127)
-- Name: add_prefixes(text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.add_prefixes(_bucket_id text, _name text) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    prefixes text[];
BEGIN
    prefixes := "storage"."get_prefixes"("_name");

    IF array_length(prefixes, 1) > 0 THEN
        INSERT INTO storage.prefixes (name, bucket_id)
        SELECT UNNEST(prefixes) as name, "_bucket_id" ON CONFLICT DO NOTHING;
    END IF;
END;
$$;


ALTER FUNCTION storage.add_prefixes(_bucket_id text, _name text) OWNER TO supabase_storage_admin;

--
-- TOC entry 423 (class 1255 OID 17058)
-- Name: can_insert_object(text, text, uuid, jsonb); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  INSERT INTO "storage"."objects" ("bucket_id", "name", "owner", "metadata") VALUES (bucketid, name, owner, metadata);
  -- hack to rollback the successful insert
  RAISE sqlstate 'PT200' using
  message = 'ROLLBACK',
  detail = 'rollback successful insert';
END
$$;


ALTER FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) OWNER TO supabase_storage_admin;

--
-- TOC entry 450 (class 1255 OID 22128)
-- Name: delete_prefix(text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.delete_prefix(_bucket_id text, _name text) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    -- Check if we can delete the prefix
    IF EXISTS(
        SELECT FROM "storage"."prefixes"
        WHERE "prefixes"."bucket_id" = "_bucket_id"
          AND level = "storage"."get_level"("_name") + 1
          AND "prefixes"."name" COLLATE "C" LIKE "_name" || '/%'
        LIMIT 1
    )
    OR EXISTS(
        SELECT FROM "storage"."objects"
        WHERE "objects"."bucket_id" = "_bucket_id"
          AND "storage"."get_level"("objects"."name") = "storage"."get_level"("_name") + 1
          AND "objects"."name" COLLATE "C" LIKE "_name" || '/%'
        LIMIT 1
    ) THEN
    -- There are sub-objects, skip deletion
    RETURN false;
    ELSE
        DELETE FROM "storage"."prefixes"
        WHERE "prefixes"."bucket_id" = "_bucket_id"
          AND level = "storage"."get_level"("_name")
          AND "prefixes"."name" = "_name";
        RETURN true;
    END IF;
END;
$$;


ALTER FUNCTION storage.delete_prefix(_bucket_id text, _name text) OWNER TO supabase_storage_admin;

--
-- TOC entry 453 (class 1255 OID 22131)
-- Name: delete_prefix_hierarchy_trigger(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.delete_prefix_hierarchy_trigger() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    prefix text;
BEGIN
    prefix := "storage"."get_prefix"(OLD."name");

    IF coalesce(prefix, '') != '' THEN
        PERFORM "storage"."delete_prefix"(OLD."bucket_id", prefix);
    END IF;

    RETURN OLD;
END;
$$;


ALTER FUNCTION storage.delete_prefix_hierarchy_trigger() OWNER TO supabase_storage_admin;

--
-- TOC entry 459 (class 1255 OID 22146)
-- Name: enforce_bucket_name_length(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.enforce_bucket_name_length() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
begin
    if length(new.name) > 100 then
        raise exception 'bucket name "%" is too long (% characters). Max is 100.', new.name, length(new.name);
    end if;
    return new;
end;
$$;


ALTER FUNCTION storage.enforce_bucket_name_length() OWNER TO supabase_storage_admin;

--
-- TOC entry 420 (class 1255 OID 17032)
-- Name: extension(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.extension(name text) RETURNS text
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE
    _parts text[];
    _filename text;
BEGIN
    SELECT string_to_array(name, '/') INTO _parts;
    SELECT _parts[array_length(_parts,1)] INTO _filename;
    RETURN reverse(split_part(reverse(_filename), '.', 1));
END
$$;


ALTER FUNCTION storage.extension(name text) OWNER TO supabase_storage_admin;

--
-- TOC entry 419 (class 1255 OID 17031)
-- Name: filename(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.filename(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[array_length(_parts,1)];
END
$$;


ALTER FUNCTION storage.filename(name text) OWNER TO supabase_storage_admin;

--
-- TOC entry 418 (class 1255 OID 17030)
-- Name: foldername(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.foldername(name text) RETURNS text[]
    LANGUAGE plpgsql IMMUTABLE
    AS $$
DECLARE
    _parts text[];
BEGIN
    -- Split on "/" to get path segments
    SELECT string_to_array(name, '/') INTO _parts;
    -- Return everything except the last segment
    RETURN _parts[1 : array_length(_parts,1) - 1];
END
$$;


ALTER FUNCTION storage.foldername(name text) OWNER TO supabase_storage_admin;

--
-- TOC entry 446 (class 1255 OID 22109)
-- Name: get_level(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.get_level(name text) RETURNS integer
    LANGUAGE sql IMMUTABLE STRICT
    AS $$
SELECT array_length(string_to_array("name", '/'), 1);
$$;


ALTER FUNCTION storage.get_level(name text) OWNER TO supabase_storage_admin;

--
-- TOC entry 447 (class 1255 OID 22125)
-- Name: get_prefix(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.get_prefix(name text) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $_$
SELECT
    CASE WHEN strpos("name", '/') > 0 THEN
             regexp_replace("name", '[\/]{1}[^\/]+\/?$', '')
         ELSE
             ''
        END;
$_$;


ALTER FUNCTION storage.get_prefix(name text) OWNER TO supabase_storage_admin;

--
-- TOC entry 448 (class 1255 OID 22126)
-- Name: get_prefixes(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.get_prefixes(name text) RETURNS text[]
    LANGUAGE plpgsql IMMUTABLE STRICT
    AS $$
DECLARE
    parts text[];
    prefixes text[];
    prefix text;
BEGIN
    -- Split the name into parts by '/'
    parts := string_to_array("name", '/');
    prefixes := '{}';

    -- Construct the prefixes, stopping one level below the last part
    FOR i IN 1..array_length(parts, 1) - 1 LOOP
            prefix := array_to_string(parts[1:i], '/');
            prefixes := array_append(prefixes, prefix);
    END LOOP;

    RETURN prefixes;
END;
$$;


ALTER FUNCTION storage.get_prefixes(name text) OWNER TO supabase_storage_admin;

--
-- TOC entry 457 (class 1255 OID 22144)
-- Name: get_size_by_bucket(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.get_size_by_bucket() RETURNS TABLE(size bigint, bucket_id text)
    LANGUAGE plpgsql STABLE
    AS $$
BEGIN
    return query
        select sum((metadata->>'size')::bigint) as size, obj.bucket_id
        from "storage".objects as obj
        group by obj.bucket_id;
END
$$;


ALTER FUNCTION storage.get_size_by_bucket() OWNER TO supabase_storage_admin;

--
-- TOC entry 425 (class 1255 OID 17097)
-- Name: list_multipart_uploads_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, next_key_token text DEFAULT ''::text, next_upload_token text DEFAULT ''::text) RETURNS TABLE(key text, id text, created_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(key COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                        substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1)))
                    ELSE
                        key
                END AS key, id, created_at
            FROM
                storage.s3_multipart_uploads
            WHERE
                bucket_id = $5 AND
                key ILIKE $1 || ''%'' AND
                CASE
                    WHEN $4 != '''' AND $6 = '''' THEN
                        CASE
                            WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                                substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                key COLLATE "C" > $4
                            END
                    ELSE
                        true
                END AND
                CASE
                    WHEN $6 != '''' THEN
                        id COLLATE "C" > $6
                    ELSE
                        true
                    END
            ORDER BY
                key COLLATE "C" ASC, created_at ASC) as e order by key COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_key_token, bucket_id, next_upload_token;
END;
$_$;


ALTER FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text) OWNER TO supabase_storage_admin;

--
-- TOC entry 424 (class 1255 OID 17060)
-- Name: list_objects_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, start_after text DEFAULT ''::text, next_token text DEFAULT ''::text) RETURNS TABLE(name text, id uuid, metadata jsonb, updated_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(name COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                        substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1)))
                    ELSE
                        name
                END AS name, id, metadata, updated_at
            FROM
                storage.objects
            WHERE
                bucket_id = $5 AND
                name ILIKE $1 || ''%'' AND
                CASE
                    WHEN $6 != '''' THEN
                    name COLLATE "C" > $6
                ELSE true END
                AND CASE
                    WHEN $4 != '''' THEN
                        CASE
                            WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                                substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                name COLLATE "C" > $4
                            END
                    ELSE
                        true
                END
            ORDER BY
                name COLLATE "C" ASC) as e order by name COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_token, bucket_id, start_after;
END;
$_$;


ALTER FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text) OWNER TO supabase_storage_admin;

--
-- TOC entry 452 (class 1255 OID 22130)
-- Name: objects_insert_prefix_trigger(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.objects_insert_prefix_trigger() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    PERFORM "storage"."add_prefixes"(NEW."bucket_id", NEW."name");
    NEW.level := "storage"."get_level"(NEW."name");

    RETURN NEW;
END;
$$;


ALTER FUNCTION storage.objects_insert_prefix_trigger() OWNER TO supabase_storage_admin;

--
-- TOC entry 458 (class 1255 OID 22145)
-- Name: objects_update_prefix_trigger(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.objects_update_prefix_trigger() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
    old_prefixes TEXT[];
BEGIN
    -- Ensure this is an update operation and the name has changed
    IF TG_OP = 'UPDATE' AND (NEW."name" <> OLD."name" OR NEW."bucket_id" <> OLD."bucket_id") THEN
        -- Retrieve old prefixes
        old_prefixes := "storage"."get_prefixes"(OLD."name");

        -- Remove old prefixes that are only used by this object
        WITH all_prefixes as (
            SELECT unnest(old_prefixes) as prefix
        ),
        can_delete_prefixes as (
             SELECT prefix
             FROM all_prefixes
             WHERE NOT EXISTS (
                 SELECT 1 FROM "storage"."objects"
                 WHERE "bucket_id" = OLD."bucket_id"
                   AND "name" <> OLD."name"
                   AND "name" LIKE (prefix || '%')
             )
         )
        DELETE FROM "storage"."prefixes" WHERE name IN (SELECT prefix FROM can_delete_prefixes);

        -- Add new prefixes
        PERFORM "storage"."add_prefixes"(NEW."bucket_id", NEW."name");
    END IF;
    -- Set the new level
    NEW."level" := "storage"."get_level"(NEW."name");

    RETURN NEW;
END;
$$;


ALTER FUNCTION storage.objects_update_prefix_trigger() OWNER TO supabase_storage_admin;

--
-- TOC entry 426 (class 1255 OID 17113)
-- Name: operation(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.operation() RETURNS text
    LANGUAGE plpgsql STABLE
    AS $$
BEGIN
    RETURN current_setting('storage.operation', true);
END;
$$;


ALTER FUNCTION storage.operation() OWNER TO supabase_storage_admin;

--
-- TOC entry 451 (class 1255 OID 22129)
-- Name: prefixes_insert_trigger(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.prefixes_insert_trigger() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    PERFORM "storage"."add_prefixes"(NEW."bucket_id", NEW."name");
    RETURN NEW;
END;
$$;


ALTER FUNCTION storage.prefixes_insert_trigger() OWNER TO supabase_storage_admin;

--
-- TOC entry 421 (class 1255 OID 17047)
-- Name: search(text, text, integer, integer, integer, text, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.search(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text) RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)
    LANGUAGE plpgsql
    AS $$
declare
    can_bypass_rls BOOLEAN;
begin
    SELECT rolbypassrls
    INTO can_bypass_rls
    FROM pg_roles
    WHERE rolname = coalesce(nullif(current_setting('role', true), 'none'), current_user);

    IF can_bypass_rls THEN
        RETURN QUERY SELECT * FROM storage.search_v1_optimised(prefix, bucketname, limits, levels, offsets, search, sortcolumn, sortorder);
    ELSE
        RETURN QUERY SELECT * FROM storage.search_legacy_v1(prefix, bucketname, limits, levels, offsets, search, sortcolumn, sortorder);
    END IF;
end;
$$;


ALTER FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) OWNER TO supabase_storage_admin;

--
-- TOC entry 456 (class 1255 OID 22142)
-- Name: search_legacy_v1(text, text, integer, integer, integer, text, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.search_legacy_v1(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text) RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)
    LANGUAGE plpgsql STABLE
    AS $_$
declare
    v_order_by text;
    v_sort_order text;
begin
    case
        when sortcolumn = 'name' then
            v_order_by = 'name';
        when sortcolumn = 'updated_at' then
            v_order_by = 'updated_at';
        when sortcolumn = 'created_at' then
            v_order_by = 'created_at';
        when sortcolumn = 'last_accessed_at' then
            v_order_by = 'last_accessed_at';
        else
            v_order_by = 'name';
        end case;

    case
        when sortorder = 'asc' then
            v_sort_order = 'asc';
        when sortorder = 'desc' then
            v_sort_order = 'desc';
        else
            v_sort_order = 'asc';
        end case;

    v_order_by = v_order_by || ' ' || v_sort_order;

    return query execute
        'with folders as (
           select path_tokens[$1] as folder
           from storage.objects
             where objects.name ilike $2 || $3 || ''%''
               and bucket_id = $4
               and array_length(objects.path_tokens, 1) <> $1
           group by folder
           order by folder ' || v_sort_order || '
     )
     (select folder as "name",
            null as id,
            null as updated_at,
            null as created_at,
            null as last_accessed_at,
            null as metadata from folders)
     union all
     (select path_tokens[$1] as "name",
            id,
            updated_at,
            created_at,
            last_accessed_at,
            metadata
     from storage.objects
     where objects.name ilike $2 || $3 || ''%''
       and bucket_id = $4
       and array_length(objects.path_tokens, 1) = $1
     order by ' || v_order_by || ')
     limit $5
     offset $6' using levels, prefix, search, bucketname, limits, offsets;
end;
$_$;


ALTER FUNCTION storage.search_legacy_v1(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) OWNER TO supabase_storage_admin;

--
-- TOC entry 455 (class 1255 OID 22141)
-- Name: search_v1_optimised(text, text, integer, integer, integer, text, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.search_v1_optimised(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text) RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)
    LANGUAGE plpgsql STABLE
    AS $_$
declare
    v_order_by text;
    v_sort_order text;
begin
    case
        when sortcolumn = 'name' then
            v_order_by = 'name';
        when sortcolumn = 'updated_at' then
            v_order_by = 'updated_at';
        when sortcolumn = 'created_at' then
            v_order_by = 'created_at';
        when sortcolumn = 'last_accessed_at' then
            v_order_by = 'last_accessed_at';
        else
            v_order_by = 'name';
        end case;

    case
        when sortorder = 'asc' then
            v_sort_order = 'asc';
        when sortorder = 'desc' then
            v_sort_order = 'desc';
        else
            v_sort_order = 'asc';
        end case;

    v_order_by = v_order_by || ' ' || v_sort_order;

    return query execute
        'with folders as (
           select (string_to_array(name, ''/''))[level] as name
           from storage.prefixes
             where lower(prefixes.name) like lower($2 || $3) || ''%''
               and bucket_id = $4
               and level = $1
           order by name ' || v_sort_order || '
     )
     (select name,
            null as id,
            null as updated_at,
            null as created_at,
            null as last_accessed_at,
            null as metadata from folders)
     union all
     (select path_tokens[level] as "name",
            id,
            updated_at,
            created_at,
            last_accessed_at,
            metadata
     from storage.objects
     where lower(objects.name) like lower($2 || $3) || ''%''
       and bucket_id = $4
       and level = $1
     order by ' || v_order_by || ')
     limit $5
     offset $6' using levels, prefix, search, bucketname, limits, offsets;
end;
$_$;


ALTER FUNCTION storage.search_v1_optimised(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) OWNER TO supabase_storage_admin;

--
-- TOC entry 454 (class 1255 OID 22136)
-- Name: search_v2(text, text, integer, integer, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.search_v2(prefix text, bucket_name text, limits integer DEFAULT 100, levels integer DEFAULT 1, start_after text DEFAULT ''::text) RETURNS TABLE(key text, name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, metadata jsonb)
    LANGUAGE plpgsql STABLE
    AS $_$
BEGIN
    RETURN query EXECUTE
        $sql$
        SELECT * FROM (
            (
                SELECT
                    split_part(name, '/', $4) AS key,
                    name || '/' AS name,
                    NULL::uuid AS id,
                    NULL::timestamptz AS updated_at,
                    NULL::timestamptz AS created_at,
                    NULL::jsonb AS metadata
                FROM storage.prefixes
                WHERE name COLLATE "C" LIKE $1 || '%'
                AND bucket_id = $2
                AND level = $4
                AND name COLLATE "C" > $5
                ORDER BY prefixes.name COLLATE "C" LIMIT $3
            )
            UNION ALL
            (SELECT split_part(name, '/', $4) AS key,
                name,
                id,
                updated_at,
                created_at,
                metadata
            FROM storage.objects
            WHERE name COLLATE "C" LIKE $1 || '%'
                AND bucket_id = $2
                AND level = $4
                AND name COLLATE "C" > $5
            ORDER BY name COLLATE "C" LIMIT $3)
        ) obj
        ORDER BY name COLLATE "C" LIMIT $3;
        $sql$
        USING prefix, bucket_name, limits, levels, start_after;
END;
$_$;


ALTER FUNCTION storage.search_v2(prefix text, bucket_name text, limits integer, levels integer, start_after text) OWNER TO supabase_storage_admin;

--
-- TOC entry 422 (class 1255 OID 17048)
-- Name: update_updated_at_column(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.update_updated_at_column() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW; 
END;
$$;


ALTER FUNCTION storage.update_updated_at_column() OWNER TO supabase_storage_admin;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- TOC entry 283 (class 1259 OID 16525)
-- Name: audit_log_entries; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.audit_log_entries (
    instance_id uuid,
    id uuid NOT NULL,
    payload json,
    created_at timestamp with time zone,
    ip_address character varying(64) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE auth.audit_log_entries OWNER TO supabase_auth_admin;

--
-- TOC entry 4506 (class 0 OID 0)
-- Dependencies: 283
-- Name: TABLE audit_log_entries; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.audit_log_entries IS 'Auth: Audit trail for user actions.';


--
-- TOC entry 300 (class 1259 OID 16927)
-- Name: flow_state; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.flow_state (
    id uuid NOT NULL,
    user_id uuid,
    auth_code text NOT NULL,
    code_challenge_method auth.code_challenge_method NOT NULL,
    code_challenge text NOT NULL,
    provider_type text NOT NULL,
    provider_access_token text,
    provider_refresh_token text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    authentication_method text NOT NULL,
    auth_code_issued_at timestamp with time zone
);


ALTER TABLE auth.flow_state OWNER TO supabase_auth_admin;

--
-- TOC entry 4508 (class 0 OID 0)
-- Dependencies: 300
-- Name: TABLE flow_state; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.flow_state IS 'stores metadata for pkce logins';


--
-- TOC entry 291 (class 1259 OID 16725)
-- Name: identities; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.identities (
    provider_id text NOT NULL,
    user_id uuid NOT NULL,
    identity_data jsonb NOT NULL,
    provider text NOT NULL,
    last_sign_in_at timestamp with time zone,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    email text GENERATED ALWAYS AS (lower((identity_data ->> 'email'::text))) STORED,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE auth.identities OWNER TO supabase_auth_admin;

--
-- TOC entry 4510 (class 0 OID 0)
-- Dependencies: 291
-- Name: TABLE identities; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.identities IS 'Auth: Stores identities associated to a user.';


--
-- TOC entry 4511 (class 0 OID 0)
-- Dependencies: 291
-- Name: COLUMN identities.email; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.identities.email IS 'Auth: Email is a generated column that references the optional email property in the identity_data';


--
-- TOC entry 282 (class 1259 OID 16518)
-- Name: instances; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.instances (
    id uuid NOT NULL,
    uuid uuid,
    raw_base_config text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone
);


ALTER TABLE auth.instances OWNER TO supabase_auth_admin;

--
-- TOC entry 4513 (class 0 OID 0)
-- Dependencies: 282
-- Name: TABLE instances; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.instances IS 'Auth: Manages users across multiple sites.';


--
-- TOC entry 295 (class 1259 OID 16814)
-- Name: mfa_amr_claims; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_amr_claims (
    session_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    authentication_method text NOT NULL,
    id uuid NOT NULL
);


ALTER TABLE auth.mfa_amr_claims OWNER TO supabase_auth_admin;

--
-- TOC entry 4515 (class 0 OID 0)
-- Dependencies: 295
-- Name: TABLE mfa_amr_claims; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_amr_claims IS 'auth: stores authenticator method reference claims for multi factor authentication';


--
-- TOC entry 294 (class 1259 OID 16802)
-- Name: mfa_challenges; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_challenges (
    id uuid NOT NULL,
    factor_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    verified_at timestamp with time zone,
    ip_address inet NOT NULL,
    otp_code text,
    web_authn_session_data jsonb
);


ALTER TABLE auth.mfa_challenges OWNER TO supabase_auth_admin;

--
-- TOC entry 4517 (class 0 OID 0)
-- Dependencies: 294
-- Name: TABLE mfa_challenges; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_challenges IS 'auth: stores metadata about challenge requests made';


--
-- TOC entry 293 (class 1259 OID 16789)
-- Name: mfa_factors; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_factors (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    friendly_name text,
    factor_type auth.factor_type NOT NULL,
    status auth.factor_status NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    secret text,
    phone text,
    last_challenged_at timestamp with time zone,
    web_authn_credential jsonb,
    web_authn_aaguid uuid
);


ALTER TABLE auth.mfa_factors OWNER TO supabase_auth_admin;

--
-- TOC entry 4519 (class 0 OID 0)
-- Dependencies: 293
-- Name: TABLE mfa_factors; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_factors IS 'auth: stores metadata about factors';


--
-- TOC entry 302 (class 1259 OID 17009)
-- Name: oauth_clients; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.oauth_clients (
    id uuid NOT NULL,
    client_id text NOT NULL,
    client_secret_hash text NOT NULL,
    registration_type auth.oauth_registration_type NOT NULL,
    redirect_uris text NOT NULL,
    grant_types text NOT NULL,
    client_name text,
    client_uri text,
    logo_uri text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    deleted_at timestamp with time zone,
    CONSTRAINT oauth_clients_client_name_length CHECK ((char_length(client_name) <= 1024)),
    CONSTRAINT oauth_clients_client_uri_length CHECK ((char_length(client_uri) <= 2048)),
    CONSTRAINT oauth_clients_logo_uri_length CHECK ((char_length(logo_uri) <= 2048))
);


ALTER TABLE auth.oauth_clients OWNER TO supabase_auth_admin;

--
-- TOC entry 301 (class 1259 OID 16977)
-- Name: one_time_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.one_time_tokens (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    token_type auth.one_time_token_type NOT NULL,
    token_hash text NOT NULL,
    relates_to text NOT NULL,
    created_at timestamp without time zone DEFAULT now() NOT NULL,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    CONSTRAINT one_time_tokens_token_hash_check CHECK ((char_length(token_hash) > 0))
);


ALTER TABLE auth.one_time_tokens OWNER TO supabase_auth_admin;

--
-- TOC entry 281 (class 1259 OID 16507)
-- Name: refresh_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.refresh_tokens (
    instance_id uuid,
    id bigint NOT NULL,
    token character varying(255),
    user_id character varying(255),
    revoked boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    parent character varying(255),
    session_id uuid
);


ALTER TABLE auth.refresh_tokens OWNER TO supabase_auth_admin;

--
-- TOC entry 4523 (class 0 OID 0)
-- Dependencies: 281
-- Name: TABLE refresh_tokens; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.refresh_tokens IS 'Auth: Store of tokens used to refresh JWT tokens once they expire.';


--
-- TOC entry 280 (class 1259 OID 16506)
-- Name: refresh_tokens_id_seq; Type: SEQUENCE; Schema: auth; Owner: supabase_auth_admin
--

CREATE SEQUENCE auth.refresh_tokens_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE auth.refresh_tokens_id_seq OWNER TO supabase_auth_admin;

--
-- TOC entry 4525 (class 0 OID 0)
-- Dependencies: 280
-- Name: refresh_tokens_id_seq; Type: SEQUENCE OWNED BY; Schema: auth; Owner: supabase_auth_admin
--

ALTER SEQUENCE auth.refresh_tokens_id_seq OWNED BY auth.refresh_tokens.id;


--
-- TOC entry 298 (class 1259 OID 16856)
-- Name: saml_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_providers (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    entity_id text NOT NULL,
    metadata_xml text NOT NULL,
    metadata_url text,
    attribute_mapping jsonb,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    name_id_format text,
    CONSTRAINT "entity_id not empty" CHECK ((char_length(entity_id) > 0)),
    CONSTRAINT "metadata_url not empty" CHECK (((metadata_url = NULL::text) OR (char_length(metadata_url) > 0))),
    CONSTRAINT "metadata_xml not empty" CHECK ((char_length(metadata_xml) > 0))
);


ALTER TABLE auth.saml_providers OWNER TO supabase_auth_admin;

--
-- TOC entry 4527 (class 0 OID 0)
-- Dependencies: 298
-- Name: TABLE saml_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_providers IS 'Auth: Manages SAML Identity Provider connections.';


--
-- TOC entry 299 (class 1259 OID 16874)
-- Name: saml_relay_states; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_relay_states (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    request_id text NOT NULL,
    for_email text,
    redirect_to text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    flow_state_id uuid,
    CONSTRAINT "request_id not empty" CHECK ((char_length(request_id) > 0))
);


ALTER TABLE auth.saml_relay_states OWNER TO supabase_auth_admin;

--
-- TOC entry 4529 (class 0 OID 0)
-- Dependencies: 299
-- Name: TABLE saml_relay_states; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_relay_states IS 'Auth: Contains SAML Relay State information for each Service Provider initiated login.';


--
-- TOC entry 284 (class 1259 OID 16533)
-- Name: schema_migrations; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE auth.schema_migrations OWNER TO supabase_auth_admin;

--
-- TOC entry 4531 (class 0 OID 0)
-- Dependencies: 284
-- Name: TABLE schema_migrations; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.schema_migrations IS 'Auth: Manages updates to the auth system.';


--
-- TOC entry 292 (class 1259 OID 16755)
-- Name: sessions; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sessions (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    factor_id uuid,
    aal auth.aal_level,
    not_after timestamp with time zone,
    refreshed_at timestamp without time zone,
    user_agent text,
    ip inet,
    tag text
);


ALTER TABLE auth.sessions OWNER TO supabase_auth_admin;

--
-- TOC entry 4533 (class 0 OID 0)
-- Dependencies: 292
-- Name: TABLE sessions; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sessions IS 'Auth: Stores session data associated to a user.';


--
-- TOC entry 4534 (class 0 OID 0)
-- Dependencies: 292
-- Name: COLUMN sessions.not_after; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sessions.not_after IS 'Auth: Not after is a nullable column that contains a timestamp after which the session should be regarded as expired.';


--
-- TOC entry 297 (class 1259 OID 16841)
-- Name: sso_domains; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_domains (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    domain text NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "domain not empty" CHECK ((char_length(domain) > 0))
);


ALTER TABLE auth.sso_domains OWNER TO supabase_auth_admin;

--
-- TOC entry 4536 (class 0 OID 0)
-- Dependencies: 297
-- Name: TABLE sso_domains; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_domains IS 'Auth: Manages SSO email address domain mapping to an SSO Identity Provider.';


--
-- TOC entry 296 (class 1259 OID 16832)
-- Name: sso_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_providers (
    id uuid NOT NULL,
    resource_id text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    disabled boolean,
    CONSTRAINT "resource_id not empty" CHECK (((resource_id = NULL::text) OR (char_length(resource_id) > 0)))
);


ALTER TABLE auth.sso_providers OWNER TO supabase_auth_admin;

--
-- TOC entry 4538 (class 0 OID 0)
-- Dependencies: 296
-- Name: TABLE sso_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_providers IS 'Auth: Manages SSO identity provider information; see saml_providers for SAML.';


--
-- TOC entry 4539 (class 0 OID 0)
-- Dependencies: 296
-- Name: COLUMN sso_providers.resource_id; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sso_providers.resource_id IS 'Auth: Uniquely identifies a SSO provider according to a user-chosen resource ID (case insensitive), useful in infrastructure as code.';


--
-- TOC entry 279 (class 1259 OID 16495)
-- Name: users; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.users (
    instance_id uuid,
    id uuid NOT NULL,
    aud character varying(255),
    role character varying(255),
    email character varying(255),
    encrypted_password character varying(255),
    email_confirmed_at timestamp with time zone,
    invited_at timestamp with time zone,
    confirmation_token character varying(255),
    confirmation_sent_at timestamp with time zone,
    recovery_token character varying(255),
    recovery_sent_at timestamp with time zone,
    email_change_token_new character varying(255),
    email_change character varying(255),
    email_change_sent_at timestamp with time zone,
    last_sign_in_at timestamp with time zone,
    raw_app_meta_data jsonb,
    raw_user_meta_data jsonb,
    is_super_admin boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    phone text DEFAULT NULL::character varying,
    phone_confirmed_at timestamp with time zone,
    phone_change text DEFAULT ''::character varying,
    phone_change_token character varying(255) DEFAULT ''::character varying,
    phone_change_sent_at timestamp with time zone,
    confirmed_at timestamp with time zone GENERATED ALWAYS AS (LEAST(email_confirmed_at, phone_confirmed_at)) STORED,
    email_change_token_current character varying(255) DEFAULT ''::character varying,
    email_change_confirm_status smallint DEFAULT 0,
    banned_until timestamp with time zone,
    reauthentication_token character varying(255) DEFAULT ''::character varying,
    reauthentication_sent_at timestamp with time zone,
    is_sso_user boolean DEFAULT false NOT NULL,
    deleted_at timestamp with time zone,
    is_anonymous boolean DEFAULT false NOT NULL,
    CONSTRAINT users_email_change_confirm_status_check CHECK (((email_change_confirm_status >= 0) AND (email_change_confirm_status <= 2)))
);


ALTER TABLE auth.users OWNER TO supabase_auth_admin;

--
-- TOC entry 4541 (class 0 OID 0)
-- Dependencies: 279
-- Name: TABLE users; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.users IS 'Auth: Stores user login data within a secure schema.';


--
-- TOC entry 4542 (class 0 OID 0)
-- Dependencies: 279
-- Name: COLUMN users.is_sso_user; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.users.is_sso_user IS 'Auth: Set this column to true when the account comes from SSO. These accounts can have duplicate emails.';


--
-- TOC entry 319 (class 1259 OID 17528)
-- Name: achievements; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.achievements (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    title text NOT NULL,
    description text,
    date_achieved date,
    certificate_url text,
    order_index integer DEFAULT 0,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.achievements OWNER TO postgres;

--
-- TOC entry 326 (class 1259 OID 20176)
-- Name: blog_comments; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.blog_comments (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    blog_post_id uuid NOT NULL,
    parent_comment_id uuid,
    user_id uuid,
    author_name text NOT NULL,
    author_email text,
    content text NOT NULL,
    is_approved boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE public.blog_comments OWNER TO postgres;

--
-- TOC entry 325 (class 1259 OID 20152)
-- Name: blog_likes; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.blog_likes (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    blog_post_id uuid NOT NULL,
    user_id uuid,
    user_ip inet,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    CONSTRAINT check_user_or_ip CHECK ((((user_id IS NOT NULL) AND (user_ip IS NULL)) OR ((user_id IS NULL) AND (user_ip IS NOT NULL))))
);


ALTER TABLE public.blog_likes OWNER TO postgres;

--
-- TOC entry 320 (class 1259 OID 17539)
-- Name: blog_posts; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.blog_posts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    title text NOT NULL,
    slug text NOT NULL,
    content text NOT NULL,
    excerpt text,
    image_url text,
    published boolean DEFAULT false,
    tags text[],
    order_index integer DEFAULT 0,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    images text[],
    external_link text
);


ALTER TABLE public.blog_posts OWNER TO postgres;

--
-- TOC entry 4549 (class 0 OID 0)
-- Dependencies: 320
-- Name: COLUMN blog_posts.external_link; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.blog_posts.external_link IS 'External URL for blog posts that link to external sites. If set, clicking the blog will redirect to this URL instead of showing internal content.';


--
-- TOC entry 323 (class 1259 OID 20050)
-- Name: contact_messages; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.contact_messages (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name text NOT NULL,
    email text NOT NULL,
    subject text NOT NULL,
    message text NOT NULL,
    status text DEFAULT 'unread'::text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT contact_messages_status_check CHECK ((status = ANY (ARRAY['unread'::text, 'read'::text, 'replied'::text])))
);


ALTER TABLE public.contact_messages OWNER TO postgres;

--
-- TOC entry 324 (class 1259 OID 20067)
-- Name: courses; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.courses (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name text NOT NULL,
    description text,
    institution text,
    completion_date date,
    certificate_url text,
    is_favorite boolean DEFAULT false,
    order_index integer DEFAULT 0,
    created_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE public.courses OWNER TO postgres;

--
-- TOC entry 315 (class 1259 OID 17482)
-- Name: education; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.education (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    degree text NOT NULL,
    institution text NOT NULL,
    duration text NOT NULL,
    gpa text,
    location text,
    description text,
    coursework text[],
    order_index integer DEFAULT 0,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.education OWNER TO postgres;

--
-- TOC entry 316 (class 1259 OID 17493)
-- Name: experience; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.experience (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    title text NOT NULL,
    company text NOT NULL,
    duration text NOT NULL,
    location text,
    description text[],
    technologies text[],
    order_index integer DEFAULT 0,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.experience OWNER TO postgres;

--
-- TOC entry 331 (class 1259 OID 20864)
-- Name: notifications; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.notifications (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid DEFAULT auth.uid(),
    title text NOT NULL,
    message text,
    type text DEFAULT 'reminder'::text,
    reference_type text,
    reference_id uuid,
    scheduled_for timestamp with time zone NOT NULL,
    is_read boolean DEFAULT false,
    is_sent boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT notifications_reference_type_check CHECK ((reference_type = ANY (ARRAY['task'::text, 'schedule'::text, 'general'::text]))),
    CONSTRAINT notifications_type_check CHECK ((type = ANY (ARRAY['reminder'::text, 'deadline'::text, 'task_due'::text, 'schedule_reminder'::text])))
);


ALTER TABLE public.notifications OWNER TO postgres;

--
-- TOC entry 314 (class 1259 OID 17460)
-- Name: personal_info; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.personal_info (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name text DEFAULT 'Dileep Adari'::text NOT NULL,
    title text DEFAULT 'Computer Science Student & Full-Stack Developer'::text NOT NULL,
    bio text DEFAULT 'A passionate web developer and programmer. My journey revolves around the enchanting world of software engineering, where I thrive on turning ideas into reality through the art of coding.'::text NOT NULL,
    location text DEFAULT 'Visakhapatnam, Andhra Pradesh'::text,
    email text DEFAULT 'rs200302@rguktsklm.ac.in'::text,
    phone text DEFAULT '+91 7330701217'::text,
    website text DEFAULT 'dileepadari.dev'::text,
    linkedin text DEFAULT 'https://www.linkedin.com/in/dileep-kumar-adari-298169252'::text,
    github text DEFAULT 'https://github.com/dileepadari'::text,
    instagram text DEFAULT 'https://www.instagram.com/dileepadari'::text,
    youtube text DEFAULT 'https://www.youtube.com/@dileepadari5182/featured'::text,
    twitter text DEFAULT 'https://twitter.com/Dileepadari1'::text,
    avatar_url text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    medium text,
    codeforces text
);


ALTER TABLE public.personal_info OWNER TO postgres;

--
-- TOC entry 313 (class 1259 OID 17442)
-- Name: profiles; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.profiles (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL,
    email text,
    full_name text,
    avatar_url text,
    is_admin boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.profiles OWNER TO postgres;

--
-- TOC entry 317 (class 1259 OID 17504)
-- Name: projects; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.projects (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    title text NOT NULL,
    description text NOT NULL,
    technologies text[],
    github_url text,
    live_url text,
    image_url text,
    featured boolean DEFAULT false,
    order_index integer DEFAULT 0,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    images text[],
    is_private boolean DEFAULT false,
    stars integer DEFAULT 0,
    forks integer DEFAULT 0,
    language text,
    language_color text,
    tags text[],
    repository_url text,
    updated_at_display text
);


ALTER TABLE public.projects OWNER TO postgres;

--
-- TOC entry 332 (class 1259 OID 20880)
-- Name: quick_actions; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.quick_actions (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name text NOT NULL,
    type text NOT NULL,
    template_data jsonb NOT NULL,
    icon text DEFAULT 'plus'::text,
    color text DEFAULT '#3b82f6'::text,
    sort_order integer DEFAULT 0,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT quick_actions_type_check CHECK ((type = ANY (ARRAY['task'::text, 'schedule'::text])))
);


ALTER TABLE public.quick_actions OWNER TO postgres;

--
-- TOC entry 329 (class 1259 OID 20822)
-- Name: schedule_templates; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.schedule_templates (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name text NOT NULL,
    title text NOT NULL,
    description text,
    duration_minutes integer DEFAULT 60 NOT NULL,
    type text DEFAULT 'meeting'::text,
    category text DEFAULT 'meeting'::text,
    color text DEFAULT '#3b82f6'::text,
    reminder_minutes integer[] DEFAULT '{15}'::integer[],
    tags text[] DEFAULT '{}'::text[],
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT schedule_templates_category_check CHECK ((category = ANY (ARRAY['meeting'::text, 'appointment'::text, 'event'::text, 'deadline'::text, 'reminder'::text, 'personal'::text, 'work'::text]))),
    CONSTRAINT schedule_templates_type_check CHECK ((type = ANY (ARRAY['meeting'::text, 'call'::text, 'event'::text, 'deadline'::text])))
);


ALTER TABLE public.schedule_templates OWNER TO postgres;

--
-- TOC entry 322 (class 1259 OID 20033)
-- Name: schedules; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.schedules (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    title text NOT NULL,
    description text,
    start_time timestamp with time zone NOT NULL,
    end_time timestamp with time zone NOT NULL,
    type text DEFAULT 'meeting'::text,
    status text DEFAULT 'scheduled'::text,
    attendees text[],
    location text,
    meeting_url text,
    is_public boolean DEFAULT false,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    category text DEFAULT 'meeting'::text,
    tags text[] DEFAULT '{}'::text[],
    color text DEFAULT '#3b82f6'::text,
    reminder_minutes integer[] DEFAULT '{15}'::integer[],
    notes text,
    task_id uuid,
    is_recurring boolean DEFAULT false,
    recurrence_rule jsonb,
    recurrence_end_date timestamp with time zone,
    parent_event_id uuid,
    original_start_time timestamp with time zone,
    CONSTRAINT schedules_category_check CHECK ((category = ANY (ARRAY['meeting'::text, 'appointment'::text, 'event'::text, 'deadline'::text, 'reminder'::text, 'personal'::text, 'work'::text]))),
    CONSTRAINT schedules_status_check CHECK ((status = ANY (ARRAY['scheduled'::text, 'completed'::text, 'cancelled'::text]))),
    CONSTRAINT schedules_type_check CHECK ((type = ANY (ARRAY['meeting'::text, 'call'::text, 'event'::text, 'deadline'::text])))
);


ALTER TABLE public.schedules OWNER TO postgres;

--
-- TOC entry 318 (class 1259 OID 17516)
-- Name: skills; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.skills (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    category text NOT NULL,
    skill_name text NOT NULL,
    proficiency integer DEFAULT 80,
    icon_url text,
    order_index integer DEFAULT 0,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE public.skills OWNER TO postgres;

--
-- TOC entry 330 (class 1259 OID 20841)
-- Name: task_dependencies; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.task_dependencies (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    task_id uuid NOT NULL,
    dependent_task_id uuid NOT NULL,
    dependency_type text DEFAULT 'blocks'::text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT task_dependencies_dependency_type_check CHECK ((dependency_type = ANY (ARRAY['blocks'::text, 'subtask'::text])))
);


ALTER TABLE public.task_dependencies OWNER TO postgres;

--
-- TOC entry 328 (class 1259 OID 20790)
-- Name: task_templates; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.task_templates (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    name text NOT NULL,
    title text NOT NULL,
    description text,
    category text DEFAULT 'general'::text,
    priority text DEFAULT 'medium'::text,
    estimated_hours numeric(4,2),
    tags text[] DEFAULT '{}'::text[],
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    CONSTRAINT task_templates_category_check CHECK ((category = ANY (ARRAY['personal'::text, 'work'::text, 'project'::text, 'academic'::text, 'general'::text]))),
    CONSTRAINT task_templates_priority_check CHECK ((priority = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text])))
);


ALTER TABLE public.task_templates OWNER TO postgres;

--
-- TOC entry 321 (class 1259 OID 20011)
-- Name: tasks; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.tasks (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    title text NOT NULL,
    description text,
    status text DEFAULT 'todo'::text,
    priority text DEFAULT 'medium'::text,
    due_date timestamp with time zone,
    project_id uuid,
    order_index integer DEFAULT 0,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL,
    category text DEFAULT 'general'::text,
    tags text[] DEFAULT '{}'::text[],
    estimated_hours numeric(4,2),
    actual_hours numeric(4,2),
    completed_at timestamp with time zone,
    assignee_email text,
    notes text,
    is_recurring boolean DEFAULT false,
    recurrence_pattern jsonb,
    CONSTRAINT tasks_category_check CHECK ((category = ANY (ARRAY['personal'::text, 'work'::text, 'project'::text, 'academic'::text, 'general'::text]))),
    CONSTRAINT tasks_priority_check CHECK ((priority = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text]))),
    CONSTRAINT tasks_status_check CHECK ((status = ANY (ARRAY['todo'::text, 'in-progress'::text, 'completed'::text])))
);


ALTER TABLE public.tasks OWNER TO postgres;

--
-- TOC entry 327 (class 1259 OID 20302)
-- Name: timeline_events; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.timeline_events (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    type character varying(20) NOT NULL,
    title character varying(255) NOT NULL,
    description text NOT NULL,
    date date NOT NULL,
    repository character varying(255),
    language character varying(100),
    language_color character varying(7),
    tags text[],
    link character varying(500),
    impact character varying(255),
    metadata jsonb,
    order_index integer DEFAULT 0,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT timeline_events_type_check CHECK (((type)::text = ANY ((ARRAY['commit'::character varying, 'project'::character varying, 'achievement'::character varying, 'education'::character varying, 'work'::character varying, 'contribution'::character varying, 'task'::character varying, 'schedule'::character varying])::text[])))
);


ALTER TABLE public.timeline_events OWNER TO postgres;

--
-- TOC entry 311 (class 1259 OID 17275)
-- Name: messages; Type: TABLE; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE TABLE realtime.messages (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
)
PARTITION BY RANGE (inserted_at);


ALTER TABLE realtime.messages OWNER TO supabase_realtime_admin;

--
-- TOC entry 303 (class 1259 OID 17025)
-- Name: schema_migrations; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.schema_migrations (
    version bigint NOT NULL,
    inserted_at timestamp(0) without time zone
);


ALTER TABLE realtime.schema_migrations OWNER TO supabase_admin;

--
-- TOC entry 308 (class 1259 OID 17131)
-- Name: subscription; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.subscription (
    id bigint NOT NULL,
    subscription_id uuid NOT NULL,
    entity regclass NOT NULL,
    filters realtime.user_defined_filter[] DEFAULT '{}'::realtime.user_defined_filter[] NOT NULL,
    claims jsonb NOT NULL,
    claims_role regrole GENERATED ALWAYS AS (realtime.to_regrole((claims ->> 'role'::text))) STORED NOT NULL,
    created_at timestamp without time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE realtime.subscription OWNER TO supabase_admin;

--
-- TOC entry 307 (class 1259 OID 17130)
-- Name: subscription_id_seq; Type: SEQUENCE; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE realtime.subscription ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME realtime.subscription_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- TOC entry 285 (class 1259 OID 16546)
-- Name: buckets; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.buckets (
    id text NOT NULL,
    name text NOT NULL,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    public boolean DEFAULT false,
    avif_autodetection boolean DEFAULT false,
    file_size_limit bigint,
    allowed_mime_types text[],
    owner_id text,
    type storage.buckettype DEFAULT 'STANDARD'::storage.buckettype NOT NULL
);


ALTER TABLE storage.buckets OWNER TO supabase_storage_admin;

--
-- TOC entry 4571 (class 0 OID 0)
-- Dependencies: 285
-- Name: COLUMN buckets.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.buckets.owner IS 'Field is deprecated, use owner_id instead';


--
-- TOC entry 334 (class 1259 OID 22154)
-- Name: buckets_analytics; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.buckets_analytics (
    id text NOT NULL,
    type storage.buckettype DEFAULT 'ANALYTICS'::storage.buckettype NOT NULL,
    format text DEFAULT 'ICEBERG'::text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    updated_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE storage.buckets_analytics OWNER TO supabase_storage_admin;

--
-- TOC entry 287 (class 1259 OID 16588)
-- Name: migrations; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.migrations (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    hash character varying(40) NOT NULL,
    executed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE storage.migrations OWNER TO supabase_storage_admin;

--
-- TOC entry 286 (class 1259 OID 16561)
-- Name: objects; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.objects (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    bucket_id text,
    name text,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    last_accessed_at timestamp with time zone DEFAULT now(),
    metadata jsonb,
    path_tokens text[] GENERATED ALWAYS AS (string_to_array(name, '/'::text)) STORED,
    version text,
    owner_id text,
    user_metadata jsonb,
    level integer
);


ALTER TABLE storage.objects OWNER TO supabase_storage_admin;

--
-- TOC entry 4574 (class 0 OID 0)
-- Dependencies: 286
-- Name: COLUMN objects.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.objects.owner IS 'Field is deprecated, use owner_id instead';


--
-- TOC entry 333 (class 1259 OID 22110)
-- Name: prefixes; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.prefixes (
    bucket_id text NOT NULL,
    name text NOT NULL COLLATE pg_catalog."C",
    level integer GENERATED ALWAYS AS (storage.get_level(name)) STORED NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


ALTER TABLE storage.prefixes OWNER TO supabase_storage_admin;

--
-- TOC entry 304 (class 1259 OID 17062)
-- Name: s3_multipart_uploads; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads (
    id text NOT NULL,
    in_progress_size bigint DEFAULT 0 NOT NULL,
    upload_signature text NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    version text NOT NULL,
    owner_id text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    user_metadata jsonb
);


ALTER TABLE storage.s3_multipart_uploads OWNER TO supabase_storage_admin;

--
-- TOC entry 305 (class 1259 OID 17076)
-- Name: s3_multipart_uploads_parts; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads_parts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    upload_id text NOT NULL,
    size bigint DEFAULT 0 NOT NULL,
    part_number integer NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    etag text NOT NULL,
    owner_id text,
    version text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE storage.s3_multipart_uploads_parts OWNER TO supabase_storage_admin;

--
-- TOC entry 312 (class 1259 OID 17293)
-- Name: schema_migrations; Type: TABLE; Schema: supabase_migrations; Owner: postgres
--

CREATE TABLE supabase_migrations.schema_migrations (
    version text NOT NULL,
    statements text[],
    name text,
    created_by text,
    idempotency_key text
);


ALTER TABLE supabase_migrations.schema_migrations OWNER TO postgres;

--
-- TOC entry 3666 (class 2604 OID 16510)
-- Name: refresh_tokens id; Type: DEFAULT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens ALTER COLUMN id SET DEFAULT nextval('auth.refresh_tokens_id_seq'::regclass);


--
-- TOC entry 4355 (class 0 OID 16525)
-- Dependencies: 283
-- Data for Name: audit_log_entries; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.audit_log_entries (instance_id, id, payload, created_at, ip_address) FROM stdin;
00000000-0000-0000-0000-000000000000	974c1626-d663-4145-9345-bea307735599	{"action":"user_signedup","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"provider":"email","user_email":"adaridileep@gmail.com","user_id":"615687d6-ca8a-456e-8446-fb12afe77240","user_phone":""}}	2025-09-20 12:16:34.962834+00	
00000000-0000-0000-0000-000000000000	96c796e0-9d48-47da-8efe-50ab055545fa	{"action":"login","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-09-20 12:17:04.446158+00	
00000000-0000-0000-0000-000000000000	44e03756-864c-448b-9de9-e934743f10af	{"action":"logout","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-09-20 13:08:40.125832+00	
00000000-0000-0000-0000-000000000000	35569f10-a68d-41dd-a693-49ed71282f8b	{"action":"login","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-09-20 13:16:10.37103+00	
00000000-0000-0000-0000-000000000000	1ddb7f92-ca24-4ec0-9195-fd6010e8e4b9	{"action":"token_refreshed","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 14:14:32.605855+00	
00000000-0000-0000-0000-000000000000	9693ccba-e68e-45d1-a684-65072a68e2a1	{"action":"token_revoked","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 14:14:32.616318+00	
00000000-0000-0000-0000-000000000000	3313d954-c88d-4c7b-bd8e-9c280f42b6bf	{"action":"token_refreshed","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 15:12:56.48827+00	
00000000-0000-0000-0000-000000000000	d1209710-2e53-4c41-a76b-fe2d1845a83a	{"action":"token_revoked","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 15:12:56.50754+00	
00000000-0000-0000-0000-000000000000	436b70e9-eba2-436c-ba4a-8fbfc1d536df	{"action":"token_refreshed","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 16:11:26.567876+00	
00000000-0000-0000-0000-000000000000	c01edc77-7c49-4c34-b805-398f8c41425d	{"action":"token_revoked","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 16:11:26.590476+00	
00000000-0000-0000-0000-000000000000	e5afc138-aa64-4daa-b24a-924497e8b3e1	{"action":"token_refreshed","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 17:09:43.87806+00	
00000000-0000-0000-0000-000000000000	2d6c47fa-efd5-4864-b26a-008f5984aa84	{"action":"token_revoked","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 17:09:43.893013+00	
00000000-0000-0000-0000-000000000000	c131ac73-f879-4931-851f-798d9ff8ada3	{"action":"token_refreshed","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 18:07:58.893145+00	
00000000-0000-0000-0000-000000000000	65ce3dca-8360-4b1f-a204-500987645824	{"action":"token_revoked","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 18:07:58.913152+00	
00000000-0000-0000-0000-000000000000	c46307ec-68e5-43d0-9047-dc8329f7f1fc	{"action":"token_refreshed","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 19:06:08.62793+00	
00000000-0000-0000-0000-000000000000	38508585-06c3-4ebd-ae04-ec39557ab9f7	{"action":"token_revoked","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 19:06:08.635868+00	
00000000-0000-0000-0000-000000000000	d0a48c99-5195-4444-a0b9-658a9444da08	{"action":"token_refreshed","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 20:04:09.136138+00	
00000000-0000-0000-0000-000000000000	77b86379-9111-496f-bee2-045d4a73ca65	{"action":"token_revoked","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-20 20:04:09.152244+00	
00000000-0000-0000-0000-000000000000	7c69e1fe-98c4-4b5f-a955-17ba23c56b8f	{"action":"token_refreshed","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-21 08:56:06.682925+00	
00000000-0000-0000-0000-000000000000	09ca2234-f125-4636-a549-4e544b9c4792	{"action":"token_revoked","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-21 08:56:06.693294+00	
00000000-0000-0000-0000-000000000000	4894bafe-2599-4769-aac8-96ce030ad991	{"action":"token_refreshed","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-21 09:54:34.25548+00	
00000000-0000-0000-0000-000000000000	978f95ba-4d24-4f71-b3e8-bd1b7c1ae417	{"action":"token_revoked","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-21 09:54:34.269233+00	
00000000-0000-0000-0000-000000000000	43977309-e13c-4a37-ba1b-108e0fe1b7e6	{"action":"token_refreshed","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-21 10:53:04.487761+00	
00000000-0000-0000-0000-000000000000	944b0e8d-bf49-47da-b983-e4aca8e61b85	{"action":"token_revoked","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-21 10:53:04.502474+00	
00000000-0000-0000-0000-000000000000	531b8ddb-a423-4837-97eb-51b6f9cbae11	{"action":"token_refreshed","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-21 11:51:34.457962+00	
00000000-0000-0000-0000-000000000000	081b8d4d-f89f-4319-ac56-87f831f0019f	{"action":"token_revoked","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-21 11:51:34.478088+00	
00000000-0000-0000-0000-000000000000	69c9eb7e-b7b6-4624-b405-5fbe44643199	{"action":"token_refreshed","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-21 15:24:47.882412+00	
00000000-0000-0000-0000-000000000000	0b6b8bd4-197b-414c-99d0-66fb0e6236b0	{"action":"token_revoked","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-21 15:24:47.896013+00	
00000000-0000-0000-0000-000000000000	a12acbd9-b628-4b44-bc6b-8f5320443b0c	{"action":"logout","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-09-21 15:40:55.351007+00	
00000000-0000-0000-0000-000000000000	ef4775ea-8ec0-41e0-9398-ac8c52f8926b	{"action":"login","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-09-21 15:41:47.855677+00	
00000000-0000-0000-0000-000000000000	326ef202-7ee2-4847-8bfe-4ab23fd8cc6f	{"action":"login","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-09-21 15:44:05.190995+00	
00000000-0000-0000-0000-000000000000	87364f22-247a-4eb2-8222-5ecaaa90be16	{"action":"login","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-09-21 15:46:23.027287+00	
00000000-0000-0000-0000-000000000000	8d18ac47-6fbf-46ad-9210-6ac28d6da5f3	{"action":"token_refreshed","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-21 16:40:07.80241+00	
00000000-0000-0000-0000-000000000000	81bfb93e-c3cf-4a36-82fa-b0c6db0ed5ee	{"action":"token_revoked","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-21 16:40:07.830291+00	
00000000-0000-0000-0000-000000000000	d446c95f-cb9a-4b42-aacb-475a48aadd91	{"action":"token_refreshed","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-21 17:38:16.181625+00	
00000000-0000-0000-0000-000000000000	1bfe84bb-7985-405e-ae7f-d3dcc622357e	{"action":"token_revoked","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-21 17:38:16.1994+00	
00000000-0000-0000-0000-000000000000	7ef35bd7-072f-4bab-b4a2-7e6ff922092d	{"action":"token_refreshed","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-21 18:38:45.109293+00	
00000000-0000-0000-0000-000000000000	7649c2c0-386d-4e54-b4ac-149ee0eef49f	{"action":"token_revoked","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-21 18:38:45.116307+00	
00000000-0000-0000-0000-000000000000	8cb6dec0-25b8-4b06-af06-2ecfa26b3fc1	{"action":"token_refreshed","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-21 19:37:17.594796+00	
00000000-0000-0000-0000-000000000000	7efd4143-31cd-491c-8ca0-1b0a9a06ee4b	{"action":"token_revoked","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-21 19:37:17.608088+00	
00000000-0000-0000-0000-000000000000	29ddc000-13d1-4906-a2cb-52402a3f56d5	{"action":"token_refreshed","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-21 20:35:42.794834+00	
00000000-0000-0000-0000-000000000000	bcc6105a-a825-420c-88f3-129780c5f32d	{"action":"token_revoked","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-21 20:35:42.810761+00	
00000000-0000-0000-0000-000000000000	10b1d08b-4f42-4d56-b2cd-fb06dbd63e7b	{"action":"token_refreshed","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-21 21:34:10.558161+00	
00000000-0000-0000-0000-000000000000	0761ca01-7c9d-4335-868a-2c0feea04301	{"action":"token_revoked","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-09-21 21:34:10.565109+00	
00000000-0000-0000-0000-000000000000	d968ebc5-2e31-4afa-8da3-9faa9907733f	{"action":"logout","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-09-21 22:18:26.983178+00	
00000000-0000-0000-0000-000000000000	ed564a0d-2854-4a64-80df-94d889fe5fe6	{"action":"login","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-09-21 22:19:44.703589+00	
00000000-0000-0000-0000-000000000000	100211aa-6bb6-449a-8fe4-77047553214d	{"action":"logout","actor_id":"615687d6-ca8a-456e-8446-fb12afe77240","actor_username":"adaridileep@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-09-21 22:30:14.629457+00	
\.


--
-- TOC entry 4369 (class 0 OID 16927)
-- Dependencies: 300
-- Data for Name: flow_state; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.flow_state (id, user_id, auth_code, code_challenge_method, code_challenge, provider_type, provider_access_token, provider_refresh_token, created_at, updated_at, authentication_method, auth_code_issued_at) FROM stdin;
\.


--
-- TOC entry 4360 (class 0 OID 16725)
-- Dependencies: 291
-- Data for Name: identities; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.identities (provider_id, user_id, identity_data, provider, last_sign_in_at, created_at, updated_at, id) FROM stdin;
615687d6-ca8a-456e-8446-fb12afe77240	615687d6-ca8a-456e-8446-fb12afe77240	{"sub": "615687d6-ca8a-456e-8446-fb12afe77240", "email": "adaridileep@gmail.com", "email_verified": false, "phone_verified": false}	email	2025-09-20 12:16:34.95931+00	2025-09-20 12:16:34.959361+00	2025-09-20 12:16:34.959361+00	d84b3d67-6a10-4cc9-a891-2b11ea679d8d
\.


--
-- TOC entry 4354 (class 0 OID 16518)
-- Dependencies: 282
-- Data for Name: instances; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.instances (id, uuid, raw_base_config, created_at, updated_at) FROM stdin;
\.


--
-- TOC entry 4364 (class 0 OID 16814)
-- Dependencies: 295
-- Data for Name: mfa_amr_claims; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_amr_claims (session_id, created_at, updated_at, authentication_method, id) FROM stdin;
\.


--
-- TOC entry 4363 (class 0 OID 16802)
-- Dependencies: 294
-- Data for Name: mfa_challenges; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_challenges (id, factor_id, created_at, verified_at, ip_address, otp_code, web_authn_session_data) FROM stdin;
\.


--
-- TOC entry 4362 (class 0 OID 16789)
-- Dependencies: 293
-- Data for Name: mfa_factors; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_factors (id, user_id, friendly_name, factor_type, status, created_at, updated_at, secret, phone, last_challenged_at, web_authn_credential, web_authn_aaguid) FROM stdin;
\.


--
-- TOC entry 4371 (class 0 OID 17009)
-- Dependencies: 302
-- Data for Name: oauth_clients; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.oauth_clients (id, client_id, client_secret_hash, registration_type, redirect_uris, grant_types, client_name, client_uri, logo_uri, created_at, updated_at, deleted_at) FROM stdin;
\.


--
-- TOC entry 4370 (class 0 OID 16977)
-- Dependencies: 301
-- Data for Name: one_time_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.one_time_tokens (id, user_id, token_type, token_hash, relates_to, created_at, updated_at) FROM stdin;
\.


--
-- TOC entry 4353 (class 0 OID 16507)
-- Dependencies: 281
-- Data for Name: refresh_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.refresh_tokens (instance_id, id, token, user_id, revoked, created_at, updated_at, parent, session_id) FROM stdin;
\.


--
-- TOC entry 4367 (class 0 OID 16856)
-- Dependencies: 298
-- Data for Name: saml_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_providers (id, sso_provider_id, entity_id, metadata_xml, metadata_url, attribute_mapping, created_at, updated_at, name_id_format) FROM stdin;
\.


--
-- TOC entry 4368 (class 0 OID 16874)
-- Dependencies: 299
-- Data for Name: saml_relay_states; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_relay_states (id, sso_provider_id, request_id, for_email, redirect_to, created_at, updated_at, flow_state_id) FROM stdin;
\.


--
-- TOC entry 4356 (class 0 OID 16533)
-- Dependencies: 284
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.schema_migrations (version) FROM stdin;
20171026211738
20171026211808
20171026211834
20180103212743
20180108183307
20180119214651
20180125194653
00
20210710035447
20210722035447
20210730183235
20210909172000
20210927181326
20211122151130
20211124214934
20211202183645
20220114185221
20220114185340
20220224000811
20220323170000
20220429102000
20220531120530
20220614074223
20220811173540
20221003041349
20221003041400
20221011041400
20221020193600
20221021073300
20221021082433
20221027105023
20221114143122
20221114143410
20221125140132
20221208132122
20221215195500
20221215195800
20221215195900
20230116124310
20230116124412
20230131181311
20230322519590
20230402418590
20230411005111
20230508135423
20230523124323
20230818113222
20230914180801
20231027141322
20231114161723
20231117164230
20240115144230
20240214120130
20240306115329
20240314092811
20240427152123
20240612123726
20240729123726
20240802193726
20240806073726
20241009103726
20250717082212
20250731150234
\.


--
-- TOC entry 4361 (class 0 OID 16755)
-- Dependencies: 292
-- Data for Name: sessions; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sessions (id, user_id, created_at, updated_at, factor_id, aal, not_after, refreshed_at, user_agent, ip, tag) FROM stdin;
\.


--
-- TOC entry 4366 (class 0 OID 16841)
-- Dependencies: 297
-- Data for Name: sso_domains; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_domains (id, sso_provider_id, domain, created_at, updated_at) FROM stdin;
\.


--
-- TOC entry 4365 (class 0 OID 16832)
-- Dependencies: 296
-- Data for Name: sso_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_providers (id, resource_id, created_at, updated_at, disabled) FROM stdin;
\.


--
-- TOC entry 4351 (class 0 OID 16495)
-- Dependencies: 279
-- Data for Name: users; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.users (instance_id, id, aud, role, email, encrypted_password, email_confirmed_at, invited_at, confirmation_token, confirmation_sent_at, recovery_token, recovery_sent_at, email_change_token_new, email_change, email_change_sent_at, last_sign_in_at, raw_app_meta_data, raw_user_meta_data, is_super_admin, created_at, updated_at, phone, phone_confirmed_at, phone_change, phone_change_token, phone_change_sent_at, email_change_token_current, email_change_confirm_status, banned_until, reauthentication_token, reauthentication_sent_at, is_sso_user, deleted_at, is_anonymous) FROM stdin;
00000000-0000-0000-0000-000000000000	615687d6-ca8a-456e-8446-fb12afe77240	authenticated	authenticated	adaridileep@gmail.com	$2a$10$3cH99PEUJ5ORgdXzep7RMOxG/Z1aRoHLnVz.dBQbOhWWoe.DIcUDm	2025-09-20 12:16:34.971987+00	\N		\N		\N			\N	2025-09-21 22:19:44.714282+00	{"provider": "email", "providers": ["email"]}	{"email_verified": true}	\N	2025-09-20 12:16:34.946255+00	2025-09-21 22:19:44.745699+00	\N	\N			\N		0	\N		\N	f	\N	f
\.


--
-- TOC entry 4384 (class 0 OID 17528)
-- Dependencies: 319
-- Data for Name: achievements; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.achievements (id, title, description, date_achieved, certificate_url, order_index, created_at, updated_at) FROM stdin;
940601ee-943c-45f1-b153-e8667fb520d7	Bharat Intern Certification	Received a certificate from Bharat Intern for a virtual Internship program in which I built two websites based on FullStack Development.	2024-01-01	\N	1	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
2e432c51-0655-4ca8-bbed-e054072269bc	Study with US Certification	Study With Us is an initiative from RGUKT students in AP where they offer different programming courses where I completed the C Programming Course.	2022-05-01	\N	2	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
bf840f55-ee19-4868-83a2-6a82bd9f9a1f	DevTown Certification in Web Development Bootcamp	In the bootcamp, I completed the given tasks of building a facebook clone and a netflix clone which gave me great experience of learning web dev.	2022-05-01	\N	3	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
5dabd418-129a-4560-b8a8-5667692be882	Shape AI Certification for Python and Cyber Security	In the workshop, started with python and the flow of teaching ended with cyber security basics, I learnt very good basics from it and they provided me with a certificate after an exam.	2021-06-01	\N	4	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
59cc4f94-5d46-4d38-b6cd-8034d45928e4	District Level Silver Medal in International Mathematics Olympiad	Secured a silver medal in the International Mathematics Olympiad conducted at the district level after School level.	2016-08-01	\N	5	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
\.


--
-- TOC entry 4391 (class 0 OID 20176)
-- Dependencies: 326
-- Data for Name: blog_comments; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.blog_comments (id, blog_post_id, parent_comment_id, user_id, author_name, author_email, content, is_approved, created_at, updated_at) FROM stdin;
41d67ae4-0453-4d11-a574-d1bc8d01e2eb	09fb7043-9161-430f-b580-8748ec4da25a	\N	615687d6-ca8a-456e-8446-fb12afe77240	dilep	\N	hi	t	2025-09-21 18:34:25.473946+00	2025-09-21 18:34:25.473946+00
\.


--
-- TOC entry 4390 (class 0 OID 20152)
-- Dependencies: 325
-- Data for Name: blog_likes; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.blog_likes (id, blog_post_id, user_id, user_ip, created_at) FROM stdin;
\.


--
-- TOC entry 4385 (class 0 OID 17539)
-- Dependencies: 320
-- Data for Name: blog_posts; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.blog_posts (id, title, slug, content, excerpt, image_url, published, tags, order_index, created_at, updated_at, images, external_link) FROM stdin;
325c98bc-eb9f-4eaa-b5bb-14ea62633a53	Advanced React Patterns on Dev.to	advanced-react-patterns-dev-to	External link to my comprehensive guide on advanced React patterns published on Dev.to	Exploring advanced React patterns including compound components, render props, and custom hooks. A deep dive into professional React development techniques.	\N	t	{React,JavaScript,"Frontend Development","Advanced Patterns"}	5	2025-09-21 18:13:16.941288+00	2025-09-21 18:13:16.941288+00	\N	https://dev.to/yourprofile/advanced-react-patterns
bfc76cbb-4b00-4c7d-8d2d-e3944959273e	Building Scalable React Applications: Lessons from Production	building-scalable-react-applications-lessons-from-production	This is a comprehensive guide about React scalability patterns...	After building several large-scale React applications, I've learned valuable lessons about architecture, state management, and performance optimization that I want to share with fellow developers.	\N	t	{React,Architecture,Performance,"Best Practices","Frontend Development"}	1	2025-09-21 18:13:16.941288+00	2025-09-21 18:13:16.941288+00	\N	https://react.dev/learn/thinking-in-react
da8b8105-e380-4aaa-9cc4-d09069fb4cad	My Journey from Computer Science Student to Full-Stack Developer	my-journey-from-computer-science-student-to-full-stack-developer	Looking back at my journey from a computer science student to a full-stack developer, I realize how much the landscape has changed and how much I've grown. This post is for current students and aspiring developers who want to understand what the transition looks like.\n\n## The Academic Foundation\n\nMy B.Tech in Computer Science provided me with crucial fundamentals:\n- Data structures and algorithms\n- Object-oriented programming principles\n- Database design and management\n- Software engineering practices\n- Computer networks and systems\n\nThese weren't just theoretical concepts—they became the building blocks for everything I do today.\n\n## The Gap Between Academia and Industry\n\nHowever, I quickly realized there was a significant gap between what I learned in college and what the industry expected:\n\n### Technical Skills Gap\n- Modern frameworks and libraries weren't covered\n- Cloud technologies were barely mentioned\n- DevOps practices were entirely new\n- API design and microservices architecture\n- Real-world debugging and problem-solving\n\n### Soft Skills Development\n- Code reviews and collaboration\n- Project management and deadlines\n- Client communication\n- Agile methodologies\n\n## Bridging the Gap\n\nHere's how I approached filling these gaps:\n\n### 1. Personal Projects\nI built numerous side projects to experiment with new technologies:\n- A task management app using React and Node.js\n- A real-time chat application with Socket.io\n- A REST API with authentication and authorization\n- A mobile app using React Native\n\n### 2. Open Source Contributions\nContributing to open source projects taught me:\n- How to read and understand large codebases\n- Proper git workflow and collaboration\n- Code quality standards\n- Community interaction\n\n### 3. Continuous Learning\n- Online courses and tutorials\n- Technical blogs and documentation\n- Attending meetups and conferences\n- Following industry leaders on social media\n\n## Key Learnings\n\n### Technical Growth\n- **Start with the basics**: Master HTML, CSS, and JavaScript before jumping to frameworks\n- **Pick a stack and go deep**: Don't try to learn everything at once\n- **Practice consistently**: Build something every day, even if it's small\n- **Learn by doing**: Theory is important, but practical experience is invaluable\n\n### Career Development\n- **Build a portfolio**: Showcase your work with live demos and code repositories\n- **Network actively**: Attend local meetups and online communities\n- **Seek feedback**: Don't be afraid to ask for code reviews and advice\n- **Stay humble**: There's always more to learn\n\n## Current Stack and Interests\n\nToday, I work primarily with:\n- **Frontend**: React, TypeScript, Next.js, Tailwind CSS\n- **Backend**: Node.js, Python, PostgreSQL, MongoDB\n- **DevOps**: Docker, AWS, CI/CD pipelines\n- **Mobile**: React Native, Flutter\n\nI'm particularly interested in:\n- Machine learning applications in web development\n- Serverless architectures\n- Progressive Web Apps\n- Performance optimization\n\n## Advice for Current Students\n\n1. **Don't wait for permission**: Start building projects now\n2. **Focus on problem-solving**: Technology changes, but problem-solving skills are timeless\n3. **Build in public**: Share your learning journey and projects\n4. **Find mentors**: Connect with developers who inspire you\n5. **Embrace failure**: Every bug is a learning opportunity\n\n## Conclusion\n\nThe transition from student to professional developer is challenging but incredibly rewarding. The key is to remain curious, keep building, and never stop learning. The industry evolves rapidly, but with strong fundamentals and a growth mindset, you can adapt to any change.\n\nRemember, everyone's journey is different. Focus on your own path, celebrate small wins, and don't compare yourself to others. The most important step is the first one—so start building today!	Sharing my experiences, challenges, and learnings during my B.Tech in Computer Science and how I transitioned into professional development. A guide for current students and aspiring developers.	\N	t	{Career,Education,"Personal Growth","Computer Science","Student Life"}	2	2025-09-21 18:13:16.941288+00	2025-09-21 18:13:16.941288+00	\N	\N
070f27a4-00b8-4f7a-9909-c98dbc5b57ad	Understanding Machine Learning Algorithms: A Practical Guide	understanding-machine-learning-algorithms-practical-guide	External content - this links to a comprehensive ML guide on Medium.	Deep dive into popular ML algorithms with practical examples and implementation details for computer science students and developers getting started with machine learning.	\N	t	{"Machine Learning",Python,Algorithms,"Data Science",AI}	3	2025-09-21 18:13:16.941288+00	2025-09-21 18:13:16.941288+00	\N	https://medium.com/@yourprofile/machine-learning-guide
09fb7043-9161-430f-b580-8748ec4da25a	Optimizing Database Queries: PostgreSQL Performance Tips	optimizing-database-queries-postgresql-performance-tips	Database performance can make or break your application. After working with PostgreSQL in production environments, I've learned valuable techniques for optimizing queries and improving overall database performance.\n\n## Understanding Query Performance\n\nBefore optimizing, you need to understand how PostgreSQL executes queries and where bottlenecks occur.\n\n### Using EXPLAIN and EXPLAIN ANALYZE\n\nThe most important tools for query optimization:\n\n```sql\n-- See the query plan\nEXPLAIN SELECT * FROM users WHERE email = 'user@example.com';\n\n-- See actual execution statistics\nEXPLAIN ANALYZE SELECT * FROM users WHERE email = 'user@example.com';\n\n-- More detailed analysis\nEXPLAIN (ANALYZE, BUFFERS) SELECT * FROM users WHERE email = 'user@example.com';\n```\n\nKey metrics to watch:\n- **Cost**: PostgreSQL's estimate of query expense\n- **Rows**: Expected vs. actual row counts\n- **Time**: Actual execution time\n- **Buffers**: Memory usage patterns\n\n## Indexing Strategies\n\nProper indexing is crucial for query performance.\n\n### B-tree Indexes (Default)\n```sql\n-- Basic index\nCREATE INDEX idx_users_email ON users(email);\n\n-- Composite index\nCREATE INDEX idx_orders_user_date ON orders(user_id, created_at);\n\n-- Partial index\nCREATE INDEX idx_active_users ON users(email) WHERE active = true;\n```\n\n### Specialized Index Types\n\n**GIN Indexes for JSON and Arrays:**\n```sql\n-- For JSONB columns\nCREATE INDEX idx_user_metadata ON users USING gin(metadata);\n\n-- For array columns\nCREATE INDEX idx_user_tags ON users USING gin(tags);\n```\n\n**GiST Indexes for Full-Text Search:**\n```sql\n-- Create tsvector column\nALTER TABLE articles ADD COLUMN search_vector tsvector;\n\n-- Update the column\nUPDATE articles SET search_vector = to_tsvector('english', title || ' ' || content);\n\n-- Create index\nCREATE INDEX idx_articles_search ON articles USING gin(search_vector);\n```\n\n### Index Maintenance\n```sql\n-- Check index usage\nSELECT schemaname, tablename, indexname, idx_scan, idx_tup_read, idx_tup_fetch\nFROM pg_stat_user_indexes\nORDER BY idx_scan;\n\n-- Find unused indexes\nSELECT schemaname, tablename, indexname\nFROM pg_stat_user_indexes\nWHERE idx_scan = 0;\n\n-- Rebuild index\nREINDEX INDEX idx_users_email;\n```\n\n## Query Optimization Techniques\n\n### 1. Avoid SELECT *\n```sql\n-- Bad\nSELECT * FROM users WHERE active = true;\n\n-- Good\nSELECT id, name, email FROM users WHERE active = true;\n```\n\n### 2. Use Appropriate WHERE Clauses\n```sql\n-- Use indexed columns in WHERE clauses\nSELECT * FROM orders WHERE user_id = 123;\n\n-- Avoid functions in WHERE clauses\n-- Bad\nSELECT * FROM orders WHERE EXTRACT(year FROM created_at) = 2024;\n\n-- Good\nSELECT * FROM orders WHERE created_at >= '2024-01-01' AND created_at < '2025-01-01';\n```\n\n### 3. Optimize JOINs\n```sql\n-- Use proper JOIN syntax\nSELECT u.name, o.total\nFROM users u\nINNER JOIN orders o ON u.id = o.user_id\nWHERE u.active = true;\n\n-- Consider JOIN order for multiple tables\n-- PostgreSQL's query planner usually handles this, but be aware\n```\n\n### 4. Use LIMIT for Large Result Sets\n```sql\n-- Pagination\nSELECT * FROM articles\nORDER BY created_at DESC\nLIMIT 20 OFFSET 40;\n\n-- Better pagination with cursor-based approach\nSELECT * FROM articles\nWHERE created_at < '2024-01-01 12:00:00'\nORDER BY created_at DESC\nLIMIT 20;\n```\n\n## Advanced Optimization Techniques\n\n### 1. Materialized Views\nFor expensive queries that don't need real-time data:\n\n```sql\n-- Create materialized view\nCREATE MATERIALIZED VIEW user_stats AS\nSELECT \n    user_id,\n    COUNT(*) as order_count,\n    SUM(total) as total_spent,\n    AVG(total) as avg_order_value\nFROM orders\nGROUP BY user_id;\n\n-- Refresh when needed\nREFRESH MATERIALIZED VIEW user_stats;\n\n-- Create index on materialized view\nCREATE INDEX idx_user_stats_user_id ON user_stats(user_id);\n```\n\n### 2. Partitioning\nFor very large tables:\n\n```sql\n-- Range partitioning by date\nCREATE TABLE orders (\n    id SERIAL,\n    user_id INTEGER,\n    created_at TIMESTAMP,\n    total DECIMAL\n) PARTITION BY RANGE (created_at);\n\n-- Create partitions\nCREATE TABLE orders_2024_q1 PARTITION OF orders\nFOR VALUES FROM ('2024-01-01') TO ('2024-04-01');\n\nCREATE TABLE orders_2024_q2 PARTITION OF orders\nFOR VALUES FROM ('2024-04-01') TO ('2024-07-01');\n```\n\n### 3. Connection Pooling\nUse connection pooling to reduce connection overhead:\n\n```javascript\n// Using node.js with pg-pool\nconst { Pool } = require('pg');\n\nconst pool = new Pool({\n  user: 'username',\n  host: 'localhost',\n  database: 'mydb',\n  password: 'password',\n  port: 5432,\n  max: 20, // max connections\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 2000,\n});\n```\n\n## Monitoring and Maintenance\n\n### 1. Query Monitoring\n```sql\n-- Enable query logging in postgresql.conf\nlog_statement = 'all'\nlog_min_duration_statement = 1000  -- Log queries taking >1 second\n\n-- Check slow queries\nSELECT query, calls, total_time, mean_time\nFROM pg_stat_statements\nORDER BY total_time DESC\nLIMIT 10;\n```\n\n### 2. Database Statistics\n```sql\n-- Update table statistics\nANALYZE users;\n\n-- Vacuum to reclaim space\nVACUUM ANALYZE users;\n\n-- Auto-vacuum settings (in postgresql.conf)\nautovacuum = on\nautovacuum_vacuum_scale_factor = 0.1\nautovacuum_analyze_scale_factor = 0.05\n```\n\n### 3. Performance Monitoring\n```sql\n-- Check database size\nSELECT pg_size_pretty(pg_database_size('mydb'));\n\n-- Check table sizes\nSELECT \n    schemaname,\n    tablename,\n    pg_size_pretty(pg_total_relation_size(schemaname||'.'||tablename)) as size\nFROM pg_tables\nORDER BY pg_total_relation_size(schemaname||'.'||tablename) DESC;\n\n-- Check index hit ratio\nSELECT \n    schemaname,\n    tablename,\n    indexname,\n    idx_scan,\n    idx_tup_read,\n    idx_tup_fetch\nFROM pg_stat_user_indexes;\n```\n\n## Configuration Tuning\n\nKey PostgreSQL settings for performance:\n\n```\n# Memory settings\nshared_buffers = 256MB              # 25% of RAM\neffective_cache_size = 1GB          # 75% of RAM\nwork_mem = 4MB                      # Per connection\nmaintenance_work_mem = 64MB         # For maintenance operations\n\n# Checkpoint settings\ncheckpoint_completion_target = 0.9\nwal_buffers = 16MB\n\n# Planner settings\nrandom_page_cost = 1.1              # For SSDs\neffective_io_concurrency = 200      # For SSDs\n```\n\n## Best Practices Summary\n\n1. **Index Strategically**: Create indexes for frequently queried columns\n2. **Monitor Regularly**: Use EXPLAIN ANALYZE and pg_stat_statements\n3. **Vacuum Regularly**: Keep statistics up to date\n4. **Avoid N+1 Queries**: Use JOINs or batch queries\n5. **Use Appropriate Data Types**: Choose the smallest sufficient type\n6. **Normalize Wisely**: Balance normalization with query performance\n7. **Test with Real Data**: Performance characteristics change with data size\n\n## Common Anti-Patterns to Avoid\n\n1. **Over-indexing**: Too many indexes slow down writes\n2. **Premature Optimization**: Profile first, optimize second\n3. **Ignoring Query Plans**: Always check execution plans for slow queries\n4. **Missing WHERE Clauses**: Always filter data as early as possible\n5. **Using Functions in WHERE**: Avoid calculations in WHERE clauses\n\n## Conclusion\n\nDatabase optimization is an iterative process. Start with proper indexing, monitor query performance, and optimize based on actual usage patterns. Remember that premature optimization can be counterproductive—measure first, then optimize.	Practical tips and techniques for optimizing database performance in real-world applications. Learn how to identify bottlenecks and improve PostgreSQL query performance.	\N	t	{Database,PostgreSQL,Performance,Backend,SQL}	4	2025-09-21 18:13:16.941288+00	2025-09-21 18:13:16.941288+00	\N	\N
\.


--
-- TOC entry 4388 (class 0 OID 20050)
-- Dependencies: 323
-- Data for Name: contact_messages; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.contact_messages (id, name, email, subject, message, status, created_at, updated_at) FROM stdin;
85b58d5e-ed8e-47d8-ba90-f3cc74855935	Dileepkumar	adaridileep@gmail.com	hi	hello im delhi	replied	2025-09-21 20:30:44.143198+00	2025-09-21 20:37:24.715347+00
ca85d134-0c52-4113-9396-6746ea69e299	dileep	adaridilrp@gmail.com	Task Request: hj	TASK REQUEST DETAILS:\n\nTask: hj\nDescription: hjhj,\nPriority: medium\nCategory: project\nDue Date: 2025-09-22 22:22\nEstimated Duration: 2 hours\nBudget: 600\n\nAdditional Notes:\ngukjyghk\n\n---\nThis is an automated task request submission.	replied	2025-09-21 20:38:39.233153+00	2025-09-21 20:43:30.719379+00
\.


--
-- TOC entry 4389 (class 0 OID 20067)
-- Dependencies: 324
-- Data for Name: courses; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.courses (id, name, description, institution, completion_date, certificate_url, is_favorite, order_index, created_at, updated_at) FROM stdin;
713709f3-6772-4d95-b8ff-b0d4f0afd8c1	Data Structures & Algorithms	Comprehensive course covering fundamental data structures and algorithms	Online Course	2023-12-15	\N	t	1	2025-09-21 17:15:56.146972+00	2025-09-21 17:15:56.146972+00
9936f273-9e46-45a9-915a-13498a875ec7	Web Development	Full-stack web development using modern technologies	Bootcamp	2023-11-20	\N	t	2	2025-09-21 17:15:56.146972+00	2025-09-21 17:15:56.146972+00
71a8e9d6-3f7a-4be3-9737-f5554a7255fe	Machine Learning	Introduction to machine learning concepts and practical applications	University	2024-01-10	\N	t	3	2025-09-21 17:15:56.146972+00	2025-09-21 17:15:56.146972+00
624b1d94-2147-4ce1-b1a5-d7ff975d3727	Database Management Systems	Relational database design and SQL optimization	University	2023-05-15	\N	f	4	2025-09-21 17:15:56.146972+00	2025-09-21 17:15:56.146972+00
a3d9bc5d-8032-425f-a1fa-83583749a466	Software Engineering	Software development lifecycle and best practices	University	2023-12-01	\N	f	5	2025-09-21 17:15:56.146972+00	2025-09-21 17:15:56.146972+00
1bb9e358-a572-4d7f-a386-20d32bbf4958	Computer Networks	Network protocols and distributed systems	University	2023-04-20	\N	f	6	2025-09-21 17:15:56.146972+00	2025-09-21 17:15:56.146972+00
9d325cae-dd8e-492c-b504-93e53ce03435	Operating Systems	System programming and OS internals	University	2023-03-25	\N	f	7	2025-09-21 17:15:56.146972+00	2025-09-21 17:15:56.146972+00
6d080212-cf91-4bcf-83f5-2a1958d354be	Object-Oriented Programming	OOP principles and design patterns	University	2022-12-10	\N	f	8	2025-09-21 17:15:56.146972+00	2025-09-21 17:15:56.146972+00
097bdc7d-d781-4a68-89b5-05cb27ac2fda	Computer Architecture	Hardware-software interface and system design	University	2022-11-15	\N	f	9	2025-09-21 17:15:56.146972+00	2025-09-21 17:15:56.146972+00
2ef3d470-a5bd-4704-9eed-18a37f0d0467	Discrete Mathematics	Mathematical foundations for computer science	University	2022-09-30	\N	f	10	2025-09-21 17:15:56.146972+00	2025-09-21 17:15:56.146972+00
16b5f06f-8c23-4f4b-b823-534f23b613da	Statistics & Probability	Statistical analysis and probability theory	University	2022-08-20	\N	f	11	2025-09-21 17:15:56.146972+00	2025-09-21 17:15:56.146972+00
\.


--
-- TOC entry 4380 (class 0 OID 17482)
-- Dependencies: 315
-- Data for Name: education; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.education (id, degree, institution, duration, gpa, location, description, coursework, order_index, created_at, updated_at) FROM stdin;
68da5845-41cb-42ac-8e6b-61e19f47a541	B.Tech in Computer Science & Engineering	International Institute of Information Technology, Hyderabad	2022 - Present	7.08 CGPA (current)	Hyderabad, Telangana	7th Semester student pursuing Bachelor of Technology in Computer Science	{"Data Structures and Algorithms","Operating Systems and Networks","Introduction to Software Systems","Design and Analysis Software Systems","Algorithm Analysis and Design","Computer Organization and Architecture","Database Management System","Internet of Things","Intro to Information Security","Machine and Data Learning","Computer Graphics","Embeded Systems workshop"}	1	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
09747ad6-d0cb-4358-b513-8dd82fe1a69e	Pre University Course	Rajiv Gandhi University of Knowledge Technology, Srikakulam	2020 - 2022	9.35 CGPA	Srikakulam, Andhra Pradesh	Completed Pre University Course with excellent academic performance	{}	2	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
7374212d-5580-48a6-b8ac-a52d08ce62ab	SSC - Secondary School Certificate	Prasanthi Nikethan M.V.V.S Murthy ENG MED High School, Anakapalli	2008 - 2020	10 CGPA	Anakapalli, Andhra Pradesh	Completed secondary education with perfect grade	{}	3	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
\.


--
-- TOC entry 4381 (class 0 OID 17493)
-- Dependencies: 316
-- Data for Name: experience; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.experience (id, title, company, duration, location, description, technologies, order_index, created_at, updated_at) FROM stdin;
15620847-140e-42e5-a562-39db3b34e586	Web Admin	IT Office IIITH	August 2023 – Present	Hyderabad, Telangana	{"Maintaining and updating university websites under the supervision of the IT Office","Creating & designing new web pages for events and announcements","Ensuring website functionality and user experience optimization","Managing content updates and technical maintenance"}	{HTML,CSS,JavaScript,"Web Development","Content Management"}	3	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
659a4065-6d6b-4837-8977-a01fc8c9bf1e	Software Intern (Virtual Labs)	Virtual Labs Project	January 2024 - April 2024	Remote	{"Collaborated on the development of a VS Code Web Extension for a Virtual Labs Authoring Environment","Used a tech stack that included TypeScript, Webpack, and various APIs","Engaged in continuous meetings with clients, honing ability to interact effectively","Gathered valuable feedback and understood the project process flow comprehensively","Contributed to improving the overall user experience of the Virtual Labs platform"}	{Typescript,Webpack,"VS Code Extensions",JavaScript,APIs}	2	2025-09-19 19:57:05.980085+00	2025-09-21 17:06:50.205658+00
4b96b9f4-f734-4fd8-b251-23f9158139f5	Tech Team Member	Club Council & Student Life Committee (IIIT Hyderabad)	August 2023 – Present	Hyderabad, Telangana	{"Maintaining clubs websites and servers for various student organizations","Adding new features to improve user engagement and experience","Providing technical support for club activities and events","Collaborating with different clubs to meet their technical requirements"}	{"Web Development",Server,"Full-Stack Development","Technical Support"}	4	2025-09-19 19:57:05.980085+00	2025-09-21 17:28:56.844592+00
\.


--
-- TOC entry 4396 (class 0 OID 20864)
-- Dependencies: 331
-- Data for Name: notifications; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.notifications (id, user_id, title, message, type, reference_type, reference_id, scheduled_for, is_read, is_sent, created_at, updated_at) FROM stdin;
66abfeb3-a36e-4533-9832-a11b2231b738	\N	Upcoming Meeting	Project Kickoff Meeting starts in 15 minutes	schedule_reminder	schedule	2f2683f6-6c84-4a90-a23b-8ace9c9d75cb	2025-09-23 09:45:00+00	f	f	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00
fa1cd672-68ae-45ac-a6e6-abc440f4538f	\N	Task Due Soon	Setup Development Environment is due tomorrow	task_due	task	f0fde88f-5d06-485d-8666-05ce8ab121e5	2025-09-23 18:00:00+00	f	f	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00
681f8445-534b-4a34-8ec0-6bdfeffe8a0e	\N	Daily Standup Reminder	Daily Standup starts in 5 minutes	schedule_reminder	schedule	2b4fb6a5-82b8-44d7-bc5b-c7e7066ac220	2025-09-23 08:55:00+00	t	t	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00
9beb5b63-4664-4eb8-a7e9-80ebb7bf0f97	\N	High Priority Task	Complete Project Proposal is marked as high priority and due in 2 days	task_due	task	86125fbe-26d7-4253-b624-edba56fbb53a	2025-09-23 10:00:00+00	f	f	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00
a7384952-0aad-4005-ac02-2bd590c62678	\N	Weekly Planning	Time for weekly planning and review	reminder	general	\N	2025-09-23 16:00:00+00	f	f	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00
\.


--
-- TOC entry 4379 (class 0 OID 17460)
-- Dependencies: 314
-- Data for Name: personal_info; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.personal_info (id, name, title, bio, location, email, phone, website, linkedin, github, instagram, youtube, twitter, avatar_url, created_at, updated_at, medium, codeforces) FROM stdin;
c3ea7009-e329-4f39-b31c-c2a478680818	Dileepkumar Adari	Computer Science Student @ IIITH | GSoC25@Joomla!	A passionate web developer and programmer. My journey revolves around the enchanting world of software engineering, where I thrive on turning ideas into reality through the art of coding. With a keen interest in crafting digital solutions, my focus is on creating seamless and innovative experiences.	Visakhapatnam, Andhra Pradesh	adaridileep@gmail.com	+91 7330701217	https://www.dileepadari.dev	https://www.linkedin.com/in/dileep-kumar-adari-298169252	https://github.com/dileepadari	https://www.instagram.com/dileepadari	https://www.youtube.com/@dileepadari5182/featured	https://twitter.com/Dileepadari1	\N	2025-09-19 19:57:05.980085+00	2025-09-20 19:20:29.367891+00	https://medium.com/@adaridileep/about	https://codeforces.com/profile/adaridileep
\.


--
-- TOC entry 4378 (class 0 OID 17442)
-- Dependencies: 313
-- Data for Name: profiles; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.profiles (id, user_id, email, full_name, avatar_url, is_admin, created_at, updated_at) FROM stdin;
20200f8e-232d-4208-be38-b63926f115d1	615687d6-ca8a-456e-8446-fb12afe77240	adaridileep@gmail.com	adaridileep@gmail.com	\N	t	2025-09-20 12:16:34.943654+00	2025-09-20 12:19:43.192481+00
\.


--
-- TOC entry 4382 (class 0 OID 17504)
-- Dependencies: 317
-- Data for Name: projects; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.projects (id, title, description, technologies, github_url, live_url, image_url, featured, order_index, created_at, updated_at, images, is_private, stars, forks, language, language_color, tags, repository_url, updated_at_display) FROM stdin;
102b8338-3c48-49cd-b060-f83d94204b2b	Blog API	A RESTful API for a blogging platform built with Node.js, Express, and MongoDB. Features include user authentication, CRUD operations for posts, comments system, and admin panel.	{Node.js,Express,MongoDB,JWT,bcrypt,Mongoose}	https://github.com/dileepadari/blog-api	\N	https://images.unsplash.com/photo-1432888622747-4eb9a8efeb07?w=800	f	5	2025-09-20 12:09:22.975921+00	2025-09-20 12:57:25.198845+00	{https://images.unsplash.com/photo-1432888622747-4eb9a8efeb07?w=800}	f	18	4	JavaScript	#f1e05a	{Node.js,Express,MongoDB,JWT,bcrypt,Mongoose}	https://github.com/dileepadari/blog-api	just now
3bd036f7-18f1-4e8f-9bc8-3121b81bf0a7	Expense Tracker	A personal finance management app that helps users track expenses, set budgets, and visualize spending patterns. Built with React Native for cross-platform mobile experience.	{"React Native",TypeScript,SQLite,"React Navigation",Chart.js}	https://github.com/dileepadari/expense-tracker	\N	https://images.unsplash.com/photo-1554224155-6726b3ff858f?w=800	f	7	2025-09-20 12:09:22.975921+00	2025-09-20 12:57:25.198845+00	{https://images.unsplash.com/photo-1554224155-6726b3ff858f?w=800}	f	15	3	Dart	#00B4AB	{"React Native",TypeScript,SQLite,"React Navigation",Chart.js}	https://github.com/dileepadari/expense-tracker	just now
26455ab3-b19b-4ca6-9937-eae7528cd2c6	Recipe Finder	A recipe discovery app that allows users to search for recipes, save favorites, and create meal plans. Integrates with Spoonacular API for extensive recipe database.	{Vue.js,JavaScript,"Spoonacular API",Vuex,Bootstrap}	https://github.com/dileepadari/recipe-finder	https://recipes.dileepadari.dev	https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?w=800	f	8	2025-09-20 12:09:22.975921+00	2025-09-20 12:57:25.198845+00	{https://images.unsplash.com/photo-1556909114-f6e7ad7d3136?w=800}	t	7	2	Vue	#4FC08D	{Vue.js,JavaScript,"Spoonacular API",Vuex,Bootstrap}	https://github.com/dileepadari/recipe-finder	just now
36186ff0-0d30-47e0-a322-8155af3b1e39	Code Snippet Manager	A web application for developers to store, organize, and share code snippets. Features syntax highlighting, search functionality, and collaborative snippet sharing.	{React,Node.js,PostgreSQL,Prism.js,Express,JWT}	https://github.com/dileepadari/snippet-manager	https://snippets.dileepadari.dev	https://images.unsplash.com/photo-1542831371-29b0f74f9713?w=800	f	9	2025-09-20 12:09:22.975921+00	2025-09-20 12:57:25.198845+00	{https://images.unsplash.com/photo-1542831371-29b0f74f9713?w=800}	t	1	0	TypeScript	#3178c6	{React,Node.js,PostgreSQL,Prism.js,Express,JWT}	https://github.com/dileepadari/snippet-manager	just now
2fd71ce4-f6f7-4bf4-82e4-1dcad8b76675	URL Shortener	A simple yet powerful URL shortening service with analytics. Built with Python Flask and Redis for fast redirects and click tracking.	{Python,Flask,Redis,PostgreSQL,HTML,CSS}	https://github.com/dileepadari/url-shortener	https://short.dileepadari.dev	https://images.unsplash.com/photo-1516321318423-f06f85e504b3?w=800	f	10	2025-09-20 12:09:22.975921+00	2025-09-20 12:57:25.198845+00	{https://images.unsplash.com/photo-1516321318423-f06f85e504b3?w=800}	t	5	2	Python	#3572A5	{Python,Flask,Redis,PostgreSQL,HTML,CSS}	https://github.com/dileepadari/url-shortener	just now
d5ff562e-2342-44c9-a2be-6cbe1515c706	Portfolio Website	A modern, responsive portfolio website built with React and TypeScript. Features a clean design, smooth animations, and optimized performance. Includes project showcase, about section, and contact form.	{React,TypeScript,"Framer Motion","Tailwind CSS",Vite}	https://github.com/dileepadari/portfolio	https://dileepadari.dev	https://images.unsplash.com/photo-1467232004584-a241de8bcf5d?w=800	f	4	2025-09-20 12:09:22.975921+00	2025-09-20 12:57:25.198845+00	{https://images.unsplash.com/photo-1467232004584-a241de8bcf5d?w=800}	f	31	5	TypeScript	#3178c6	{React,TypeScript,"Framer Motion","Tailwind CSS",Vite}	https://github.com/dileepadari/portfolio	2 hours ago
9eb09786-ffd6-452d-ac96-5d98dba95a70	Chat Application	Real-time chat application built with Socket.io, React, and Node.js. Features include private messaging, group chats, file sharing, and emoji support with a modern UI.	{React,Socket.io,Node.js,Express,MongoDB,Material-UI}	https://github.com/dileepadari/chat-app	https://chat.dileepadari.dev	https://images.unsplash.com/photo-1577563908411-5077b6dc7624?w=800	f	6	2025-09-20 12:09:22.975921+00	2025-09-20 12:57:25.198845+00	{https://images.unsplash.com/photo-1577563908411-5077b6dc7624?w=800}	f	29	7	JavaScript	#f1e05a	{React,Socket.io,Node.js,Express,MongoDB,Material-UI}	https://github.com/dileepadari/chat-app	2 weeks ago
174a2050-61a5-4e6f-ab01-4478576422a6	Task Management App	A collaborative task management application inspired by Trello. Built with Next.js, TypeScript, and Supabase. Features real-time collaboration, drag & drop functionality, team workspaces, and project analytics.	{Next.js,TypeScript,Supabase,"React DnD","Tailwind CSS","Real-time subscriptions"}	https://github.com/dileepadari/task-manager	https://taskflow.dileepadari.dev	https://images.unsplash.com/photo-1611224923853-80b023f02d71?w=800	t	2	2025-09-20 12:09:22.975921+00	2025-09-20 12:57:25.198845+00	{https://images.unsplash.com/photo-1611224923853-80b023f02d71?w=800,https://images.unsplash.com/photo-1454165804606-c3d57bc86b40?w=800}	f	87	28	JavaScript	#f1e05a	{Next.js,TypeScript,Supabase,"React DnD","Tailwind CSS","Real-time subscriptions"}	https://github.com/dileepadari/task-manager	1 day ago
b775173f-53b7-4324-9474-9139f0e7b63a	Weather Dashboard	A responsive weather dashboard that provides detailed weather information, forecasts, and interactive maps. Built with React and integrates with OpenWeatherMap API for real-time data.	{React,JavaScript,"OpenWeatherMap API",Chart.js,CSS3,"Responsive Design"}	https://github.com/dileepadari/weather-dashboard	https://weather.dileepadari.dev	https://images.unsplash.com/photo-1504608524841-42fe6f032b4b?w=800	t	3	2025-09-20 12:09:22.975921+00	2025-09-20 12:57:25.198845+00	{https://images.unsplash.com/photo-1504608524841-42fe6f032b4b?w=800,https://images.unsplash.com/photo-1592210454359-9043f067919b?w=800}	f	43	13	JavaScript	#f1e05a	{React,JavaScript,"OpenWeatherMap API",Chart.js,CSS3,"Responsive Design"}	https://github.com/dileepadari/weather-dashboard	3 days ago
1d717735-07b3-4946-b55f-ef76b7e284a4	E-Commerce Platform	A full-stack e-commerce platform built with React, Node.js, and PostgreSQL. Features include user authentication, product catalog, shopping cart, payment integration with Stripe, and admin dashboard for inventory management.	{React,Node.js,PostgreSQL,Express,"Stripe API",JWT,"Tailwind CSS"}	https://github.com/dileepadari/ecommerce-platform	https://ecommerce-demo.dileepadari.dev	https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?w=800	f	1	2025-09-20 12:09:22.975921+00	2025-09-21 17:50:51.362533+00	{https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?w=800,https://images.unsplash.com/photo-1563013544-824ae1b704d3?w=800}	f	65	17	JavaScript	#f1e05a	{React,Node.js,PostgreSQL,Express,"Stripe API",JWT,"Tailwind CSS","web development"}	https://github.com/dileepadari/ecommerce-platform	1 week ago
\.


--
-- TOC entry 4397 (class 0 OID 20880)
-- Dependencies: 332
-- Data for Name: quick_actions; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.quick_actions (id, name, type, template_data, icon, color, sort_order, is_active, created_at, updated_at) FROM stdin;
4f280fe4-83d1-4084-b11b-3b369c61c481	Quick Task	task	{"title": "", "category": "general", "priority": "medium"}	plus	#3b82f6	1	t	2025-09-21 20:55:59.669249+00	2025-09-21 20:55:59.669249+00
8aac2666-60ff-4433-86b9-0cd2c81517a2	Meeting	schedule	{"type": "meeting", "title": "", "duration_minutes": 60}	calendar	#10b981	2	t	2025-09-21 20:55:59.669249+00	2025-09-21 20:55:59.669249+00
1ef684a8-bc38-426c-afbb-b2d7eef63da6	Deadline	schedule	{"type": "deadline", "title": "", "duration_minutes": 0}	clock	#f59e0b	3	t	2025-09-21 20:55:59.669249+00	2025-09-21 20:55:59.669249+00
dc684b4e-4656-496a-a35f-a94af3d514c1	Call	schedule	{"type": "call", "title": "", "duration_minutes": 30}	phone	#8b5cf6	4	t	2025-09-21 20:55:59.669249+00	2025-09-21 20:55:59.669249+00
f7006f22-2fd6-4e91-bbbb-e13b61a11344	Quick Task	task	{"title": "", "category": "general", "priority": "medium", "description": "", "estimated_hours": 1.0}	plus	#3b82f6	1	t	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00
73746b14-e81f-492c-a66f-aaba028fbc9e	Urgent Bug Fix	task	{"tags": ["bug", "urgent"], "title": "Bug Fix: ", "category": "work", "priority": "high", "description": "Critical bug that needs immediate attention", "estimated_hours": 2.0}	alert-triangle	#ef4444	2	t	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00
8745f02f-1900-481b-b3fb-31d484ad51cd	Meeting Prep	task	{"tags": ["meeting", "preparation"], "title": "Prepare for ", "category": "work", "priority": "medium", "description": "Preparation tasks for upcoming meeting", "estimated_hours": 0.5}	calendar	#f59e0b	3	t	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00
b0dc8555-d084-4258-a58d-4e63d328dd0d	Learning Session	task	{"tags": ["learning", "development"], "title": "Learn ", "category": "personal", "priority": "low", "description": "Dedicated time for learning new skills", "estimated_hours": 2.0}	book-open	#8b5cf6	4	t	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00
7c3ccf26-11fd-461f-a59c-8e2d1f2b7003	Quick Meeting	schedule	{"type": "meeting", "color": "#3b82f6", "title": "", "category": "meeting", "duration": 30, "description": "", "reminder_minutes": [15]}	users	#3b82f6	5	t	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00
3eb60386-b09c-4090-9706-13452496c3c7	Focus Block	schedule	{"type": "event", "color": "#ef4444", "title": "Deep Work: ", "category": "work", "duration": 120, "description": "Focused work time with no interruptions", "reminder_minutes": [10]}	focus	#ef4444	6	t	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00
6ad7d9c8-9c62-4f34-b41c-098e585d09ad	Coffee Break	schedule	{"type": "event", "color": "#10b981", "title": "Coffee Break", "category": "personal", "duration": 15, "description": "Short break for coffee and relaxation", "reminder_minutes": [5]}	coffee	#10b981	7	t	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00
488c49a4-1f30-4425-8dab-e0ba2920d854	Client Call	schedule	{"type": "call", "color": "#f59e0b", "title": "Client Call: ", "category": "meeting", "duration": 45, "description": "Call with client to discuss project", "reminder_minutes": [30, 60]}	phone	#f59e0b	8	t	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00
\.


--
-- TOC entry 4394 (class 0 OID 20822)
-- Dependencies: 329
-- Data for Name: schedule_templates; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.schedule_templates (id, name, title, description, duration_minutes, type, category, color, reminder_minutes, tags, is_active, created_at, updated_at) FROM stdin;
afba1eb9-9dfb-4efb-9cae-e995ab0064ae	Team Meeting	Team Meeting	Weekly team sync meeting	60	meeting	work	#3b82f6	{15,5}	{team,weekly}	t	2025-09-21 20:55:59.669249+00	2025-09-21 20:55:59.669249+00
1acfbbac-c48d-43e5-bb30-a882f69ed440	1-on-1	1-on-1 Meeting	One-on-one meeting with team member	30	meeting	work	#10b981	{15}	{1on1,personal}	t	2025-09-21 20:55:59.669249+00	2025-09-21 20:55:59.669249+00
083b28e6-1bde-4ce5-a68b-91d2a3d4d7a5	Client Call	Client Call	Client consultation call	45	call	work	#f59e0b	{30,15}	{client,consultation}	t	2025-09-21 20:55:59.669249+00	2025-09-21 20:55:59.669249+00
ee35323c-cdcc-4eb4-abb8-3908a6280059	Workshop	Workshop	Educational workshop or training session	120	event	work	#8b5cf6	{60,30}	{workshop,training}	t	2025-09-21 20:55:59.669249+00	2025-09-21 20:55:59.669249+00
728f2cb7-3967-46f1-a881-a1970c8ccbea	Project Deadline	Project Deadline	Important project milestone deadline	0	deadline	work	#ef4444	{1440,720,60}	{deadline,project}	t	2025-09-21 20:55:59.669249+00	2025-09-21 20:55:59.669249+00
21975359-54b3-4fdd-9ac0-87b1c4de9b71	team-meeting	Team Meeting	Regular team sync meeting	60	meeting	work	#3b82f6	{15,60}	{team,sync,work}	t	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00
0c44f67f-11be-46d1-815e-75cc57c10102	one-on-one	1:1 Meeting	One-on-one meeting with team member	30	meeting	work	#10b981	{15}	{1:1,management,work}	t	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00
9cba9aad-9eee-45dd-beea-45d9fcc04de7	client-call	Client Call	Call with client to discuss project progress	45	call	work	#f59e0b	{30,60}	{client,call,business}	t	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00
60376172-8000-472c-b141-74399a9ef173	lunch-break	Lunch Break	Daily lunch break	60	event	personal	#8b5cf6	{5}	{break,personal,health}	t	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00
4ffbd25e-06e9-4612-a162-60f209410d1b	focus-time	Deep Work Session	Focused work time with no interruptions	120	event	work	#ef4444	{10}	{focus,deep-work,productivity}	t	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00
\.


--
-- TOC entry 4387 (class 0 OID 20033)
-- Dependencies: 322
-- Data for Name: schedules; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.schedules (id, title, description, start_time, end_time, type, status, attendees, location, meeting_url, is_public, created_at, updated_at, category, tags, color, reminder_minutes, notes, task_id, is_recurring, recurrence_rule, recurrence_end_date, parent_event_id, original_start_time) FROM stdin;
fd0668de-d187-4374-b191-2f10bc6b7b81	Client Presentation	Present Q4 roadmap and feature updates to key client	2025-09-26 14:00:00+00	2025-09-26 15:00:00+00	meeting	scheduled	{presenter@company.com,client@clientcompany.com,sales@company.com}	Client Office	https://zoom.us/j/client-presentation	f	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00	meeting	{client,presentation,roadmap}	#f59e0b	{30,60}	Prepare demo environment and backup slides	ef7a12f1-af0f-46ba-bab8-4dd836eea98b	f	\N	\N	\N	\N
bae773b4-d512-437f-a884-91da6e261101	Lunch with Sarah	Catch up lunch with college friend	2025-09-24 12:30:00+00	2025-09-24 13:30:00+00	event	scheduled	{sarah.friend@email.com}	Downtown Cafe	\N	f	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00	personal	{social,lunch,friends}	#10b981	{15}	Try their new seasonal menu	\N	f	\N	\N	\N	\N
a4e2594a-a92b-45ad-a41e-f868d760ab17	Doctor Appointment	Annual physical checkup	2025-09-27 09:00:00+00	2025-09-27 10:00:00+00	event	scheduled	{}	Medical Center	\N	f	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00	personal	{health,doctor,checkup}	#8b5cf6	{60,1440}	Bring insurance card and medication list	\N	f	\N	\N	\N	\N
bbb6d22e-b1ee-499e-b70b-a8b57996f331	Team Workshop	Agile methodology workshop for development team	2025-09-25 13:00:00+00	2025-09-25 17:00:00+00	event	scheduled	{team@company.com,trainer@agilecorp.com}	Training Room B	\N	f	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00	work	{workshop,agile,training}	#ef4444	{30}	Interactive session with external trainer	\N	f	\N	\N	\N	\N
8686f262-e1a3-4bb6-ba0f-0195729cbce8	Weekly Team Lunch	Team building lunch every Friday	2025-09-27 12:00:00+00	2025-09-27 13:00:00+00	event	scheduled	{team@company.com}	Office Cafeteria	\N	f	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00	work	{team,lunch,weekly}	#10b981	{30}	Rotating restaurant selection	\N	t	{"freq": "weekly", "end_date": "2025-12-31", "interval": 1, "days_of_week": [5]}	\N	\N	\N
4bedea3d-dfda-4550-b22c-e761a0d25b1c	Morning Workout	Personal fitness session at gym	2025-09-23 07:00:00+00	2025-09-23 08:00:00+00	event	completed	{}	Local Gym	\N	f	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00	personal	{fitness,workout,morning}	#ef4444	{15}	Focus on strength training today	e829b885-6817-476c-8b9f-e3cf7506351c	t	{"freq": "daily", "end_date": "2025-12-31", "interval": 1}	\N	\N	\N
53c8bb6d-11b4-479f-b8aa-6a6f6ce34c8d	Weekend Hiking	Mountain hiking trip with friends	2025-09-21 08:00:00+00	2025-09-21 16:00:00+00	event	completed	{friend1@email.com,friend2@email.com}	Blue Ridge Mountains	\N	f	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00	personal	{hiking,outdoor,friends}	#10b981	{60}	Great weather, completed 12-mile trail	\N	f	\N	\N	\N	\N
b9facf68-0a85-429b-8b9a-aeaaa0bebb3e	Daily Standup	Daily team standup meeting	2025-09-25 09:00:00+00	2025-09-25 09:15:00+00	meeting	scheduled	{team@company.com}	Virtual	https://meet.company.com/daily-standup	f	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00	meeting	{standup,daily,team}	#3b82f6	{5}	Quick sync on progress and blockers	\N	f	\N	\N	2b4fb6a5-82b8-44d7-bc5b-c7e7066ac220	2025-09-25 09:00:00+00
37c7c3b5-7211-40bf-8fff-d4ae67fa9c3e	Morning Workout	Personal fitness session at gym	2025-09-24 07:00:00+00	2025-09-24 08:00:00+00	event	scheduled	{}	Local Gym	\N	f	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00	personal	{fitness,workout,morning}	#ef4444	{15}	Cardio focus today	\N	f	\N	\N	4bedea3d-dfda-4550-b22c-e761a0d25b1c	2025-09-24 07:00:00+00
b78356e2-fe81-4535-96a3-b3ee26c22b78	Morning Workout	Personal fitness session at gym	2025-09-25 07:00:00+00	2025-09-25 08:00:00+00	event	scheduled	{}	Local Gym	\N	f	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00	personal	{fitness,workout,morning}	#ef4444	{15}	Strength training focus	\N	f	\N	\N	4bedea3d-dfda-4550-b22c-e761a0d25b1c	2025-09-25 07:00:00+00
b1509383-0653-40b7-814a-8bf481962973	Daily Standup	Daily team standup meeting	2025-09-24 09:00:00+00	2025-09-24 09:15:00+00	call	scheduled	{team@company.com}	Virtual	https://meet.company.com/daily-standup	f	2025-09-21 21:33:13.945751+00	2025-09-21 22:15:56.337253+00	meeting	{standup,daily,team}	#3b82f6	{5}	Quick sync on progress and blockers	\N	f	\N	\N	2b4fb6a5-82b8-44d7-bc5b-c7e7066ac220	2025-09-24 09:00:00+00
2f2683f6-6c84-4a90-a23b-8ace9c9d75cb	Project Kickoff Meeting	Initial meeting to discuss new project requirements and timeline	2025-09-23 10:00:00+00	2025-09-23 11:30:00+00	meeting	scheduled	{john.doe@company.com,jane.smith@company.com,pm@company.com}	Conference Room A	https://meet.company.com/project-kickoff	f	2025-09-21 21:33:13.945751+00	2025-09-21 22:16:07.073269+00	appointment	{project,kickoff,planning}	#3b82f6	{15,30}	Bring laptops for technical discussion\n\nMeeting Notes: Need to follow up on action items from last discussion.	\N	f	\N	\N	\N	\N
6ffe9330-913f-442a-9301-6ffa17109b23	Code Review Sessions	Weekly code review with senior developers	2025-09-22 11:01:00+00	2025-09-23 11:01:00+00	meeting	completed	{lead@company.com,senior@company.com}	Development Room	\N	f	2025-09-21 21:33:13.945751+00	2025-09-21 22:14:29.688822+00	meeting	{code-review,development,weekly}	#f59e0b	{15}	Reviewed 8 PRs, identified 3 critical issues	4e3a12ff-92bf-4f45-8aba-ce7c36cc5898	f	\N	\N	\N	\N
2b4fb6a5-82b8-44d7-bc5b-c7e7066ac220	Daily Standup	Daily team standup meeting	2025-09-23 09:00:00+00	2025-09-23 09:15:00+00	meeting	completed	{team@company.com}	Virtual	https://meet.company.com/daily-standup	f	2025-09-21 21:33:13.945751+00	2025-09-21 22:16:14.832417+00	appointment	{standup,daily,team}	#3b82f6	{5}	Quick sync on progress and blockers	a4e82908-12f3-46bc-949e-3696267b8599	t	{"freq": "daily", "end_date": "2025-12-31", "interval": 1}	\N	\N	\N
\.


--
-- TOC entry 4383 (class 0 OID 17516)
-- Dependencies: 318
-- Data for Name: skills; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.skills (id, category, skill_name, proficiency, icon_url, order_index, created_at, updated_at) FROM stdin;
d213d154-768e-441a-aba4-5890a56690f6	Programming Languages	Python	90	\N	1	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
86cbccf5-98c6-4747-b5e0-d347bac79c9b	Programming Languages	JavaScript	85	\N	2	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
aa733c40-0a2e-4596-80af-25e66c3a3ec4	Programming Languages	C	80	\N	3	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
e814afee-f3d4-4c71-85bb-5dcf78c0d8f9	Programming Languages	HTML5	95	\N	4	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
c3d59353-aa48-4359-b8d7-372fb712ed46	Programming Languages	CSS3	90	\N	5	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
41271ba9-700b-44c8-b6d1-c311821b6925	Programming Languages	PHP	75	\N	6	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
7b69acfe-2c66-47d1-8c6f-65dfbc9ad2a3	Frontend Development	React	85	\N	7	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
0f6f73fb-6145-46dc-8b09-8ec9c7bb1518	Frontend Development	Bootstrap	80	\N	8	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
e4b23c56-b8a3-4076-a5a7-11a926441e1f	Backend Development	Flask	75	\N	10	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
a4e295fe-93a2-4169-897a-b2cc85ee2705	Backend Development	APIs	80	\N	11	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
2ff271d9-813b-40e7-997c-4504b7eb3a83	Database	MySQL	80	\N	12	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
b46f49be-55b6-487c-9355-52f93ef63aa4	Database	MongoDB	75	\N	13	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
aa42b8ec-5a63-44df-8647-4c0367b2b19e	Database	SQLite	85	\N	14	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
0c7ef58e-0feb-43a7-a5a5-72d2194332d3	Tools & Technologies	Git	85	\N	15	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
0a550627-d58c-4ca8-82b9-3a7d1d2db8ef	Tools & Technologies	Linux	80	\N	16	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
dcd2814e-6520-4b9e-99b7-49605fb41721	Tools & Technologies	Arduino	70	\N	17	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
b276fa42-2b28-4481-8d86-93097b3766b3	Design	Photoshop	70	\N	19	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
ca837c53-4c17-425a-9556-734fd4a6bb58	Design	Design Thinking	85	\N	20	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
cb8a37d1-9434-4feb-bfe1-4a067474015c	Other	Vim	75	\N	21	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
c848a0b7-13b2-4640-a730-d85ac464d2ef	Other	Moodle	70	\N	22	2025-09-19 19:57:05.980085+00	2025-09-19 19:57:05.980085+00
\.


--
-- TOC entry 4395 (class 0 OID 20841)
-- Dependencies: 330
-- Data for Name: task_dependencies; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.task_dependencies (id, task_id, dependent_task_id, dependency_type, created_at) FROM stdin;
f038d4c2-57c6-4861-87d2-236f37c3cf0d	f0fde88f-5d06-485d-8666-05ce8ab121e5	86125fbe-26d7-4253-b624-edba56fbb53a	blocks	2025-09-21 21:33:13.945751+00
583cc4a8-c51e-4cf9-9268-c4eff75adde7	d3a3915c-0ea0-470a-8fb2-964c6725a9b6	f0fde88f-5d06-485d-8666-05ce8ab121e5	blocks	2025-09-21 21:33:13.945751+00
\.


--
-- TOC entry 4393 (class 0 OID 20790)
-- Dependencies: 328
-- Data for Name: task_templates; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.task_templates (id, name, title, description, category, priority, estimated_hours, tags, is_active, created_at, updated_at) FROM stdin;
08ade564-b6b5-4a30-8e96-8029f987a4cd	Daily Standup	Daily Standup Meeting	Prepare for daily standup - review yesterday's work and plan today	work	medium	0.25	{meeting,daily}	t	2025-09-21 20:55:59.669249+00	2025-09-21 20:55:59.669249+00
0995a4cf-59fb-4b35-b071-394ac93c9f2d	Code Review	Code Review	Review pull request and provide feedback	work	high	1.00	{review,development}	t	2025-09-21 20:55:59.669249+00	2025-09-21 20:55:59.669249+00
e72a0dfc-a8bc-49bc-a2db-0452484a046e	Documentation	Update Documentation	Update project documentation	work	low	2.00	{documentation,writing}	t	2025-09-21 20:55:59.669249+00	2025-09-21 20:55:59.669249+00
d05815e8-0c07-42b1-9be5-30254d6519d6	Bug Fix	Fix Bug	Investigate and fix reported bug	work	high	3.00	{bug,development}	t	2025-09-21 20:55:59.669249+00	2025-09-21 20:55:59.669249+00
140cad72-0e69-454d-8ca7-0d176b50ce7b	Research Task	Research	Research new technology or approach	project	medium	4.00	{research,learning}	t	2025-09-21 20:55:59.669249+00	2025-09-21 20:55:59.669249+00
618f5b08-a0be-4c94-8d3c-4281e2fb60d8	daily-standup	Daily Team Standup	Participate in daily team standup meeting	work	medium	0.50	{meeting,team,agile}	t	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00
47904d40-15e6-4f5a-a0c3-95545e21e881	code-review	Code Review Task	Review pull requests and provide feedback	work	high	1.00	{development,review,code}	t	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00
25623f46-abe3-4ded-a88a-3dc6aa7e82f9	exercise	Daily Exercise	Complete daily workout routine	personal	medium	1.00	{health,fitness,personal}	t	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00
a0fcf923-1709-43a9-9350-622497661743	email-check	Check and Respond to Emails	Process inbox and respond to important emails	work	low	0.50	{communication,admin}	t	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00
72fd0798-8873-40d6-82dd-1107d291b06c	learning	Learning Session	Study new technology or skill	personal	medium	2.00	{learning,development,growth}	t	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00
\.


--
-- TOC entry 4386 (class 0 OID 20011)
-- Dependencies: 321
-- Data for Name: tasks; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.tasks (id, title, description, status, priority, due_date, project_id, order_index, created_at, updated_at, category, tags, estimated_hours, actual_hours, completed_at, assignee_email, notes, is_recurring, recurrence_pattern) FROM stdin;
a0af1070-0b4e-4875-9ef7-62ee21d82645	Plan Weekend Trip	Research and book accommodation for weekend getaway	todo	low	2025-09-28 00:00:00+00	\N	4	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00	personal	{travel,weekend,planning}	2.00	\N	\N	\N	Consider mountain cabin or beach house options	f	\N
3a45cb1b-3ba5-4160-a722-b2b8d9e1bfcb	Setup CI/CD Pipeline	Configure automated testing and deployment pipeline	completed	high	2025-09-20 00:00:00+00	\N	10	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00	work	{devops,automation,pipeline}	12.00	14.50	2025-09-20 17:45:00+00	devops@company.com	Took longer due to Docker configuration issues, but working well now	f	\N
86125fbe-26d7-4253-b624-edba56fbb53a	Complete Project Proposal	Write and finalize the Q4 project proposal document	in-progress	high	2025-09-25 00:00:00+00	d5ff562e-2342-44c9-a2be-6cbe1515c706	1	2025-09-21 21:33:13.945751+00	2025-09-21 21:33:13.945751+00	work	{proposal,documentation,Q4}	8.00	3.50	\N	john.doe@company.com	Started outline, need to add budget section\n\nProgress Update (2025-09-21): Making good progress on implementation phase.	f	\N
4e3a12ff-92bf-4f45-8aba-ce7c36cc5898	Weekly Code Review	Review team code submissions for the week	todo	low	2025-09-27 00:00:00+00	\N	8	2025-09-21 21:33:13.945751+00	2025-09-21 21:37:06.021753+00	work	{code-review,weekly,team}	2.00	\N	\N	lead@company.com	Focus on new API endpoints and security fixes	t	{"freq": "weekly", "end_date": "2025-12-31", "interval": 1, "days_of_week": [5]}
e829b885-6817-476c-8b9f-e3cf7506351c	Daily Exercise	Complete 30-minute workout routine	completed	low	2025-09-23 00:00:00+00	\N	6	2025-09-21 21:33:13.945751+00	2025-09-21 22:02:41.490021+00	personal	{health,fitness,daily}	0.50	0.50	2025-09-22 14:30:00+00	\N	Today did cardio and strength training	t	{"freq": "daily", "end_date": "2025-12-31", "interval": 1}
467348ca-1470-4eb5-8843-77ce61919c8b	Monthly Budget Review	Review and update personal monthly budget	todo	medium	2025-09-22 00:00:00+00	\N	9	2025-09-21 21:33:13.945751+00	2025-09-21 22:04:54.74767+00	personal	{budget,finance,monthly}	1.00	\N	\N	\N	Include new subscription costs and salary changes	t	{"freq": "monthly", "end_date": "2025-12-31", "interval": 1}
6cdf0e60-7b1f-43de-a052-508ddbc7a091	Dentist Appointment	Regular dental checkup and cleaning	completed	medium	2025-09-18 00:00:00+00	\N	11	2025-09-21 21:33:13.945751+00	2025-09-21 22:05:40.670422+00	personal	{health,appointment,dental}	1.50	1.50	2025-09-18 11:00:00+00	\N	All good, next appointment in 6 months	f	\N
a4e82908-12f3-46bc-949e-3696267b8599	Team Standup Preparation	Prepare updates for daily standup meeting	completed	medium	2025-09-22 00:00:00+00	\N	7	2025-09-21 21:33:13.945751+00	2025-09-21 22:12:47.935122+00	work	{standup,team,daily}	0.25	0.25	2025-09-22 09:15:00+00	\N	Prepared yesterday progress and today goals	t	{"freq": "daily", "end_date": "2025-12-31", "interval": 1}
f0fde88f-5d06-485d-8666-05ce8ab121e5	Setup Development Environment	Configure local development environment for new project	todo	medium	2025-09-24 00:00:00+00	d5ff562e-2342-44c9-a2be-6cbe1515c706	2	2025-09-21 21:33:13.945751+00	2025-09-21 22:13:09.747864+00	work	{setup,development,environment}	4.00	\N	\N	jane.smith@company.com	Includes Docker, database setup, and IDE configuration	f	\N
ef7a12f1-af0f-46ba-bab8-4dd836eea98b	Prepare Presentation	Create slides for next week client presentation	in-progress	high	2025-09-26 00:00:00+00	d5ff562e-2342-44c9-a2be-6cbe1515c706	5	2025-09-21 21:33:13.945751+00	2025-09-21 22:14:35.041539+00	work	{presentation,client,slides}	5.00	2.00	\N	presenter@company.com	Include demo section and Q4 roadmap	f	\N
d3a3915c-0ea0-470a-8fb2-964c6725a9b6	Review Security Policies	Annual review of company security policies and procedures	todo	high	2025-09-30 00:00:00+00	\N	3	2025-09-21 21:33:13.945751+00	2025-09-21 22:14:42.170284+00	work	{security,policies,compliance}	6.00	\N	\N	security@company.com	Focus on remote work guidelines and data protection	f	\N
\.


--
-- TOC entry 4392 (class 0 OID 20302)
-- Dependencies: 327
-- Data for Name: timeline_events; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.timeline_events (id, type, title, description, date, repository, language, language_color, tags, link, impact, metadata, order_index, created_at, updated_at) FROM stdin;
288f97e7-72ad-4b33-9858-7380fd083d3f	project	Launched E-Commerce Platform	Built and deployed a full-stack e-commerce solution with payment integration and admin dashboard	2024-01-15	\N	\N	\N	{React,Node.js,MongoDB,Stripe}	\N	\N	\N	2	2025-09-21 18:55:31.227318+00	2025-09-21 18:55:31.227318+00
e3f1ef2d-71d6-4224-a24f-d59ea9130136	contribution	Open Source Contribution to React Router	Fixed critical bug in route matching algorithm, merged PR with 2.5K+ stars	2024-01-10	\N	\N	\N	{TypeScript,React,"Open Source"}	\N	\N	\N	3	2025-09-21 18:55:31.227318+00	2025-09-21 18:55:31.227318+00
44df0a9a-1718-4b97-91fe-8fd8a3d93a58	education	Started Data Structures & Algorithms Course	Began advanced DSA course focusing on competitive programming and interview preparation	2024-01-05	\N	\N	\N	{Algorithms,"Computer Science","Problem Solving"}	\N	\N	\N	4	2025-09-21 18:55:31.227318+00	2025-09-21 18:55:31.227318+00
52894531-86cd-49c6-a9dc-acd9343c3853	work	Frontend Developer Internship	Started internship at TechCorp, working on React-based dashboard applications	2023-12-01	\N	\N	\N	{React,TypeScript,"Professional Experience"}	\N	3 month internship	\N	5	2025-09-21 18:55:31.227318+00	2025-09-21 18:55:31.227318+00
f6730fb3-3b09-4606-ba7d-16cb02130ee0	achievement	Dean's List Recognition	Achieved Dean's List for academic excellence in Computer Science program	2023-11-15	\N	\N	\N	{"Academic Achievement","Computer Science"}	\N	Top 5% of class	\N	7	2025-09-21 18:55:31.227318+00	2025-09-21 18:55:31.227318+00
47ab35de-51c8-417d-8560-a78de8df6e31	project	Real-time Chat Application	Built WebSocket-based chat app with rooms, direct messaging, and file sharing	2023-11-01	\N	\N	\N	{Socket.io,React,Node.js,Real-time}	\N	\N	\N	8	2025-09-21 18:55:31.227318+00	2025-09-21 18:55:31.227318+00
9352c454-ad1b-465b-acf5-c91120e994cc	education	Completed Web Development Bootcamp	Intensive 12-week bootcamp covering full-stack development with modern technologies	2023-10-15	\N	\N	\N	{Full-Stack,"Web Development",Bootcamp}	\N	300+ hours	\N	9	2025-09-21 18:55:31.227318+00	2025-09-21 18:55:31.227318+00
39e4bcb7-082d-48c2-8f5f-01b4ae4a7163	contribution	Documentation improvements for Vue.js	Contributed to Vue.js documentation with code examples and tutorials	2023-09-20	\N	\N	\N	{Vue.js,Documentation,"Open Source"}	\N	\N	\N	10	2025-09-21 18:55:31.227318+00	2025-09-21 18:55:31.227318+00
61ec83e4-ff38-4923-af79-ec831651eb3d	achievement	Won University Hackathon	First place in the annual university hackathon with an AI-powered student learning assistant	2024-01-20	\N	\N	\N	{AI,React,Python,OpenAI}	\N	500+ participants	\N	1	2025-09-21 18:55:31.227318+00	2025-09-21 19:44:29.420129+00
6f89e90c-95d6-49c0-a3f7-d203f0482eb1	commit	Fixed authentication bug in login system	Resolved issue where users could not log in with certain email formats	2025-09-22	\N	\N	\N	{"Bug Fix",Authentication,TypeScript}	\N	\N	\N	100	2025-09-21 22:28:51.770597+00	2025-09-21 22:28:51.770597+00
9dbe52c3-75ca-492f-b116-1e40108473a1	commit	Added dark mode toggle to navigation	Implemented system-wide dark mode with proper theme persistence	2025-09-21	\N	\N	\N	{UI/UX,React,CSS}	\N	\N	\N	101	2025-09-21 22:28:51.770597+00	2025-09-21 22:28:51.770597+00
9845595e-e001-4208-9cb2-27789df9cd6b	commit	Optimized database queries in dashboard	Reduced load times by 40% through query optimization and indexing	2025-09-20	\N	\N	\N	{Performance,Database,Optimization}	\N	\N	\N	102	2025-09-21 22:28:51.770597+00	2025-09-21 22:28:51.770597+00
c6b892c5-50ae-4df3-bcc9-db8bedaab96b	contribution	Contributed to React Query library	Fixed memory leak in cache invalidation mechanism	2025-09-19	\N	\N	\N	{"Open Source","React Query",TypeScript}	\N	\N	\N	103	2025-09-21 22:28:51.770597+00	2025-09-21 22:28:51.770597+00
ac2cf826-f810-4f76-ab7b-42efb472dc0b	commit	Implemented real-time notifications	Added WebSocket-based notification system with toast messages	2025-09-18	\N	\N	\N	{WebSocket,Real-time,Notifications}	\N	\N	\N	104	2025-09-21 22:28:51.770597+00	2025-09-21 22:28:51.770597+00
9f936b22-55e8-488a-baf4-fac04bffdd6c	project	Launched Portfolio Showcase Platform	Built and deployed the git-folio-showcase platform with full admin capabilities	2025-09-17	\N	\N	\N	{React,TypeScript,Supabase,Portfolio}	\N	\N	\N	105	2025-09-21 22:28:51.770597+00	2025-09-21 22:28:51.770597+00
cea5b564-74fc-49b9-990f-c65480e1c049	achievement	Completed Advanced React Course	Finished comprehensive React course covering hooks, context, and performance optimization	2025-09-16	\N	\N	\N	{Education,React,JavaScript}	\N	40 hours course	\N	106	2025-09-21 22:28:51.770597+00	2025-09-21 22:28:51.770597+00
8e25412c-32fe-47ed-b6c3-b81d75135fac	commit	Added timeline functionality	Implemented GitHub-style timeline with events and activity overview	2025-09-15	\N	\N	\N	{Timeline,UI/UX,React}	\N	\N	\N	107	2025-09-21 22:28:51.770597+00	2025-09-21 22:28:51.770597+00
c6f60bf9-1819-4933-b74b-da241a7a95b2	contribution	Updated Tailwind CSS documentation	Added examples and improved clarity in utility classes documentation	2025-09-14	\N	\N	\N	{Documentation,"Tailwind CSS","Open Source"}	\N	\N	\N	108	2025-09-21 22:28:51.770597+00	2025-09-21 22:28:51.770597+00
7703b8d4-92a8-4252-9664-7be1fa4518ff	commit	Enhanced task management system	Added recurring tasks, templates, and improved filtering capabilities	2025-09-13	\N	\N	\N	{"Task Management",React,Database}	\N	\N	\N	109	2025-09-21 22:28:51.770597+00	2025-09-21 22:28:51.770597+00
75dc73fd-ee81-44f8-a064-f3f559123ab0	project	Built API Rate Limiting Middleware	Created reusable middleware for API rate limiting with Redis caching	2025-09-12	\N	\N	\N	{API,Node.js,Redis,Middleware}	\N	\N	\N	110	2025-09-21 22:28:51.770597+00	2025-09-21 22:28:51.770597+00
0220b1df-08d1-4d92-87ce-808cd4568c94	commit	Improved error handling across application	Added comprehensive error boundaries and user-friendly error messages	2025-09-11	\N	\N	\N	{"Error Handling",React,"User Experience"}	\N	\N	\N	111	2025-09-21 22:28:51.770597+00	2025-09-21 22:28:51.770597+00
ae04fea7-1674-4283-ae05-f4a3950b7237	achievement	Published npm package for date utilities	Created and published utility library for date formatting and manipulation	2025-09-10	\N	\N	\N	{npm,JavaScript,"Open Source",Publishing}	\N	100+ weekly downloads	\N	112	2025-09-21 22:28:51.770597+00	2025-09-21 22:28:51.770597+00
e2701955-09a0-4295-9768-9fc5e6f920cd	commit	Added comprehensive unit tests	Achieved 95% test coverage for core application components	2025-09-09	\N	\N	\N	{Testing,Jest,"React Testing Library"}	\N	\N	\N	113	2025-09-21 22:28:51.770597+00	2025-09-21 22:28:51.770597+00
2f4a628d-5194-408f-a98c-3136392922f1	contribution	Fixed critical bug in Vue.js router	Resolved navigation issue affecting mobile users in Vue Router	2025-09-08	\N	\N	\N	{Vue.js,Mobile,"Bug Fix","Open Source"}	\N	\N	\N	114	2025-09-21 22:28:51.770597+00	2025-09-21 22:28:51.770597+00
aee023c5-f992-40e0-93c7-dea659ed0ca5	commit	Implemented advanced search functionality	Added full-text search with filters and sorting capabilities	2025-08-30	\N	\N	\N	{Search,Database,React}	\N	\N	\N	115	2025-09-21 22:28:51.770597+00	2025-09-21 22:28:51.770597+00
95ae1edf-108b-46a4-b0b3-35cc2715a04b	project	Created Developer Tools Chrome Extension	Built Chrome extension for debugging React applications	2025-08-25	\N	\N	\N	{"Chrome Extension",JavaScript,"Developer Tools"}	\N	\N	\N	116	2025-09-21 22:28:51.770597+00	2025-09-21 22:28:51.770597+00
48e3c6ce-db6b-452c-8a9b-9f45fd0f15ea	achievement	Spoke at Local Tech Meetup	Presented on modern React patterns and performance optimization	2025-08-20	\N	\N	\N	{Speaking,Community,React,Meetup}	\N	50+ attendees	\N	117	2025-09-21 22:28:51.770597+00	2025-09-21 22:28:51.770597+00
914f6d95-1675-4eab-a626-3e36bcadda2a	commit	Added internationalization support	Implemented i18n with support for 5 languages	2025-08-15	\N	\N	\N	{i18n,Internationalization,React}	\N	\N	\N	118	2025-09-21 22:28:51.770597+00	2025-09-21 22:28:51.770597+00
bdc4b39b-fd2f-4284-8e07-16d4ed2ef41c	contribution	Improved accessibility in Material-UI	Enhanced keyboard navigation and screen reader support	2025-08-10	\N	\N	\N	{Accessibility,Material-UI,"Open Source"}	\N	\N	\N	119	2025-09-21 22:28:51.770597+00	2025-09-21 22:28:51.770597+00
c06fa855-1f10-4c39-83f7-729b9b77ec9a	commit	Optimized bundle size with code splitting	Reduced initial bundle size by 60% using dynamic imports	2025-07-28	\N	\N	\N	{Performance,Webpack,"Code Splitting"}	\N	\N	\N	120	2025-09-21 22:28:51.770597+00	2025-09-21 22:28:51.770597+00
28cc4295-afaf-40d1-ac63-468acc74a39f	project	Built Real-time Collaboration Tool	Created collaborative document editor with real-time sync	2025-07-20	\N	\N	\N	{Collaboration,WebSocket,Real-time,React}	\N	\N	\N	121	2025-09-21 22:28:51.770597+00	2025-09-21 22:28:51.770597+00
3d77cbf1-805f-445e-b96e-1d37314b6613	achievement	Mentored Junior Developer	Successfully onboarded and mentored new team member	2025-07-15	\N	\N	\N	{Mentoring,Leadership,"Team Building"}	\N	3 month program	\N	122	2025-09-21 22:28:51.770597+00	2025-09-21 22:28:51.770597+00
937aae40-ffcd-4418-a362-0b41e8a4eb30	commit	Implemented progressive web app features	Added service worker and offline functionality	2025-07-10	\N	\N	\N	{PWA,"Service Worker",Offline}	\N	\N	\N	123	2025-09-21 22:28:51.770597+00	2025-09-21 22:28:51.770597+00
\.


--
-- TOC entry 4372 (class 0 OID 17025)
-- Dependencies: 303
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.schema_migrations (version, inserted_at) FROM stdin;
20211116024918	2025-09-19 19:53:20
20211116045059	2025-09-19 19:53:21
20211116050929	2025-09-19 19:53:22
20211116051442	2025-09-19 19:53:23
20211116212300	2025-09-19 19:53:23
20211116213355	2025-09-19 19:53:24
20211116213934	2025-09-19 19:53:25
20211116214523	2025-09-19 19:53:26
20211122062447	2025-09-19 19:53:26
20211124070109	2025-09-19 19:53:27
20211202204204	2025-09-19 19:53:28
20211202204605	2025-09-19 19:53:29
20211210212804	2025-09-19 19:53:32
20211228014915	2025-09-19 19:53:33
20220107221237	2025-09-19 19:53:34
20220228202821	2025-09-19 19:53:34
20220312004840	2025-09-19 19:53:35
20220603231003	2025-09-19 19:53:36
20220603232444	2025-09-19 19:53:37
20220615214548	2025-09-19 19:53:37
20220712093339	2025-09-19 19:53:38
20220908172859	2025-09-19 19:53:39
20220916233421	2025-09-19 19:53:39
20230119133233	2025-09-19 19:53:40
20230128025114	2025-09-19 19:53:41
20230128025212	2025-09-19 19:53:41
20230227211149	2025-09-19 19:53:42
20230228184745	2025-09-19 19:53:43
20230308225145	2025-09-19 19:53:43
20230328144023	2025-09-19 19:53:44
20231018144023	2025-09-19 19:53:45
20231204144023	2025-09-19 19:53:46
20231204144024	2025-09-19 19:53:47
20231204144025	2025-09-19 19:53:48
20240108234812	2025-09-19 19:53:49
20240109165339	2025-09-19 19:53:49
20240227174441	2025-09-19 19:53:51
20240311171622	2025-09-19 19:53:52
20240321100241	2025-09-19 19:53:53
20240401105812	2025-09-19 19:53:55
20240418121054	2025-09-19 19:53:56
20240523004032	2025-09-19 19:53:58
20240618124746	2025-09-19 19:53:59
20240801235015	2025-09-19 19:53:59
20240805133720	2025-09-19 19:54:00
20240827160934	2025-09-19 19:54:00
20240919163303	2025-09-19 19:54:01
20240919163305	2025-09-19 19:54:02
20241019105805	2025-09-19 19:54:02
20241030150047	2025-09-19 19:54:05
20241108114728	2025-09-19 19:54:06
20241121104152	2025-09-19 19:54:06
20241130184212	2025-09-19 19:54:07
20241220035512	2025-09-19 19:54:08
20241220123912	2025-09-19 19:54:08
20241224161212	2025-09-19 19:54:09
20250107150512	2025-09-19 19:54:09
20250110162412	2025-09-19 19:54:10
20250123174212	2025-09-19 19:54:11
20250128220012	2025-09-19 19:54:11
20250506224012	2025-09-19 19:54:12
20250523164012	2025-09-19 19:54:12
20250714121412	2025-09-19 19:54:13
\.


--
-- TOC entry 4376 (class 0 OID 17131)
-- Dependencies: 308
-- Data for Name: subscription; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.subscription (id, subscription_id, entity, filters, claims, created_at) FROM stdin;
\.


--
-- TOC entry 4357 (class 0 OID 16546)
-- Dependencies: 285
-- Data for Name: buckets; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.buckets (id, name, owner, created_at, updated_at, public, avif_autodetection, file_size_limit, allowed_mime_types, owner_id, type) FROM stdin;
\.


--
-- TOC entry 4399 (class 0 OID 22154)
-- Dependencies: 334
-- Data for Name: buckets_analytics; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.buckets_analytics (id, type, format, created_at, updated_at) FROM stdin;
\.


--
-- TOC entry 4359 (class 0 OID 16588)
-- Dependencies: 287
-- Data for Name: migrations; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.migrations (id, name, hash, executed_at) FROM stdin;
0	create-migrations-table	e18db593bcde2aca2a408c4d1100f6abba2195df	2025-09-19 19:53:20.050107
1	initialmigration	6ab16121fbaa08bbd11b712d05f358f9b555d777	2025-09-19 19:53:20.056528
2	storage-schema	5c7968fd083fcea04050c1b7f6253c9771b99011	2025-09-19 19:53:20.061475
3	pathtoken-column	2cb1b0004b817b29d5b0a971af16bafeede4b70d	2025-09-19 19:53:20.126184
4	add-migrations-rls	427c5b63fe1c5937495d9c635c263ee7a5905058	2025-09-19 19:53:20.323656
5	add-size-functions	79e081a1455b63666c1294a440f8ad4b1e6a7f84	2025-09-19 19:53:20.329211
6	change-column-name-in-get-size	f93f62afdf6613ee5e7e815b30d02dc990201044	2025-09-19 19:53:20.33808
7	add-rls-to-buckets	e7e7f86adbc51049f341dfe8d30256c1abca17aa	2025-09-19 19:53:20.343729
8	add-public-to-buckets	fd670db39ed65f9d08b01db09d6202503ca2bab3	2025-09-19 19:53:20.348819
9	fix-search-function	3a0af29f42e35a4d101c259ed955b67e1bee6825	2025-09-19 19:53:20.354159
10	search-files-search-function	68dc14822daad0ffac3746a502234f486182ef6e	2025-09-19 19:53:20.362152
11	add-trigger-to-auto-update-updated_at-column	7425bdb14366d1739fa8a18c83100636d74dcaa2	2025-09-19 19:53:20.367779
12	add-automatic-avif-detection-flag	8e92e1266eb29518b6a4c5313ab8f29dd0d08df9	2025-09-19 19:53:20.383685
13	add-bucket-custom-limits	cce962054138135cd9a8c4bcd531598684b25e7d	2025-09-19 19:53:20.389227
14	use-bytes-for-max-size	941c41b346f9802b411f06f30e972ad4744dad27	2025-09-19 19:53:20.394662
15	add-can-insert-object-function	934146bc38ead475f4ef4b555c524ee5d66799e5	2025-09-19 19:53:20.42012
16	add-version	76debf38d3fd07dcfc747ca49096457d95b1221b	2025-09-19 19:53:20.438358
17	drop-owner-foreign-key	f1cbb288f1b7a4c1eb8c38504b80ae2a0153d101	2025-09-19 19:53:20.443427
18	add_owner_id_column_deprecate_owner	e7a511b379110b08e2f214be852c35414749fe66	2025-09-19 19:53:20.449186
19	alter-default-value-objects-id	02e5e22a78626187e00d173dc45f58fa66a4f043	2025-09-19 19:53:20.457184
20	list-objects-with-delimiter	cd694ae708e51ba82bf012bba00caf4f3b6393b7	2025-09-19 19:53:20.462531
21	s3-multipart-uploads	8c804d4a566c40cd1e4cc5b3725a664a9303657f	2025-09-19 19:53:20.473592
22	s3-multipart-uploads-big-ints	9737dc258d2397953c9953d9b86920b8be0cdb73	2025-09-19 19:53:20.495713
23	optimize-search-function	9d7e604cddc4b56a5422dc68c9313f4a1b6f132c	2025-09-19 19:53:20.513204
24	operation-function	8312e37c2bf9e76bbe841aa5fda889206d2bf8aa	2025-09-19 19:53:20.518516
25	custom-metadata	d974c6057c3db1c1f847afa0e291e6165693b990	2025-09-19 19:53:20.52766
26	objects-prefixes	ef3f7871121cdc47a65308e6702519e853422ae2	2025-09-23 03:44:25.341866
27	search-v2	33b8f2a7ae53105f028e13e9fcda9dc4f356b4a2	2025-09-23 03:44:25.476397
28	object-bucket-name-sorting	ba85ec41b62c6a30a3f136788227ee47f311c436	2025-09-23 03:44:25.488447
29	create-prefixes	a7b1a22c0dc3ab630e3055bfec7ce7d2045c5b7b	2025-09-23 03:44:25.497855
30	update-object-levels	6c6f6cc9430d570f26284a24cf7b210599032db7	2025-09-23 03:44:25.502706
31	objects-level-index	33f1fef7ec7fea08bb892222f4f0f5d79bab5eb8	2025-09-23 03:44:25.510526
32	backward-compatible-index-on-objects	2d51eeb437a96868b36fcdfb1ddefdf13bef1647	2025-09-23 03:44:25.518432
33	backward-compatible-index-on-prefixes	fe473390e1b8c407434c0e470655945b110507bf	2025-09-23 03:44:25.525661
34	optimize-search-function-v1	82b0e469a00e8ebce495e29bfa70a0797f7ebd2c	2025-09-23 03:44:25.528559
35	add-insert-trigger-prefixes	63bb9fd05deb3dc5e9fa66c83e82b152f0caf589	2025-09-23 03:44:25.536597
36	optimise-existing-functions	81cf92eb0c36612865a18016a38496c530443899	2025-09-23 03:44:25.541058
37	add-bucket-name-length-trigger	3944135b4e3e8b22d6d4cbb568fe3b0b51df15c1	2025-09-23 03:44:25.557886
38	iceberg-catalog-flag-on-buckets	19a8bd89d5dfa69af7f222a46c726b7c41e462c5	2025-09-23 03:44:25.567235
\.


--
-- TOC entry 4358 (class 0 OID 16561)
-- Dependencies: 286
-- Data for Name: objects; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.objects (id, bucket_id, name, owner, created_at, updated_at, last_accessed_at, metadata, version, owner_id, user_metadata, level) FROM stdin;
\.


--
-- TOC entry 4398 (class 0 OID 22110)
-- Dependencies: 333
-- Data for Name: prefixes; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.prefixes (bucket_id, name, created_at, updated_at) FROM stdin;
\.


--
-- TOC entry 4373 (class 0 OID 17062)
-- Dependencies: 304
-- Data for Name: s3_multipart_uploads; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads (id, in_progress_size, upload_signature, bucket_id, key, version, owner_id, created_at, user_metadata) FROM stdin;
\.


--
-- TOC entry 4374 (class 0 OID 17076)
-- Dependencies: 305
-- Data for Name: s3_multipart_uploads_parts; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads_parts (id, upload_id, size, part_number, bucket_id, key, etag, owner_id, version, created_at) FROM stdin;
\.


--
-- TOC entry 4377 (class 0 OID 17293)
-- Dependencies: 312
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: supabase_migrations; Owner: postgres
--

COPY supabase_migrations.schema_migrations (version, statements, name, created_by, idempotency_key) FROM stdin;
20250919075705	{"-- Create profiles table for user authentication\nCREATE TABLE public.profiles (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  user_id UUID NOT NULL UNIQUE REFERENCES auth.users(id) ON DELETE CASCADE,\n  email TEXT,\n  full_name TEXT,\n  avatar_url TEXT,\n  is_admin BOOLEAN DEFAULT FALSE,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n\n-- Create portfolio data tables\nCREATE TABLE public.personal_info (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  name TEXT NOT NULL DEFAULT 'Dileep Adari',\n  title TEXT NOT NULL DEFAULT 'Computer Science Student & Full-Stack Developer',\n  bio TEXT NOT NULL DEFAULT 'A passionate web developer and programmer. My journey revolves around the enchanting world of software engineering, where I thrive on turning ideas into reality through the art of coding.',\n  location TEXT DEFAULT 'Visakhapatnam, Andhra Pradesh',\n  email TEXT DEFAULT 'rs200302@rguktsklm.ac.in',\n  phone TEXT DEFAULT '+91 7330701217',\n  website TEXT DEFAULT 'dileepadari.dev',\n  linkedin TEXT DEFAULT 'https://www.linkedin.com/in/dileep-kumar-adari-298169252',\n  github TEXT DEFAULT 'https://github.com/dileepadari',\n  instagram TEXT DEFAULT 'https://www.instagram.com/dileepadari',\n  youtube TEXT DEFAULT 'https://www.youtube.com/@dileepadari5182/featured',\n  twitter TEXT DEFAULT 'https://twitter.com/Dileepadari1',\n  avatar_url TEXT,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n\nCREATE TABLE public.education (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  degree TEXT NOT NULL,\n  institution TEXT NOT NULL,\n  duration TEXT NOT NULL,\n  gpa TEXT,\n  location TEXT,\n  description TEXT,\n  coursework TEXT[],\n  order_index INTEGER DEFAULT 0,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n\nCREATE TABLE public.experience (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  title TEXT NOT NULL,\n  company TEXT NOT NULL,\n  duration TEXT NOT NULL,\n  location TEXT,\n  description TEXT[],\n  technologies TEXT[],\n  order_index INTEGER DEFAULT 0,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n\nCREATE TABLE public.projects (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  title TEXT NOT NULL,\n  description TEXT NOT NULL,\n  technologies TEXT[],\n  github_url TEXT,\n  live_url TEXT,\n  image_url TEXT,\n  featured BOOLEAN DEFAULT FALSE,\n  order_index INTEGER DEFAULT 0,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n\nCREATE TABLE public.skills (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  category TEXT NOT NULL,\n  skill_name TEXT NOT NULL,\n  proficiency INTEGER DEFAULT 80,\n  icon_url TEXT,\n  order_index INTEGER DEFAULT 0,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n\nCREATE TABLE public.achievements (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  title TEXT NOT NULL,\n  description TEXT,\n  date_achieved DATE,\n  certificate_url TEXT,\n  order_index INTEGER DEFAULT 0,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n\nCREATE TABLE public.blog_posts (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  title TEXT NOT NULL,\n  slug TEXT NOT NULL UNIQUE,\n  content TEXT NOT NULL,\n  excerpt TEXT,\n  image_url TEXT,\n  published BOOLEAN DEFAULT FALSE,\n  tags TEXT[],\n  order_index INTEGER DEFAULT 0,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n\n-- Enable Row Level Security\nALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.personal_info ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.education ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.experience ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.projects ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.skills ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.achievements ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.blog_posts ENABLE ROW LEVEL SECURITY;\n\n-- Create RLS policies for profiles\nCREATE POLICY \\"Profiles are viewable by everyone\\" ON public.profiles FOR SELECT USING (true);\nCREATE POLICY \\"Users can update their own profile\\" ON public.profiles FOR UPDATE USING (auth.uid() = user_id);\nCREATE POLICY \\"Users can insert their own profile\\" ON public.profiles FOR INSERT WITH CHECK (auth.uid() = user_id);\n\n-- Create function to check if user is admin\nCREATE OR REPLACE FUNCTION public.is_admin(user_id UUID)\nRETURNS BOOLEAN\nLANGUAGE SQL\nSECURITY DEFINER\nSET search_path = public\nAS $$\n  SELECT EXISTS (\n    SELECT 1 FROM public.profiles \n    WHERE profiles.user_id = $1 AND is_admin = true\n  );\n$$;\n\n-- RLS policies for portfolio data - viewable by everyone, editable by admin\nCREATE POLICY \\"Personal info viewable by everyone\\" ON public.personal_info FOR SELECT USING (true);\nCREATE POLICY \\"Personal info editable by admin\\" ON public.personal_info FOR ALL USING (public.is_admin(auth.uid()));\n\nCREATE POLICY \\"Education viewable by everyone\\" ON public.education FOR SELECT USING (true);\nCREATE POLICY \\"Education editable by admin\\" ON public.education FOR ALL USING (public.is_admin(auth.uid()));\n\nCREATE POLICY \\"Experience viewable by everyone\\" ON public.experience FOR SELECT USING (true);\nCREATE POLICY \\"Experience editable by admin\\" ON public.experience FOR ALL USING (public.is_admin(auth.uid()));\n\nCREATE POLICY \\"Projects viewable by everyone\\" ON public.projects FOR SELECT USING (true);\nCREATE POLICY \\"Projects editable by admin\\" ON public.projects FOR ALL USING (public.is_admin(auth.uid()));\n\nCREATE POLICY \\"Skills viewable by everyone\\" ON public.skills FOR SELECT USING (true);\nCREATE POLICY \\"Skills editable by admin\\" ON public.skills FOR ALL USING (public.is_admin(auth.uid()));\n\nCREATE POLICY \\"Achievements viewable by everyone\\" ON public.achievements FOR SELECT USING (true);\nCREATE POLICY \\"Achievements editable by admin\\" ON public.achievements FOR ALL USING (public.is_admin(auth.uid()));\n\nCREATE POLICY \\"Blog posts viewable by everyone\\" ON public.blog_posts FOR SELECT USING (published = true OR public.is_admin(auth.uid()));\nCREATE POLICY \\"Blog posts editable by admin\\" ON public.blog_posts FOR ALL USING (public.is_admin(auth.uid()));\n\n-- Create triggers for updated_at timestamps\nCREATE OR REPLACE FUNCTION public.update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n  NEW.updated_at = now();\n  RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SET search_path = public;\n\nCREATE TRIGGER update_profiles_updated_at BEFORE UPDATE ON public.profiles FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();\nCREATE TRIGGER update_personal_info_updated_at BEFORE UPDATE ON public.personal_info FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();\nCREATE TRIGGER update_education_updated_at BEFORE UPDATE ON public.education FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();\nCREATE TRIGGER update_experience_updated_at BEFORE UPDATE ON public.experience FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();\nCREATE TRIGGER update_projects_updated_at BEFORE UPDATE ON public.projects FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();\nCREATE TRIGGER update_skills_updated_at BEFORE UPDATE ON public.skills FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();\nCREATE TRIGGER update_achievements_updated_at BEFORE UPDATE ON public.achievements FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();\nCREATE TRIGGER update_blog_posts_updated_at BEFORE UPDATE ON public.blog_posts FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();\n\n-- Function to handle new user registration\nCREATE OR REPLACE FUNCTION public.handle_new_user()\nRETURNS TRIGGER\nLANGUAGE plpgsql\nSECURITY DEFINER\nSET search_path = public\nAS $$\nBEGIN\n  INSERT INTO public.profiles (user_id, email, full_name, is_admin)\n  VALUES (\n    NEW.id,\n    NEW.email,\n    COALESCE(NEW.raw_user_meta_data ->> 'full_name', NEW.email),\n    NEW.email = 'rs200302@rguktsklm.ac.in' -- Make Dileep admin\n  );\n  RETURN NEW;\nEND;\n$$;\n\n-- Trigger for new user registration\nCREATE TRIGGER on_auth_user_created\n  AFTER INSERT ON auth.users\n  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();\n\n-- Insert initial portfolio data\nINSERT INTO public.personal_info (name, title, bio, location, email, phone, website, linkedin, github, instagram, youtube, twitter) VALUES (\n  'Dileep Adari',\n  'Computer Science Student & Full-Stack Developer | GSoC''25 Joomla! CMS',\n  'A passionate web developer and programmer. My journey revolves around the enchanting world of software engineering, where I thrive on turning ideas into reality through the art of coding. With a keen interest in crafting digital solutions, my focus is on creating seamless and innovative experiences.',\n  'Visakhapatnam, Andhra Pradesh',\n  'rs200302@rguktsklm.ac.in',\n  '+91 7330701217',\n  'dileepadari.dev',\n  'https://www.linkedin.com/in/dileep-kumar-adari-298169252',\n  'https://github.com/dileepadari',\n  'https://www.instagram.com/dileepadari',\n  'https://www.youtube.com/@dileepadari5182/featured',\n  'https://twitter.com/Dileepadari1'\n);\n\n-- Insert education data with explicit text array casting\nINSERT INTO public.education (degree, institution, duration, gpa, location, description, coursework, order_index) VALUES \n(\n  'B.Tech in Computer Science & Engineering',\n  'International Institute of Information Technology, Hyderabad',\n  '2022 - Present',\n  '7.08 CGPA (current)',\n  'Hyderabad, Telangana',\n  '7th Semester student pursuing Bachelor of Technology in Computer Science',\n  ARRAY['Data Structures and Algorithms', 'Operating Systems and Networks', 'Introduction to Software Systems', 'Design and Analysis Software Systems', 'Algorithm Analysis and Design', 'Computer Organization and Architecture', 'Database Management System', 'Internet of Things', 'Intro to Information Security', 'Machine and Data Learning', 'Computer Graphics', 'Embeded Systems workshop']::TEXT[],\n  1\n),\n(\n  'Pre University Course',\n  'Rajiv Gandhi University of Knowledge Technology, Srikakulam',\n  '2020 - 2022',\n  '9.35 CGPA',\n  'Srikakulam, Andhra Pradesh',\n  'Completed Pre University Course with excellent academic performance',\n  ARRAY[]::TEXT[],\n  2\n),\n(\n  'SSC - Secondary School Certificate',\n  'Prasanthi Nikethan M.V.V.S Murthy ENG MED High School, Anakapalli',\n  '2008 - 2020',\n  '10 CGPA',\n  'Anakapalli, Andhra Pradesh',\n  'Completed secondary education with perfect grade',\n  ARRAY[]::TEXT[],\n  3\n);\n\n-- Insert experience data\nINSERT INTO public.experience (title, company, duration, location, description, technologies, order_index) VALUES \n(\n  'Undergraduate Researcher',\n  'SERC lab, IIITH',\n  'April 2024 - Present',\n  'Hyderabad, Telangana',\n  ARRAY[\n    'Conducting research under Dr. Raman Saxena focusing on human-centered design and design thinking methodologies',\n    'Completed a summer project that provided valuable insights into gathering user opinions/problems on present existing Institute Management system',\n    'Applied design thinking to create effective, user-friendly solutions for complex problems',\n    'Engaged in continuous research and development of innovative design methodologies'\n  ]::TEXT[],\n  ARRAY['Design Thinking', 'User Research', 'Human-Computer Interaction', 'UX Research']::TEXT[],\n  1\n),\n(\n  'Software Intern (Virtual Labs)',\n  'Virtual Labs Project',\n  'January 2024 - April 2024',\n  'Remote',\n  ARRAY[\n    'Collaborated on the development of a VS Code Web Extension for a Virtual Labs Authoring Environment',\n    'Used a tech stack that included TypeScript, Webpack, and various APIs',\n    'Engaged in continuous meetings with clients, honing ability to interact effectively',\n    'Gathered valuable feedback and understood the project process flow comprehensively',\n    'Contributed to improving the overall user experience of the Virtual Labs platform'\n  ]::TEXT[],\n  ARRAY['TypeScript', 'Webpack', 'VS Code Extensions', 'JavaScript', 'APIs']::TEXT[],\n  2\n),\n(\n  'Web Admin',\n  'IT Office IIITH',\n  'August 2023 – Present',\n  'Hyderabad, Telangana',\n  ARRAY[\n    'Maintaining and updating university websites under the supervision of the IT Office',\n    'Creating & designing new web pages for events and announcements',\n    'Ensuring website functionality and user experience optimization',\n    'Managing content updates and technical maintenance'\n  ]::TEXT[],\n  ARRAY['HTML', 'CSS', 'JavaScript', 'Web Development', 'Content Management']::TEXT[],\n  3\n),\n(\n  'Tech Team Member',\n  'Club Council & Student Life Committee (IIIT Hyderabad)',\n  'August 2023 – Present',\n  'Hyderabad, Telangana',\n  ARRAY[\n    'Maintaining clubs websites and servers for various student organizations',\n    'Adding new features to improve user engagement and experience',\n    'Providing technical support for club activities and events',\n    'Collaborating with different clubs to meet their technical requirements'\n  ]::TEXT[],\n  ARRAY['Web Development', 'Server Management', 'Full-Stack Development', 'Technical Support']::TEXT[],\n  4\n);\n\n-- Insert skills data\nINSERT INTO public.skills (category, skill_name, proficiency, order_index) VALUES \n('Programming Languages', 'Python', 90, 1),\n('Programming Languages', 'JavaScript', 85, 2),\n('Programming Languages', 'C', 80, 3),\n('Programming Languages', 'HTML5', 95, 4),\n('Programming Languages', 'CSS3', 90, 5),\n('Programming Languages', 'PHP', 75, 6),\n('Frontend Development', 'React', 85, 7),\n('Frontend Development', 'Bootstrap', 80, 8),\n('Frontend Development', 'Responsive Design', 90, 9),\n('Backend Development', 'Flask', 75, 10),\n('Backend Development', 'APIs', 80, 11),\n('Database', 'MySQL', 80, 12),\n('Database', 'MongoDB', 75, 13),\n('Database', 'SQLite', 85, 14),\n('Tools & Technologies', 'Git', 85, 15),\n('Tools & Technologies', 'Linux', 80, 16),\n('Tools & Technologies', 'Arduino', 70, 17),\n('Tools & Technologies', 'LaTeX', 75, 18),\n('Design', 'Photoshop', 70, 19),\n('Design', 'Design Thinking', 85, 20),\n('Other', 'Vim', 75, 21),\n('Other', 'Moodle', 70, 22);\n\n-- Insert achievements data\nINSERT INTO public.achievements (title, description, date_achieved, order_index) VALUES \n(\n  'Bharat Intern Certification',\n  'Received a certificate from Bharat Intern for a virtual Internship program in which I built two websites based on FullStack Development.',\n  '2024-01-01',\n  1\n),\n(\n  'Study with US Certification',\n  'Study With Us is an initiative from RGUKT students in AP where they offer different programming courses where I completed the C Programming Course.',\n  '2022-05-01',\n  2\n),\n(\n  'DevTown Certification in Web Development Bootcamp',\n  'In the bootcamp, I completed the given tasks of building a facebook clone and a netflix clone which gave me great experience of learning web dev.',\n  '2022-05-01',\n  3\n),\n(\n  'Shape AI Certification for Python and Cyber Security',\n  'In the workshop, started with python and the flow of teaching ended with cyber security basics, I learnt very good basics from it and they provided me with a certificate after an exam.',\n  '2021-06-01',\n  4\n),\n(\n  'District Level Silver Medal in International Mathematics Olympiad',\n  'Secured a silver medal in the International Mathematics Olympiad conducted at the district level after School level.',\n  '2016-08-01',\n  5\n);"}		adaridileep@gmail.com	\N
20250920101119	{"-- Add image URLs to projects and blog posts for photos support\nALTER TABLE public.projects ADD COLUMN IF NOT EXISTS images text[];\nALTER TABLE public.blog_posts ADD COLUMN IF NOT EXISTS images text[];\n\n-- Update some existing projects with sample images\nUPDATE public.projects SET images = ARRAY['https://images.unsplash.com/photo-1517077304055-6e89abbf09b0?w=800'] WHERE title LIKE '%Crop%';\nUPDATE public.projects SET images = ARRAY['https://images.unsplash.com/photo-1461749280684-dccba630e2f6?w=800'] WHERE title LIKE '%Extension%';\nUPDATE public.projects SET images = ARRAY['https://images.unsplash.com/photo-1555066931-4365d14bab8c?w=800'] WHERE title LIKE '%E-commerce%';\n\n-- Update blog posts with sample images\nUPDATE public.blog_posts SET images = ARRAY['https://images.unsplash.com/photo-1627398242454-45a1465c2479?w=800'] WHERE title LIKE '%React%';\nUPDATE public.blog_posts SET images = ARRAY['https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=800'] WHERE title LIKE '%TypeScript%';\nUPDATE public.blog_posts SET images = ARRAY['https://images.unsplash.com/photo-1581291518857-4e27b48ff24e?w=800'] WHERE title LIKE '%Full-Stack%';"}		adaridileep@gmail.com	\N
20250921034814	{"-- Create tasks table for project management\nCREATE TABLE public.tasks (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  title TEXT NOT NULL,\n  description TEXT,\n  status TEXT DEFAULT 'todo' CHECK (status IN ('todo', 'in-progress', 'completed')),\n  priority TEXT DEFAULT 'medium' CHECK (priority IN ('low', 'medium', 'high')),\n  due_date TIMESTAMP WITH TIME ZONE,\n  project_id UUID REFERENCES public.projects(id) ON DELETE CASCADE,\n  order_index INTEGER DEFAULT 0,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n\n-- Enable RLS\nALTER TABLE public.tasks ENABLE ROW LEVEL SECURITY;\n\n-- Create policies for tasks\nCREATE POLICY \\"Tasks editable by admin\\" \nON public.tasks \nFOR ALL \nUSING (is_admin(auth.uid()));\n\nCREATE POLICY \\"Tasks viewable by everyone\\" \nON public.tasks \nFOR SELECT \nUSING (true);\n\n-- Create schedules table for appointments/meetings\nCREATE TABLE public.schedules (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  title TEXT NOT NULL,\n  description TEXT,\n  start_time TIMESTAMP WITH TIME ZONE NOT NULL,\n  end_time TIMESTAMP WITH TIME ZONE NOT NULL,\n  type TEXT DEFAULT 'meeting' CHECK (type IN ('meeting', 'call', 'event', 'deadline')),\n  status TEXT DEFAULT 'scheduled' CHECK (status IN ('scheduled', 'completed', 'cancelled')),\n  attendees TEXT[],\n  location TEXT,\n  meeting_url TEXT,\n  is_public BOOLEAN DEFAULT false,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n\n-- Enable RLS\nALTER TABLE public.schedules ENABLE ROW LEVEL SECURITY;\n\n-- Create policies for schedules\nCREATE POLICY \\"Schedules editable by admin\\" \nON public.schedules \nFOR ALL \nUSING (is_admin(auth.uid()));\n\nCREATE POLICY \\"Public schedules viewable by everyone\\" \nON public.schedules \nFOR SELECT \nUSING (is_public = true OR is_admin(auth.uid()));\n\n-- Create contact_messages table for contact form submissions\nCREATE TABLE public.contact_messages (\n  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\n  name TEXT NOT NULL,\n  email TEXT NOT NULL,\n  subject TEXT NOT NULL,\n  message TEXT NOT NULL,\n  status TEXT DEFAULT 'unread' CHECK (status IN ('unread', 'read', 'replied')),\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT now()\n);\n\n-- Enable RLS\nALTER TABLE public.contact_messages ENABLE ROW LEVEL SECURITY;\n\n-- Create policies for contact messages\nCREATE POLICY \\"Contact messages editable by admin\\" \nON public.contact_messages \nFOR ALL \nUSING (is_admin(auth.uid()));\n\n-- Add update triggers for all new tables\nCREATE TRIGGER update_tasks_updated_at\nBEFORE UPDATE ON public.tasks\nFOR EACH ROW\nEXECUTE FUNCTION public.update_updated_at_column();\n\nCREATE TRIGGER update_schedules_updated_at\nBEFORE UPDATE ON public.schedules\nFOR EACH ROW\nEXECUTE FUNCTION public.update_updated_at_column();\n\nCREATE TRIGGER update_contact_messages_updated_at\nBEFORE UPDATE ON public.contact_messages\nFOR EACH ROW\nEXECUTE FUNCTION public.update_updated_at_column();"}		adaridileep@gmail.com	\N
\.


--
-- TOC entry 3656 (class 0 OID 16658)
-- Dependencies: 288
-- Data for Name: secrets; Type: TABLE DATA; Schema: vault; Owner: supabase_admin
--

COPY vault.secrets (id, name, description, secret, key_id, nonce, created_at, updated_at) FROM stdin;
\.


--
-- TOC entry 4581 (class 0 OID 0)
-- Dependencies: 280
-- Name: refresh_tokens_id_seq; Type: SEQUENCE SET; Schema: auth; Owner: supabase_auth_admin
--

SELECT pg_catalog.setval('auth.refresh_tokens_id_seq', 24, true);


--
-- TOC entry 4582 (class 0 OID 0)
-- Dependencies: 307
-- Name: subscription_id_seq; Type: SEQUENCE SET; Schema: realtime; Owner: supabase_admin
--

SELECT pg_catalog.setval('realtime.subscription_id_seq', 1, false);


--
-- TOC entry 3929 (class 2606 OID 16827)
-- Name: mfa_amr_claims amr_id_pk; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT amr_id_pk PRIMARY KEY (id);


--
-- TOC entry 3884 (class 2606 OID 16531)
-- Name: audit_log_entries audit_log_entries_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.audit_log_entries
    ADD CONSTRAINT audit_log_entries_pkey PRIMARY KEY (id);


--
-- TOC entry 3952 (class 2606 OID 16933)
-- Name: flow_state flow_state_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.flow_state
    ADD CONSTRAINT flow_state_pkey PRIMARY KEY (id);


--
-- TOC entry 3908 (class 2606 OID 16951)
-- Name: identities identities_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_pkey PRIMARY KEY (id);


--
-- TOC entry 3910 (class 2606 OID 16961)
-- Name: identities identities_provider_id_provider_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_provider_id_provider_unique UNIQUE (provider_id, provider);


--
-- TOC entry 3882 (class 2606 OID 16524)
-- Name: instances instances_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.instances
    ADD CONSTRAINT instances_pkey PRIMARY KEY (id);


--
-- TOC entry 3931 (class 2606 OID 16820)
-- Name: mfa_amr_claims mfa_amr_claims_session_id_authentication_method_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_authentication_method_pkey UNIQUE (session_id, authentication_method);


--
-- TOC entry 3927 (class 2606 OID 16808)
-- Name: mfa_challenges mfa_challenges_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_pkey PRIMARY KEY (id);


--
-- TOC entry 3919 (class 2606 OID 17001)
-- Name: mfa_factors mfa_factors_last_challenged_at_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_last_challenged_at_key UNIQUE (last_challenged_at);


--
-- TOC entry 3921 (class 2606 OID 16795)
-- Name: mfa_factors mfa_factors_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_pkey PRIMARY KEY (id);


--
-- TOC entry 3962 (class 2606 OID 17022)
-- Name: oauth_clients oauth_clients_client_id_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.oauth_clients
    ADD CONSTRAINT oauth_clients_client_id_key UNIQUE (client_id);


--
-- TOC entry 3965 (class 2606 OID 17020)
-- Name: oauth_clients oauth_clients_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.oauth_clients
    ADD CONSTRAINT oauth_clients_pkey PRIMARY KEY (id);


--
-- TOC entry 3956 (class 2606 OID 16986)
-- Name: one_time_tokens one_time_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_pkey PRIMARY KEY (id);


--
-- TOC entry 3876 (class 2606 OID 16514)
-- Name: refresh_tokens refresh_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_pkey PRIMARY KEY (id);


--
-- TOC entry 3879 (class 2606 OID 16738)
-- Name: refresh_tokens refresh_tokens_token_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_token_unique UNIQUE (token);


--
-- TOC entry 3941 (class 2606 OID 16867)
-- Name: saml_providers saml_providers_entity_id_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_entity_id_key UNIQUE (entity_id);


--
-- TOC entry 3943 (class 2606 OID 16865)
-- Name: saml_providers saml_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_pkey PRIMARY KEY (id);


--
-- TOC entry 3948 (class 2606 OID 16881)
-- Name: saml_relay_states saml_relay_states_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_pkey PRIMARY KEY (id);


--
-- TOC entry 3887 (class 2606 OID 16537)
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- TOC entry 3914 (class 2606 OID 16759)
-- Name: sessions sessions_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_pkey PRIMARY KEY (id);


--
-- TOC entry 3938 (class 2606 OID 16848)
-- Name: sso_domains sso_domains_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_pkey PRIMARY KEY (id);


--
-- TOC entry 3933 (class 2606 OID 16839)
-- Name: sso_providers sso_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_providers
    ADD CONSTRAINT sso_providers_pkey PRIMARY KEY (id);


--
-- TOC entry 3869 (class 2606 OID 16921)
-- Name: users users_phone_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_phone_key UNIQUE (phone);


--
-- TOC entry 3871 (class 2606 OID 16501)
-- Name: users users_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- TOC entry 3998 (class 2606 OID 17538)
-- Name: achievements achievements_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.achievements
    ADD CONSTRAINT achievements_pkey PRIMARY KEY (id);


--
-- TOC entry 4029 (class 2606 OID 20186)
-- Name: blog_comments blog_comments_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_comments
    ADD CONSTRAINT blog_comments_pkey PRIMARY KEY (id);


--
-- TOC entry 4020 (class 2606 OID 20161)
-- Name: blog_likes blog_likes_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_likes
    ADD CONSTRAINT blog_likes_pkey PRIMARY KEY (id);


--
-- TOC entry 4000 (class 2606 OID 17550)
-- Name: blog_posts blog_posts_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_posts
    ADD CONSTRAINT blog_posts_pkey PRIMARY KEY (id);


--
-- TOC entry 4002 (class 2606 OID 17552)
-- Name: blog_posts blog_posts_slug_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_posts
    ADD CONSTRAINT blog_posts_slug_key UNIQUE (slug);


--
-- TOC entry 4016 (class 2606 OID 20061)
-- Name: contact_messages contact_messages_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.contact_messages
    ADD CONSTRAINT contact_messages_pkey PRIMARY KEY (id);


--
-- TOC entry 4018 (class 2606 OID 20078)
-- Name: courses courses_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.courses
    ADD CONSTRAINT courses_pkey PRIMARY KEY (id);


--
-- TOC entry 3990 (class 2606 OID 17492)
-- Name: education education_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.education
    ADD CONSTRAINT education_pkey PRIMARY KEY (id);


--
-- TOC entry 3992 (class 2606 OID 17503)
-- Name: experience experience_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.experience
    ADD CONSTRAINT experience_pkey PRIMARY KEY (id);


--
-- TOC entry 4051 (class 2606 OID 20879)
-- Name: notifications notifications_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.notifications
    ADD CONSTRAINT notifications_pkey PRIMARY KEY (id);


--
-- TOC entry 3988 (class 2606 OID 17481)
-- Name: personal_info personal_info_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.personal_info
    ADD CONSTRAINT personal_info_pkey PRIMARY KEY (id);


--
-- TOC entry 3984 (class 2606 OID 17452)
-- Name: profiles profiles_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.profiles
    ADD CONSTRAINT profiles_pkey PRIMARY KEY (id);


--
-- TOC entry 3986 (class 2606 OID 17454)
-- Name: profiles profiles_user_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.profiles
    ADD CONSTRAINT profiles_user_id_key UNIQUE (user_id);


--
-- TOC entry 3994 (class 2606 OID 17515)
-- Name: projects projects_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.projects
    ADD CONSTRAINT projects_pkey PRIMARY KEY (id);


--
-- TOC entry 4053 (class 2606 OID 20894)
-- Name: quick_actions quick_actions_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.quick_actions
    ADD CONSTRAINT quick_actions_pkey PRIMARY KEY (id);


--
-- TOC entry 4043 (class 2606 OID 20840)
-- Name: schedule_templates schedule_templates_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.schedule_templates
    ADD CONSTRAINT schedule_templates_pkey PRIMARY KEY (id);


--
-- TOC entry 4014 (class 2606 OID 20047)
-- Name: schedules schedules_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.schedules
    ADD CONSTRAINT schedules_pkey PRIMARY KEY (id);


--
-- TOC entry 3996 (class 2606 OID 17527)
-- Name: skills skills_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.skills
    ADD CONSTRAINT skills_pkey PRIMARY KEY (id);


--
-- TOC entry 4045 (class 2606 OID 20851)
-- Name: task_dependencies task_dependencies_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.task_dependencies
    ADD CONSTRAINT task_dependencies_pkey PRIMARY KEY (id);


--
-- TOC entry 4047 (class 2606 OID 20853)
-- Name: task_dependencies task_dependencies_task_id_dependent_task_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.task_dependencies
    ADD CONSTRAINT task_dependencies_task_id_dependent_task_id_key UNIQUE (task_id, dependent_task_id);


--
-- TOC entry 4041 (class 2606 OID 20805)
-- Name: task_templates task_templates_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.task_templates
    ADD CONSTRAINT task_templates_pkey PRIMARY KEY (id);


--
-- TOC entry 4008 (class 2606 OID 20025)
-- Name: tasks tasks_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tasks
    ADD CONSTRAINT tasks_pkey PRIMARY KEY (id);


--
-- TOC entry 4039 (class 2606 OID 20313)
-- Name: timeline_events timeline_events_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.timeline_events
    ADD CONSTRAINT timeline_events_pkey PRIMARY KEY (id);


--
-- TOC entry 4025 (class 2606 OID 20165)
-- Name: blog_likes unique_ip_like; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_likes
    ADD CONSTRAINT unique_ip_like UNIQUE (blog_post_id, user_ip);


--
-- TOC entry 4027 (class 2606 OID 20163)
-- Name: blog_likes unique_user_like; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_likes
    ADD CONSTRAINT unique_user_like UNIQUE (blog_post_id, user_id);


--
-- TOC entry 3978 (class 2606 OID 17289)
-- Name: messages messages_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE ONLY realtime.messages
    ADD CONSTRAINT messages_pkey PRIMARY KEY (id, inserted_at);


--
-- TOC entry 3975 (class 2606 OID 17139)
-- Name: subscription pk_subscription; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.subscription
    ADD CONSTRAINT pk_subscription PRIMARY KEY (id);


--
-- TOC entry 3967 (class 2606 OID 17029)
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- TOC entry 4058 (class 2606 OID 22164)
-- Name: buckets_analytics buckets_analytics_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.buckets_analytics
    ADD CONSTRAINT buckets_analytics_pkey PRIMARY KEY (id);


--
-- TOC entry 3890 (class 2606 OID 16554)
-- Name: buckets buckets_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.buckets
    ADD CONSTRAINT buckets_pkey PRIMARY KEY (id);


--
-- TOC entry 3900 (class 2606 OID 16595)
-- Name: migrations migrations_name_key; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_name_key UNIQUE (name);


--
-- TOC entry 3902 (class 2606 OID 16593)
-- Name: migrations migrations_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_pkey PRIMARY KEY (id);


--
-- TOC entry 3898 (class 2606 OID 16571)
-- Name: objects objects_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT objects_pkey PRIMARY KEY (id);


--
-- TOC entry 4056 (class 2606 OID 22119)
-- Name: prefixes prefixes_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.prefixes
    ADD CONSTRAINT prefixes_pkey PRIMARY KEY (bucket_id, level, name);


--
-- TOC entry 3972 (class 2606 OID 17085)
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_pkey PRIMARY KEY (id);


--
-- TOC entry 3970 (class 2606 OID 17070)
-- Name: s3_multipart_uploads s3_multipart_uploads_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_pkey PRIMARY KEY (id);


--
-- TOC entry 3980 (class 2606 OID 17301)
-- Name: schema_migrations schema_migrations_idempotency_key_key; Type: CONSTRAINT; Schema: supabase_migrations; Owner: postgres
--

ALTER TABLE ONLY supabase_migrations.schema_migrations
    ADD CONSTRAINT schema_migrations_idempotency_key_key UNIQUE (idempotency_key);


--
-- TOC entry 3982 (class 2606 OID 17299)
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: supabase_migrations; Owner: postgres
--

ALTER TABLE ONLY supabase_migrations.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- TOC entry 3885 (class 1259 OID 16532)
-- Name: audit_logs_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX audit_logs_instance_id_idx ON auth.audit_log_entries USING btree (instance_id);


--
-- TOC entry 3859 (class 1259 OID 16748)
-- Name: confirmation_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX confirmation_token_idx ON auth.users USING btree (confirmation_token) WHERE ((confirmation_token)::text !~ '^[0-9 ]*$'::text);


--
-- TOC entry 3860 (class 1259 OID 16750)
-- Name: email_change_token_current_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_current_idx ON auth.users USING btree (email_change_token_current) WHERE ((email_change_token_current)::text !~ '^[0-9 ]*$'::text);


--
-- TOC entry 3861 (class 1259 OID 16751)
-- Name: email_change_token_new_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_new_idx ON auth.users USING btree (email_change_token_new) WHERE ((email_change_token_new)::text !~ '^[0-9 ]*$'::text);


--
-- TOC entry 3917 (class 1259 OID 16829)
-- Name: factor_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX factor_id_created_at_idx ON auth.mfa_factors USING btree (user_id, created_at);


--
-- TOC entry 3950 (class 1259 OID 16937)
-- Name: flow_state_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX flow_state_created_at_idx ON auth.flow_state USING btree (created_at DESC);


--
-- TOC entry 3906 (class 1259 OID 16917)
-- Name: identities_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_email_idx ON auth.identities USING btree (email text_pattern_ops);


--
-- TOC entry 4583 (class 0 OID 0)
-- Dependencies: 3906
-- Name: INDEX identities_email_idx; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.identities_email_idx IS 'Auth: Ensures indexed queries on the email column';


--
-- TOC entry 3911 (class 1259 OID 16745)
-- Name: identities_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_user_id_idx ON auth.identities USING btree (user_id);


--
-- TOC entry 3953 (class 1259 OID 16934)
-- Name: idx_auth_code; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_auth_code ON auth.flow_state USING btree (auth_code);


--
-- TOC entry 3954 (class 1259 OID 16935)
-- Name: idx_user_id_auth_method; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_user_id_auth_method ON auth.flow_state USING btree (user_id, authentication_method);


--
-- TOC entry 3925 (class 1259 OID 16940)
-- Name: mfa_challenge_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_challenge_created_at_idx ON auth.mfa_challenges USING btree (created_at DESC);


--
-- TOC entry 3922 (class 1259 OID 16801)
-- Name: mfa_factors_user_friendly_name_unique; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX mfa_factors_user_friendly_name_unique ON auth.mfa_factors USING btree (friendly_name, user_id) WHERE (TRIM(BOTH FROM friendly_name) <> ''::text);


--
-- TOC entry 3923 (class 1259 OID 16946)
-- Name: mfa_factors_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_factors_user_id_idx ON auth.mfa_factors USING btree (user_id);


--
-- TOC entry 3960 (class 1259 OID 17023)
-- Name: oauth_clients_client_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX oauth_clients_client_id_idx ON auth.oauth_clients USING btree (client_id);


--
-- TOC entry 3963 (class 1259 OID 17024)
-- Name: oauth_clients_deleted_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX oauth_clients_deleted_at_idx ON auth.oauth_clients USING btree (deleted_at);


--
-- TOC entry 3957 (class 1259 OID 16993)
-- Name: one_time_tokens_relates_to_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_relates_to_hash_idx ON auth.one_time_tokens USING hash (relates_to);


--
-- TOC entry 3958 (class 1259 OID 16992)
-- Name: one_time_tokens_token_hash_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_token_hash_hash_idx ON auth.one_time_tokens USING hash (token_hash);


--
-- TOC entry 3959 (class 1259 OID 16994)
-- Name: one_time_tokens_user_id_token_type_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX one_time_tokens_user_id_token_type_key ON auth.one_time_tokens USING btree (user_id, token_type);


--
-- TOC entry 3862 (class 1259 OID 16752)
-- Name: reauthentication_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX reauthentication_token_idx ON auth.users USING btree (reauthentication_token) WHERE ((reauthentication_token)::text !~ '^[0-9 ]*$'::text);


--
-- TOC entry 3863 (class 1259 OID 16749)
-- Name: recovery_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX recovery_token_idx ON auth.users USING btree (recovery_token) WHERE ((recovery_token)::text !~ '^[0-9 ]*$'::text);


--
-- TOC entry 3872 (class 1259 OID 16515)
-- Name: refresh_tokens_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_idx ON auth.refresh_tokens USING btree (instance_id);


--
-- TOC entry 3873 (class 1259 OID 16516)
-- Name: refresh_tokens_instance_id_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_user_id_idx ON auth.refresh_tokens USING btree (instance_id, user_id);


--
-- TOC entry 3874 (class 1259 OID 16744)
-- Name: refresh_tokens_parent_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_parent_idx ON auth.refresh_tokens USING btree (parent);


--
-- TOC entry 3877 (class 1259 OID 16831)
-- Name: refresh_tokens_session_id_revoked_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_session_id_revoked_idx ON auth.refresh_tokens USING btree (session_id, revoked);


--
-- TOC entry 3880 (class 1259 OID 16936)
-- Name: refresh_tokens_updated_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_updated_at_idx ON auth.refresh_tokens USING btree (updated_at DESC);


--
-- TOC entry 3944 (class 1259 OID 16873)
-- Name: saml_providers_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_providers_sso_provider_id_idx ON auth.saml_providers USING btree (sso_provider_id);


--
-- TOC entry 3945 (class 1259 OID 16938)
-- Name: saml_relay_states_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_created_at_idx ON auth.saml_relay_states USING btree (created_at DESC);


--
-- TOC entry 3946 (class 1259 OID 16888)
-- Name: saml_relay_states_for_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_for_email_idx ON auth.saml_relay_states USING btree (for_email);


--
-- TOC entry 3949 (class 1259 OID 16887)
-- Name: saml_relay_states_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_sso_provider_id_idx ON auth.saml_relay_states USING btree (sso_provider_id);


--
-- TOC entry 3912 (class 1259 OID 16939)
-- Name: sessions_not_after_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_not_after_idx ON auth.sessions USING btree (not_after DESC);


--
-- TOC entry 3915 (class 1259 OID 16830)
-- Name: sessions_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_user_id_idx ON auth.sessions USING btree (user_id);


--
-- TOC entry 3936 (class 1259 OID 16855)
-- Name: sso_domains_domain_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_domains_domain_idx ON auth.sso_domains USING btree (lower(domain));


--
-- TOC entry 3939 (class 1259 OID 16854)
-- Name: sso_domains_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sso_domains_sso_provider_id_idx ON auth.sso_domains USING btree (sso_provider_id);


--
-- TOC entry 3934 (class 1259 OID 16840)
-- Name: sso_providers_resource_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_providers_resource_id_idx ON auth.sso_providers USING btree (lower(resource_id));


--
-- TOC entry 3935 (class 1259 OID 17002)
-- Name: sso_providers_resource_id_pattern_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sso_providers_resource_id_pattern_idx ON auth.sso_providers USING btree (resource_id text_pattern_ops);


--
-- TOC entry 3924 (class 1259 OID 16999)
-- Name: unique_phone_factor_per_user; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX unique_phone_factor_per_user ON auth.mfa_factors USING btree (user_id, phone);


--
-- TOC entry 3916 (class 1259 OID 16828)
-- Name: user_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX user_id_created_at_idx ON auth.sessions USING btree (user_id, created_at);


--
-- TOC entry 3864 (class 1259 OID 16908)
-- Name: users_email_partial_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX users_email_partial_key ON auth.users USING btree (email) WHERE (is_sso_user = false);


--
-- TOC entry 4584 (class 0 OID 0)
-- Dependencies: 3864
-- Name: INDEX users_email_partial_key; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.users_email_partial_key IS 'Auth: A partial unique index that applies only when is_sso_user is false';


--
-- TOC entry 3865 (class 1259 OID 16746)
-- Name: users_instance_id_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_email_idx ON auth.users USING btree (instance_id, lower((email)::text));


--
-- TOC entry 3866 (class 1259 OID 16505)
-- Name: users_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_idx ON auth.users USING btree (instance_id);


--
-- TOC entry 3867 (class 1259 OID 16963)
-- Name: users_is_anonymous_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_is_anonymous_idx ON auth.users USING btree (is_anonymous);


--
-- TOC entry 4030 (class 1259 OID 20228)
-- Name: idx_blog_comments_created_at; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_blog_comments_created_at ON public.blog_comments USING btree (created_at);


--
-- TOC entry 4031 (class 1259 OID 20226)
-- Name: idx_blog_comments_parent_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_blog_comments_parent_id ON public.blog_comments USING btree (parent_comment_id);


--
-- TOC entry 4032 (class 1259 OID 20225)
-- Name: idx_blog_comments_post_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_blog_comments_post_id ON public.blog_comments USING btree (blog_post_id);


--
-- TOC entry 4033 (class 1259 OID 20227)
-- Name: idx_blog_comments_user_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_blog_comments_user_id ON public.blog_comments USING btree (user_id);


--
-- TOC entry 4021 (class 1259 OID 20224)
-- Name: idx_blog_likes_created_at; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_blog_likes_created_at ON public.blog_likes USING btree (created_at);


--
-- TOC entry 4022 (class 1259 OID 20222)
-- Name: idx_blog_likes_post_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_blog_likes_post_id ON public.blog_likes USING btree (blog_post_id);


--
-- TOC entry 4023 (class 1259 OID 20223)
-- Name: idx_blog_likes_user_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_blog_likes_user_id ON public.blog_likes USING btree (user_id);


--
-- TOC entry 4048 (class 1259 OID 20920)
-- Name: idx_notifications_reference; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_notifications_reference ON public.notifications USING btree (reference_type, reference_id);


--
-- TOC entry 4049 (class 1259 OID 20919)
-- Name: idx_notifications_scheduled_for; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_notifications_scheduled_for ON public.notifications USING btree (scheduled_for) WHERE (is_sent = false);


--
-- TOC entry 4009 (class 1259 OID 20917)
-- Name: idx_schedules_is_recurring; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_schedules_is_recurring ON public.schedules USING btree (is_recurring) WHERE (is_recurring = true);


--
-- TOC entry 4010 (class 1259 OID 20918)
-- Name: idx_schedules_parent_event; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_schedules_parent_event ON public.schedules USING btree (parent_event_id) WHERE (parent_event_id IS NOT NULL);


--
-- TOC entry 4011 (class 1259 OID 20915)
-- Name: idx_schedules_start_time; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_schedules_start_time ON public.schedules USING btree (start_time);


--
-- TOC entry 4012 (class 1259 OID 20916)
-- Name: idx_schedules_status_type; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_schedules_status_type ON public.schedules USING btree (status, type);


--
-- TOC entry 4003 (class 1259 OID 20913)
-- Name: idx_tasks_category; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tasks_category ON public.tasks USING btree (category);


--
-- TOC entry 4004 (class 1259 OID 20912)
-- Name: idx_tasks_due_date; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tasks_due_date ON public.tasks USING btree (due_date) WHERE (due_date IS NOT NULL);


--
-- TOC entry 4005 (class 1259 OID 20914)
-- Name: idx_tasks_is_recurring; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tasks_is_recurring ON public.tasks USING btree (is_recurring) WHERE (is_recurring = true);


--
-- TOC entry 4006 (class 1259 OID 20911)
-- Name: idx_tasks_status_priority; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_tasks_status_priority ON public.tasks USING btree (status, priority);


--
-- TOC entry 4034 (class 1259 OID 20315)
-- Name: idx_timeline_events_date; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_timeline_events_date ON public.timeline_events USING btree (date DESC);


--
-- TOC entry 4035 (class 1259 OID 20316)
-- Name: idx_timeline_events_order; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_timeline_events_order ON public.timeline_events USING btree (order_index);


--
-- TOC entry 4036 (class 1259 OID 20317)
-- Name: idx_timeline_events_tags; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_timeline_events_tags ON public.timeline_events USING gin (tags);


--
-- TOC entry 4037 (class 1259 OID 20314)
-- Name: idx_timeline_events_type; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_timeline_events_type ON public.timeline_events USING btree (type);


--
-- TOC entry 3973 (class 1259 OID 17290)
-- Name: ix_realtime_subscription_entity; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE INDEX ix_realtime_subscription_entity ON realtime.subscription USING btree (entity);


--
-- TOC entry 3976 (class 1259 OID 17188)
-- Name: subscription_subscription_id_entity_filters_key; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE UNIQUE INDEX subscription_subscription_id_entity_filters_key ON realtime.subscription USING btree (subscription_id, entity, filters);


--
-- TOC entry 3888 (class 1259 OID 16560)
-- Name: bname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bname ON storage.buckets USING btree (name);


--
-- TOC entry 3891 (class 1259 OID 16582)
-- Name: bucketid_objname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bucketid_objname ON storage.objects USING btree (bucket_id, name);


--
-- TOC entry 3968 (class 1259 OID 17096)
-- Name: idx_multipart_uploads_list; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_multipart_uploads_list ON storage.s3_multipart_uploads USING btree (bucket_id, key, created_at);


--
-- TOC entry 3892 (class 1259 OID 22137)
-- Name: idx_name_bucket_level_unique; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX idx_name_bucket_level_unique ON storage.objects USING btree (name COLLATE "C", bucket_id, level);


--
-- TOC entry 3893 (class 1259 OID 17061)
-- Name: idx_objects_bucket_id_name; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_objects_bucket_id_name ON storage.objects USING btree (bucket_id, name COLLATE "C");


--
-- TOC entry 3894 (class 1259 OID 22139)
-- Name: idx_objects_lower_name; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_objects_lower_name ON storage.objects USING btree ((path_tokens[level]), lower(name) text_pattern_ops, bucket_id, level);


--
-- TOC entry 4054 (class 1259 OID 22140)
-- Name: idx_prefixes_lower_name; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_prefixes_lower_name ON storage.prefixes USING btree (bucket_id, level, ((string_to_array(name, '/'::text))[level]), lower(name) text_pattern_ops);


--
-- TOC entry 3895 (class 1259 OID 16583)
-- Name: name_prefix_search; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX name_prefix_search ON storage.objects USING btree (name text_pattern_ops);


--
-- TOC entry 3896 (class 1259 OID 22138)
-- Name: objects_bucket_id_level_idx; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX objects_bucket_id_level_idx ON storage.objects USING btree (bucket_id, level, name COLLATE "C");


--
-- TOC entry 4086 (class 2620 OID 17581)
-- Name: users on_auth_user_created; Type: TRIGGER; Schema: auth; Owner: supabase_auth_admin
--

CREATE TRIGGER on_auth_user_created AFTER INSERT ON auth.users FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();


--
-- TOC entry 4104 (class 2620 OID 20082)
-- Name: courses handle_courses_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER handle_courses_updated_at BEFORE UPDATE ON public.courses FOR EACH ROW EXECUTE FUNCTION public.handle_updated_at();


--
-- TOC entry 4099 (class 2620 OID 17578)
-- Name: achievements update_achievements_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_achievements_updated_at BEFORE UPDATE ON public.achievements FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- TOC entry 4105 (class 2620 OID 20242)
-- Name: blog_comments update_blog_comments_updated_at_trigger; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_blog_comments_updated_at_trigger BEFORE UPDATE ON public.blog_comments FOR EACH ROW EXECUTE FUNCTION public.update_blog_comments_updated_at();


--
-- TOC entry 4100 (class 2620 OID 17579)
-- Name: blog_posts update_blog_posts_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_blog_posts_updated_at BEFORE UPDATE ON public.blog_posts FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- TOC entry 4103 (class 2620 OID 20065)
-- Name: contact_messages update_contact_messages_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_contact_messages_updated_at BEFORE UPDATE ON public.contact_messages FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- TOC entry 4095 (class 2620 OID 17574)
-- Name: education update_education_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_education_updated_at BEFORE UPDATE ON public.education FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- TOC entry 4096 (class 2620 OID 17575)
-- Name: experience update_experience_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_experience_updated_at BEFORE UPDATE ON public.experience FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- TOC entry 4109 (class 2620 OID 20907)
-- Name: notifications update_notifications_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_notifications_updated_at BEFORE UPDATE ON public.notifications FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- TOC entry 4094 (class 2620 OID 17573)
-- Name: personal_info update_personal_info_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_personal_info_updated_at BEFORE UPDATE ON public.personal_info FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- TOC entry 4093 (class 2620 OID 17572)
-- Name: profiles update_profiles_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_profiles_updated_at BEFORE UPDATE ON public.profiles FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- TOC entry 4097 (class 2620 OID 17576)
-- Name: projects update_projects_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_projects_updated_at BEFORE UPDATE ON public.projects FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- TOC entry 4110 (class 2620 OID 20908)
-- Name: quick_actions update_quick_actions_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_quick_actions_updated_at BEFORE UPDATE ON public.quick_actions FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- TOC entry 4108 (class 2620 OID 20906)
-- Name: schedule_templates update_schedule_templates_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_schedule_templates_updated_at BEFORE UPDATE ON public.schedule_templates FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- TOC entry 4102 (class 2620 OID 20064)
-- Name: schedules update_schedules_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_schedules_updated_at BEFORE UPDATE ON public.schedules FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- TOC entry 4098 (class 2620 OID 17577)
-- Name: skills update_skills_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_skills_updated_at BEFORE UPDATE ON public.skills FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- TOC entry 4107 (class 2620 OID 20905)
-- Name: task_templates update_task_templates_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_task_templates_updated_at BEFORE UPDATE ON public.task_templates FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- TOC entry 4101 (class 2620 OID 20063)
-- Name: tasks update_tasks_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_tasks_updated_at BEFORE UPDATE ON public.tasks FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- TOC entry 4106 (class 2620 OID 20318)
-- Name: timeline_events update_timeline_events_updated_at; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER update_timeline_events_updated_at BEFORE UPDATE ON public.timeline_events FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- TOC entry 4092 (class 2620 OID 17144)
-- Name: subscription tr_check_filters; Type: TRIGGER; Schema: realtime; Owner: supabase_admin
--

CREATE TRIGGER tr_check_filters BEFORE INSERT OR UPDATE ON realtime.subscription FOR EACH ROW EXECUTE FUNCTION realtime.subscription_check_filters();


--
-- TOC entry 4087 (class 2620 OID 22147)
-- Name: buckets enforce_bucket_name_length_trigger; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER enforce_bucket_name_length_trigger BEFORE INSERT OR UPDATE OF name ON storage.buckets FOR EACH ROW EXECUTE FUNCTION storage.enforce_bucket_name_length();


--
-- TOC entry 4088 (class 2620 OID 22135)
-- Name: objects objects_delete_delete_prefix; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER objects_delete_delete_prefix AFTER DELETE ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.delete_prefix_hierarchy_trigger();


--
-- TOC entry 4089 (class 2620 OID 22133)
-- Name: objects objects_insert_create_prefix; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER objects_insert_create_prefix BEFORE INSERT ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.objects_insert_prefix_trigger();


--
-- TOC entry 4090 (class 2620 OID 22134)
-- Name: objects objects_update_create_prefix; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER objects_update_create_prefix BEFORE UPDATE ON storage.objects FOR EACH ROW WHEN (((new.name <> old.name) OR (new.bucket_id <> old.bucket_id))) EXECUTE FUNCTION storage.objects_update_prefix_trigger();


--
-- TOC entry 4111 (class 2620 OID 22143)
-- Name: prefixes prefixes_create_hierarchy; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER prefixes_create_hierarchy BEFORE INSERT ON storage.prefixes FOR EACH ROW WHEN ((pg_trigger_depth() < 1)) EXECUTE FUNCTION storage.prefixes_insert_trigger();


--
-- TOC entry 4112 (class 2620 OID 22132)
-- Name: prefixes prefixes_delete_hierarchy; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER prefixes_delete_hierarchy AFTER DELETE ON storage.prefixes FOR EACH ROW EXECUTE FUNCTION storage.delete_prefix_hierarchy_trigger();


--
-- TOC entry 4091 (class 2620 OID 17049)
-- Name: objects update_objects_updated_at; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER update_objects_updated_at BEFORE UPDATE ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.update_updated_at_column();


--
-- TOC entry 4061 (class 2606 OID 16732)
-- Name: identities identities_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- TOC entry 4065 (class 2606 OID 16821)
-- Name: mfa_amr_claims mfa_amr_claims_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- TOC entry 4064 (class 2606 OID 16809)
-- Name: mfa_challenges mfa_challenges_auth_factor_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_auth_factor_id_fkey FOREIGN KEY (factor_id) REFERENCES auth.mfa_factors(id) ON DELETE CASCADE;


--
-- TOC entry 4063 (class 2606 OID 16796)
-- Name: mfa_factors mfa_factors_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- TOC entry 4070 (class 2606 OID 16987)
-- Name: one_time_tokens one_time_tokens_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- TOC entry 4059 (class 2606 OID 16765)
-- Name: refresh_tokens refresh_tokens_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- TOC entry 4067 (class 2606 OID 16868)
-- Name: saml_providers saml_providers_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- TOC entry 4068 (class 2606 OID 16941)
-- Name: saml_relay_states saml_relay_states_flow_state_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_flow_state_id_fkey FOREIGN KEY (flow_state_id) REFERENCES auth.flow_state(id) ON DELETE CASCADE;


--
-- TOC entry 4069 (class 2606 OID 16882)
-- Name: saml_relay_states saml_relay_states_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- TOC entry 4062 (class 2606 OID 16760)
-- Name: sessions sessions_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- TOC entry 4066 (class 2606 OID 16849)
-- Name: sso_domains sso_domains_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- TOC entry 4080 (class 2606 OID 20187)
-- Name: blog_comments blog_comments_blog_post_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_comments
    ADD CONSTRAINT blog_comments_blog_post_id_fkey FOREIGN KEY (blog_post_id) REFERENCES public.blog_posts(id) ON DELETE CASCADE;


--
-- TOC entry 4081 (class 2606 OID 20192)
-- Name: blog_comments blog_comments_parent_comment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_comments
    ADD CONSTRAINT blog_comments_parent_comment_id_fkey FOREIGN KEY (parent_comment_id) REFERENCES public.blog_comments(id) ON DELETE CASCADE;


--
-- TOC entry 4082 (class 2606 OID 20197)
-- Name: blog_comments blog_comments_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_comments
    ADD CONSTRAINT blog_comments_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- TOC entry 4078 (class 2606 OID 20166)
-- Name: blog_likes blog_likes_blog_post_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_likes
    ADD CONSTRAINT blog_likes_blog_post_id_fkey FOREIGN KEY (blog_post_id) REFERENCES public.blog_posts(id) ON DELETE CASCADE;


--
-- TOC entry 4079 (class 2606 OID 20171)
-- Name: blog_likes blog_likes_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.blog_likes
    ADD CONSTRAINT blog_likes_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- TOC entry 4074 (class 2606 OID 17455)
-- Name: profiles profiles_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.profiles
    ADD CONSTRAINT profiles_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- TOC entry 4076 (class 2606 OID 20817)
-- Name: schedules schedules_parent_event_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.schedules
    ADD CONSTRAINT schedules_parent_event_id_fkey FOREIGN KEY (parent_event_id) REFERENCES public.schedules(id) ON DELETE CASCADE;


--
-- TOC entry 4077 (class 2606 OID 20811)
-- Name: schedules schedules_task_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.schedules
    ADD CONSTRAINT schedules_task_id_fkey FOREIGN KEY (task_id) REFERENCES public.tasks(id) ON DELETE SET NULL;


--
-- TOC entry 4083 (class 2606 OID 20859)
-- Name: task_dependencies task_dependencies_dependent_task_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.task_dependencies
    ADD CONSTRAINT task_dependencies_dependent_task_id_fkey FOREIGN KEY (dependent_task_id) REFERENCES public.tasks(id) ON DELETE CASCADE;


--
-- TOC entry 4084 (class 2606 OID 20854)
-- Name: task_dependencies task_dependencies_task_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.task_dependencies
    ADD CONSTRAINT task_dependencies_task_id_fkey FOREIGN KEY (task_id) REFERENCES public.tasks(id) ON DELETE CASCADE;


--
-- TOC entry 4075 (class 2606 OID 20026)
-- Name: tasks tasks_project_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tasks
    ADD CONSTRAINT tasks_project_id_fkey FOREIGN KEY (project_id) REFERENCES public.projects(id) ON DELETE CASCADE;


--
-- TOC entry 4060 (class 2606 OID 16572)
-- Name: objects objects_bucketId_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT "objects_bucketId_fkey" FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- TOC entry 4085 (class 2606 OID 22120)
-- Name: prefixes prefixes_bucketId_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.prefixes
    ADD CONSTRAINT "prefixes_bucketId_fkey" FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- TOC entry 4071 (class 2606 OID 17071)
-- Name: s3_multipart_uploads s3_multipart_uploads_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- TOC entry 4072 (class 2606 OID 17091)
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- TOC entry 4073 (class 2606 OID 17086)
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_upload_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_upload_id_fkey FOREIGN KEY (upload_id) REFERENCES storage.s3_multipart_uploads(id) ON DELETE CASCADE;


--
-- TOC entry 4264 (class 0 OID 16525)
-- Dependencies: 283
-- Name: audit_log_entries; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.audit_log_entries ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4278 (class 0 OID 16927)
-- Dependencies: 300
-- Name: flow_state; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.flow_state ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4269 (class 0 OID 16725)
-- Dependencies: 291
-- Name: identities; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.identities ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4263 (class 0 OID 16518)
-- Dependencies: 282
-- Name: instances; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.instances ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4273 (class 0 OID 16814)
-- Dependencies: 295
-- Name: mfa_amr_claims; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_amr_claims ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4272 (class 0 OID 16802)
-- Dependencies: 294
-- Name: mfa_challenges; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_challenges ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4271 (class 0 OID 16789)
-- Dependencies: 293
-- Name: mfa_factors; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_factors ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4279 (class 0 OID 16977)
-- Dependencies: 301
-- Name: one_time_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.one_time_tokens ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4262 (class 0 OID 16507)
-- Dependencies: 281
-- Name: refresh_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.refresh_tokens ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4276 (class 0 OID 16856)
-- Dependencies: 298
-- Name: saml_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_providers ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4277 (class 0 OID 16874)
-- Dependencies: 299
-- Name: saml_relay_states; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_relay_states ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4265 (class 0 OID 16533)
-- Dependencies: 284
-- Name: schema_migrations; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.schema_migrations ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4270 (class 0 OID 16755)
-- Dependencies: 292
-- Name: sessions; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sessions ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4275 (class 0 OID 16841)
-- Dependencies: 297
-- Name: sso_domains; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_domains ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4274 (class 0 OID 16832)
-- Dependencies: 296
-- Name: sso_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_providers ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4261 (class 0 OID 16495)
-- Dependencies: 279
-- Name: users; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.users ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4329 (class 3256 OID 17568)
-- Name: achievements Achievements editable by admin; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Achievements editable by admin" ON public.achievements USING (public.is_admin(auth.uid()));


--
-- TOC entry 4328 (class 3256 OID 17567)
-- Name: achievements Achievements viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Achievements viewable by everyone" ON public.achievements FOR SELECT USING (true);


--
-- TOC entry 4349 (class 3256 OID 20390)
-- Name: timeline_events Admins can delete timeline events; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Admins can delete timeline events" ON public.timeline_events FOR DELETE USING (((auth.role() = 'authenticated'::text) AND (EXISTS ( SELECT 1
   FROM public.profiles
  WHERE ((profiles.user_id = auth.uid()) AND (profiles.is_admin = true))))));


--
-- TOC entry 4347 (class 3256 OID 20388)
-- Name: timeline_events Admins can insert timeline events; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Admins can insert timeline events" ON public.timeline_events FOR INSERT WITH CHECK (((auth.role() = 'authenticated'::text) AND (EXISTS ( SELECT 1
   FROM public.profiles
  WHERE ((profiles.user_id = auth.uid()) AND (profiles.is_admin = true))))));


--
-- TOC entry 4348 (class 3256 OID 20389)
-- Name: timeline_events Admins can update timeline events; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Admins can update timeline events" ON public.timeline_events FOR UPDATE USING (((auth.role() = 'authenticated'::text) AND (EXISTS ( SELECT 1
   FROM public.profiles
  WHERE ((profiles.user_id = auth.uid()) AND (profiles.is_admin = true))))));


--
-- TOC entry 4338 (class 3256 OID 20080)
-- Name: courses Allow authenticated users to modify courses; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow authenticated users to modify courses" ON public.courses USING ((auth.role() = 'authenticated'::text));


--
-- TOC entry 4337 (class 3256 OID 20079)
-- Name: courses Allow public read access on courses; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow public read access on courses" ON public.courses FOR SELECT USING (true);


--
-- TOC entry 4343 (class 3256 OID 20236)
-- Name: blog_comments Anyone can add comments; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Anyone can add comments" ON public.blog_comments FOR INSERT WITH CHECK (true);


--
-- TOC entry 4342 (class 3256 OID 20235)
-- Name: blog_comments Anyone can view approved comments; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Anyone can view approved comments" ON public.blog_comments FOR SELECT USING ((is_approved = true));


--
-- TOC entry 4339 (class 3256 OID 20232)
-- Name: blog_likes Anyone can view likes; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Anyone can view likes" ON public.blog_likes FOR SELECT USING (true);


--
-- TOC entry 4346 (class 3256 OID 20319)
-- Name: timeline_events Anyone can view timeline events; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Anyone can view timeline events" ON public.timeline_events FOR SELECT USING (true);


--
-- TOC entry 4331 (class 3256 OID 17570)
-- Name: blog_posts Blog posts editable by admin; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Blog posts editable by admin" ON public.blog_posts USING (public.is_admin(auth.uid()));


--
-- TOC entry 4330 (class 3256 OID 17569)
-- Name: blog_posts Blog posts viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Blog posts viewable by everyone" ON public.blog_posts FOR SELECT USING (((published = true) OR public.is_admin(auth.uid())));


--
-- TOC entry 4336 (class 3256 OID 20062)
-- Name: contact_messages Contact messages editable by admin; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Contact messages editable by admin" ON public.contact_messages USING (public.is_admin(auth.uid()));


--
-- TOC entry 4321 (class 3256 OID 17560)
-- Name: education Education editable by admin; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Education editable by admin" ON public.education USING (public.is_admin(auth.uid()));


--
-- TOC entry 4320 (class 3256 OID 17559)
-- Name: education Education viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Education viewable by everyone" ON public.education FOR SELECT USING (true);


--
-- TOC entry 4323 (class 3256 OID 17562)
-- Name: experience Experience editable by admin; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Experience editable by admin" ON public.experience USING (public.is_admin(auth.uid()));


--
-- TOC entry 4322 (class 3256 OID 17561)
-- Name: experience Experience viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Experience viewable by everyone" ON public.experience FOR SELECT USING (true);


--
-- TOC entry 4311 (class 3256 OID 20901)
-- Name: notifications Notifications editable by admin; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Notifications editable by admin" ON public.notifications USING (public.is_admin(auth.uid()));


--
-- TOC entry 4312 (class 3256 OID 20902)
-- Name: notifications Notifications viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Notifications viewable by everyone" ON public.notifications FOR SELECT USING (true);


--
-- TOC entry 4319 (class 3256 OID 17558)
-- Name: personal_info Personal info editable by admin; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Personal info editable by admin" ON public.personal_info USING (public.is_admin(auth.uid()));


--
-- TOC entry 4318 (class 3256 OID 17557)
-- Name: personal_info Personal info viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Personal info viewable by everyone" ON public.personal_info FOR SELECT USING (true);


--
-- TOC entry 4315 (class 3256 OID 17553)
-- Name: profiles Profiles are viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Profiles are viewable by everyone" ON public.profiles FOR SELECT USING (true);


--
-- TOC entry 4325 (class 3256 OID 17564)
-- Name: projects Projects editable by admin; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Projects editable by admin" ON public.projects USING (public.is_admin(auth.uid()));


--
-- TOC entry 4324 (class 3256 OID 17563)
-- Name: projects Projects viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Projects viewable by everyone" ON public.projects FOR SELECT USING (true);


--
-- TOC entry 4335 (class 3256 OID 20049)
-- Name: schedules Public schedules viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Public schedules viewable by everyone" ON public.schedules FOR SELECT USING (((is_public = true) OR public.is_admin(auth.uid())));


--
-- TOC entry 4313 (class 3256 OID 20903)
-- Name: quick_actions Quick actions editable by admin; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Quick actions editable by admin" ON public.quick_actions USING (public.is_admin(auth.uid()));


--
-- TOC entry 4314 (class 3256 OID 20904)
-- Name: quick_actions Quick actions viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Quick actions viewable by everyone" ON public.quick_actions FOR SELECT USING ((is_active = true));


--
-- TOC entry 4307 (class 3256 OID 20897)
-- Name: schedule_templates Schedule templates editable by admin; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Schedule templates editable by admin" ON public.schedule_templates USING (public.is_admin(auth.uid()));


--
-- TOC entry 4308 (class 3256 OID 20898)
-- Name: schedule_templates Schedule templates viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Schedule templates viewable by everyone" ON public.schedule_templates FOR SELECT USING ((is_active = true));


--
-- TOC entry 4334 (class 3256 OID 20048)
-- Name: schedules Schedules editable by admin; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Schedules editable by admin" ON public.schedules USING (public.is_admin(auth.uid()));


--
-- TOC entry 4327 (class 3256 OID 17566)
-- Name: skills Skills editable by admin; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Skills editable by admin" ON public.skills USING (public.is_admin(auth.uid()));


--
-- TOC entry 4326 (class 3256 OID 17565)
-- Name: skills Skills viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Skills viewable by everyone" ON public.skills FOR SELECT USING (true);


--
-- TOC entry 4309 (class 3256 OID 20899)
-- Name: task_dependencies Task dependencies editable by admin; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Task dependencies editable by admin" ON public.task_dependencies USING (public.is_admin(auth.uid()));


--
-- TOC entry 4310 (class 3256 OID 20900)
-- Name: task_dependencies Task dependencies viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Task dependencies viewable by everyone" ON public.task_dependencies FOR SELECT USING (true);


--
-- TOC entry 4305 (class 3256 OID 20895)
-- Name: task_templates Task templates editable by admin; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Task templates editable by admin" ON public.task_templates USING (public.is_admin(auth.uid()));


--
-- TOC entry 4306 (class 3256 OID 20896)
-- Name: task_templates Task templates viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Task templates viewable by everyone" ON public.task_templates FOR SELECT USING ((is_active = true));


--
-- TOC entry 4332 (class 3256 OID 20031)
-- Name: tasks Tasks editable by admin; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Tasks editable by admin" ON public.tasks USING (public.is_admin(auth.uid()));


--
-- TOC entry 4333 (class 3256 OID 20032)
-- Name: tasks Tasks viewable by everyone; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Tasks viewable by everyone" ON public.tasks FOR SELECT USING (true);


--
-- TOC entry 4345 (class 3256 OID 20238)
-- Name: blog_comments Users can delete their own comments; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can delete their own comments" ON public.blog_comments FOR DELETE USING ((auth.uid() = user_id));


--
-- TOC entry 4317 (class 3256 OID 17555)
-- Name: profiles Users can insert their own profile; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can insert their own profile" ON public.profiles FOR INSERT WITH CHECK ((auth.uid() = user_id));


--
-- TOC entry 4340 (class 3256 OID 20233)
-- Name: blog_likes Users can like posts; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can like posts" ON public.blog_likes FOR INSERT WITH CHECK (true);


--
-- TOC entry 4341 (class 3256 OID 20234)
-- Name: blog_likes Users can unlike their own likes; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can unlike their own likes" ON public.blog_likes FOR DELETE USING (((auth.uid() = user_id) OR (user_ip = inet_client_addr())));


--
-- TOC entry 4344 (class 3256 OID 20237)
-- Name: blog_comments Users can update their own comments; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can update their own comments" ON public.blog_comments FOR UPDATE USING ((auth.uid() = user_id)) WITH CHECK ((auth.uid() = user_id));


--
-- TOC entry 4316 (class 3256 OID 17554)
-- Name: profiles Users can update their own profile; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can update their own profile" ON public.profiles FOR UPDATE USING ((auth.uid() = user_id));


--
-- TOC entry 4289 (class 0 OID 17528)
-- Dependencies: 319
-- Name: achievements; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.achievements ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4296 (class 0 OID 20176)
-- Dependencies: 326
-- Name: blog_comments; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.blog_comments ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4295 (class 0 OID 20152)
-- Dependencies: 325
-- Name: blog_likes; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.blog_likes ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4290 (class 0 OID 17539)
-- Dependencies: 320
-- Name: blog_posts; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.blog_posts ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4293 (class 0 OID 20050)
-- Dependencies: 323
-- Name: contact_messages; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.contact_messages ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4294 (class 0 OID 20067)
-- Dependencies: 324
-- Name: courses; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.courses ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4285 (class 0 OID 17482)
-- Dependencies: 315
-- Name: education; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.education ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4286 (class 0 OID 17493)
-- Dependencies: 316
-- Name: experience; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.experience ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4301 (class 0 OID 20864)
-- Dependencies: 331
-- Name: notifications; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4284 (class 0 OID 17460)
-- Dependencies: 314
-- Name: personal_info; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.personal_info ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4283 (class 0 OID 17442)
-- Dependencies: 313
-- Name: profiles; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4287 (class 0 OID 17504)
-- Dependencies: 317
-- Name: projects; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.projects ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4302 (class 0 OID 20880)
-- Dependencies: 332
-- Name: quick_actions; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.quick_actions ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4299 (class 0 OID 20822)
-- Dependencies: 329
-- Name: schedule_templates; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.schedule_templates ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4292 (class 0 OID 20033)
-- Dependencies: 322
-- Name: schedules; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.schedules ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4288 (class 0 OID 17516)
-- Dependencies: 318
-- Name: skills; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.skills ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4300 (class 0 OID 20841)
-- Dependencies: 330
-- Name: task_dependencies; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.task_dependencies ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4298 (class 0 OID 20790)
-- Dependencies: 328
-- Name: task_templates; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.task_templates ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4291 (class 0 OID 20011)
-- Dependencies: 321
-- Name: tasks; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.tasks ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4297 (class 0 OID 20302)
-- Dependencies: 327
-- Name: timeline_events; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.timeline_events ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4282 (class 0 OID 17275)
-- Dependencies: 311
-- Name: messages; Type: ROW SECURITY; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE realtime.messages ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4266 (class 0 OID 16546)
-- Dependencies: 285
-- Name: buckets; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.buckets ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4304 (class 0 OID 22154)
-- Dependencies: 334
-- Name: buckets_analytics; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.buckets_analytics ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4268 (class 0 OID 16588)
-- Dependencies: 287
-- Name: migrations; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.migrations ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4267 (class 0 OID 16561)
-- Dependencies: 286
-- Name: objects; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4303 (class 0 OID 22110)
-- Dependencies: 333
-- Name: prefixes; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.prefixes ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4280 (class 0 OID 17062)
-- Dependencies: 304
-- Name: s3_multipart_uploads; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4281 (class 0 OID 17076)
-- Dependencies: 305
-- Name: s3_multipart_uploads_parts; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads_parts ENABLE ROW LEVEL SECURITY;

--
-- TOC entry 4350 (class 6104 OID 16426)
-- Name: supabase_realtime; Type: PUBLICATION; Schema: -; Owner: postgres
--

CREATE PUBLICATION supabase_realtime WITH (publish = 'insert, update, delete, truncate');


ALTER PUBLICATION supabase_realtime OWNER TO postgres;

--
-- TOC entry 4405 (class 0 OID 0)
-- Dependencies: 37
-- Name: SCHEMA auth; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA auth TO anon;
GRANT USAGE ON SCHEMA auth TO authenticated;
GRANT USAGE ON SCHEMA auth TO service_role;
GRANT ALL ON SCHEMA auth TO supabase_auth_admin;
GRANT ALL ON SCHEMA auth TO dashboard_user;
GRANT USAGE ON SCHEMA auth TO postgres;


--
-- TOC entry 4406 (class 0 OID 0)
-- Dependencies: 23
-- Name: SCHEMA extensions; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA extensions TO anon;
GRANT USAGE ON SCHEMA extensions TO authenticated;
GRANT USAGE ON SCHEMA extensions TO service_role;
GRANT ALL ON SCHEMA extensions TO dashboard_user;


--
-- TOC entry 4407 (class 0 OID 0)
-- Dependencies: 13
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: pg_database_owner
--

GRANT USAGE ON SCHEMA public TO postgres;
GRANT USAGE ON SCHEMA public TO anon;
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO service_role;


--
-- TOC entry 4408 (class 0 OID 0)
-- Dependencies: 9
-- Name: SCHEMA realtime; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA realtime TO postgres;
GRANT USAGE ON SCHEMA realtime TO anon;
GRANT USAGE ON SCHEMA realtime TO authenticated;
GRANT USAGE ON SCHEMA realtime TO service_role;
GRANT ALL ON SCHEMA realtime TO supabase_realtime_admin;


--
-- TOC entry 4409 (class 0 OID 0)
-- Dependencies: 38
-- Name: SCHEMA storage; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA storage TO postgres WITH GRANT OPTION;
GRANT USAGE ON SCHEMA storage TO anon;
GRANT USAGE ON SCHEMA storage TO authenticated;
GRANT USAGE ON SCHEMA storage TO service_role;
GRANT ALL ON SCHEMA storage TO supabase_storage_admin;
GRANT ALL ON SCHEMA storage TO dashboard_user;


--
-- TOC entry 4410 (class 0 OID 0)
-- Dependencies: 32
-- Name: SCHEMA vault; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA vault TO postgres WITH GRANT OPTION;
GRANT USAGE ON SCHEMA vault TO service_role;


--
-- TOC entry 4417 (class 0 OID 0)
-- Dependencies: 398
-- Name: FUNCTION email(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.email() TO dashboard_user;


--
-- TOC entry 4418 (class 0 OID 0)
-- Dependencies: 417
-- Name: FUNCTION jwt(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.jwt() TO postgres;
GRANT ALL ON FUNCTION auth.jwt() TO dashboard_user;


--
-- TOC entry 4420 (class 0 OID 0)
-- Dependencies: 397
-- Name: FUNCTION role(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.role() TO dashboard_user;


--
-- TOC entry 4422 (class 0 OID 0)
-- Dependencies: 396
-- Name: FUNCTION uid(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.uid() TO dashboard_user;


--
-- TOC entry 4423 (class 0 OID 0)
-- Dependencies: 392
-- Name: FUNCTION armor(bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.armor(bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.armor(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea) TO dashboard_user;


--
-- TOC entry 4424 (class 0 OID 0)
-- Dependencies: 393
-- Name: FUNCTION armor(bytea, text[], text[]); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.armor(bytea, text[], text[]) FROM postgres;
GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO dashboard_user;


--
-- TOC entry 4425 (class 0 OID 0)
-- Dependencies: 364
-- Name: FUNCTION crypt(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.crypt(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.crypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.crypt(text, text) TO dashboard_user;


--
-- TOC entry 4426 (class 0 OID 0)
-- Dependencies: 394
-- Name: FUNCTION dearmor(text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.dearmor(text) FROM postgres;
GRANT ALL ON FUNCTION extensions.dearmor(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.dearmor(text) TO dashboard_user;


--
-- TOC entry 4427 (class 0 OID 0)
-- Dependencies: 368
-- Name: FUNCTION decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO dashboard_user;


--
-- TOC entry 4428 (class 0 OID 0)
-- Dependencies: 370
-- Name: FUNCTION decrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- TOC entry 4429 (class 0 OID 0)
-- Dependencies: 361
-- Name: FUNCTION digest(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.digest(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO dashboard_user;


--
-- TOC entry 4430 (class 0 OID 0)
-- Dependencies: 360
-- Name: FUNCTION digest(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.digest(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.digest(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(text, text) TO dashboard_user;


--
-- TOC entry 4431 (class 0 OID 0)
-- Dependencies: 367
-- Name: FUNCTION encrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO dashboard_user;


--
-- TOC entry 4432 (class 0 OID 0)
-- Dependencies: 369
-- Name: FUNCTION encrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- TOC entry 4433 (class 0 OID 0)
-- Dependencies: 371
-- Name: FUNCTION gen_random_bytes(integer); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_random_bytes(integer) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO dashboard_user;


--
-- TOC entry 4434 (class 0 OID 0)
-- Dependencies: 372
-- Name: FUNCTION gen_random_uuid(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_random_uuid() FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO dashboard_user;


--
-- TOC entry 4435 (class 0 OID 0)
-- Dependencies: 365
-- Name: FUNCTION gen_salt(text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_salt(text) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_salt(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text) TO dashboard_user;


--
-- TOC entry 4436 (class 0 OID 0)
-- Dependencies: 366
-- Name: FUNCTION gen_salt(text, integer); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.gen_salt(text, integer) FROM postgres;
GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO dashboard_user;


--
-- TOC entry 4438 (class 0 OID 0)
-- Dependencies: 399
-- Name: FUNCTION grant_pg_cron_access(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION extensions.grant_pg_cron_access() FROM supabase_admin;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO supabase_admin WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO dashboard_user;


--
-- TOC entry 4440 (class 0 OID 0)
-- Dependencies: 403
-- Name: FUNCTION grant_pg_graphql_access(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.grant_pg_graphql_access() TO postgres WITH GRANT OPTION;


--
-- TOC entry 4442 (class 0 OID 0)
-- Dependencies: 400
-- Name: FUNCTION grant_pg_net_access(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION extensions.grant_pg_net_access() FROM supabase_admin;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO supabase_admin WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO dashboard_user;


--
-- TOC entry 4443 (class 0 OID 0)
-- Dependencies: 363
-- Name: FUNCTION hmac(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.hmac(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO dashboard_user;


--
-- TOC entry 4444 (class 0 OID 0)
-- Dependencies: 362
-- Name: FUNCTION hmac(text, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.hmac(text, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO dashboard_user;


--
-- TOC entry 4445 (class 0 OID 0)
-- Dependencies: 348
-- Name: FUNCTION pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT shared_blk_read_time double precision, OUT shared_blk_write_time double precision, OUT local_blk_read_time double precision, OUT local_blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision, OUT jit_deform_count bigint, OUT jit_deform_time double precision, OUT stats_since timestamp with time zone, OUT minmax_stats_since timestamp with time zone); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT shared_blk_read_time double precision, OUT shared_blk_write_time double precision, OUT local_blk_read_time double precision, OUT local_blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision, OUT jit_deform_count bigint, OUT jit_deform_time double precision, OUT stats_since timestamp with time zone, OUT minmax_stats_since timestamp with time zone) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT shared_blk_read_time double precision, OUT shared_blk_write_time double precision, OUT local_blk_read_time double precision, OUT local_blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision, OUT jit_deform_count bigint, OUT jit_deform_time double precision, OUT stats_since timestamp with time zone, OUT minmax_stats_since timestamp with time zone) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT shared_blk_read_time double precision, OUT shared_blk_write_time double precision, OUT local_blk_read_time double precision, OUT local_blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision, OUT jit_deform_count bigint, OUT jit_deform_time double precision, OUT stats_since timestamp with time zone, OUT minmax_stats_since timestamp with time zone) TO dashboard_user;


--
-- TOC entry 4446 (class 0 OID 0)
-- Dependencies: 347
-- Name: FUNCTION pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO dashboard_user;


--
-- TOC entry 4447 (class 0 OID 0)
-- Dependencies: 349
-- Name: FUNCTION pg_stat_statements_reset(userid oid, dbid oid, queryid bigint, minmax_only boolean); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint, minmax_only boolean) FROM postgres;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint, minmax_only boolean) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint, minmax_only boolean) TO dashboard_user;


--
-- TOC entry 4448 (class 0 OID 0)
-- Dependencies: 395
-- Name: FUNCTION pgp_armor_headers(text, OUT key text, OUT value text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO dashboard_user;


--
-- TOC entry 4449 (class 0 OID 0)
-- Dependencies: 391
-- Name: FUNCTION pgp_key_id(bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_key_id(bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO dashboard_user;


--
-- TOC entry 4450 (class 0 OID 0)
-- Dependencies: 385
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO dashboard_user;


--
-- TOC entry 4451 (class 0 OID 0)
-- Dependencies: 387
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO dashboard_user;


--
-- TOC entry 4452 (class 0 OID 0)
-- Dependencies: 389
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO dashboard_user;


--
-- TOC entry 4453 (class 0 OID 0)
-- Dependencies: 386
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- TOC entry 4454 (class 0 OID 0)
-- Dependencies: 388
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- TOC entry 4455 (class 0 OID 0)
-- Dependencies: 390
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO dashboard_user;


--
-- TOC entry 4456 (class 0 OID 0)
-- Dependencies: 381
-- Name: FUNCTION pgp_pub_encrypt(text, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO dashboard_user;


--
-- TOC entry 4457 (class 0 OID 0)
-- Dependencies: 383
-- Name: FUNCTION pgp_pub_encrypt(text, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO dashboard_user;


--
-- TOC entry 4458 (class 0 OID 0)
-- Dependencies: 382
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- TOC entry 4459 (class 0 OID 0)
-- Dependencies: 384
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- TOC entry 4460 (class 0 OID 0)
-- Dependencies: 377
-- Name: FUNCTION pgp_sym_decrypt(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO dashboard_user;


--
-- TOC entry 4461 (class 0 OID 0)
-- Dependencies: 379
-- Name: FUNCTION pgp_sym_decrypt(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO dashboard_user;


--
-- TOC entry 4462 (class 0 OID 0)
-- Dependencies: 378
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO dashboard_user;


--
-- TOC entry 4463 (class 0 OID 0)
-- Dependencies: 380
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- TOC entry 4464 (class 0 OID 0)
-- Dependencies: 373
-- Name: FUNCTION pgp_sym_encrypt(text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO dashboard_user;


--
-- TOC entry 4465 (class 0 OID 0)
-- Dependencies: 375
-- Name: FUNCTION pgp_sym_encrypt(text, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO dashboard_user;


--
-- TOC entry 4466 (class 0 OID 0)
-- Dependencies: 374
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO dashboard_user;


--
-- TOC entry 4467 (class 0 OID 0)
-- Dependencies: 376
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) FROM postgres;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- TOC entry 4468 (class 0 OID 0)
-- Dependencies: 401
-- Name: FUNCTION pgrst_ddl_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_ddl_watch() TO postgres WITH GRANT OPTION;


--
-- TOC entry 4469 (class 0 OID 0)
-- Dependencies: 402
-- Name: FUNCTION pgrst_drop_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_drop_watch() TO postgres WITH GRANT OPTION;


--
-- TOC entry 4471 (class 0 OID 0)
-- Dependencies: 404
-- Name: FUNCTION set_graphql_placeholder(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.set_graphql_placeholder() TO postgres WITH GRANT OPTION;


--
-- TOC entry 4472 (class 0 OID 0)
-- Dependencies: 355
-- Name: FUNCTION uuid_generate_v1(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v1() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO dashboard_user;


--
-- TOC entry 4473 (class 0 OID 0)
-- Dependencies: 356
-- Name: FUNCTION uuid_generate_v1mc(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v1mc() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO dashboard_user;


--
-- TOC entry 4474 (class 0 OID 0)
-- Dependencies: 357
-- Name: FUNCTION uuid_generate_v3(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO dashboard_user;


--
-- TOC entry 4475 (class 0 OID 0)
-- Dependencies: 358
-- Name: FUNCTION uuid_generate_v4(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v4() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO dashboard_user;


--
-- TOC entry 4476 (class 0 OID 0)
-- Dependencies: 359
-- Name: FUNCTION uuid_generate_v5(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO dashboard_user;


--
-- TOC entry 4477 (class 0 OID 0)
-- Dependencies: 350
-- Name: FUNCTION uuid_nil(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_nil() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_nil() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_nil() TO dashboard_user;


--
-- TOC entry 4478 (class 0 OID 0)
-- Dependencies: 351
-- Name: FUNCTION uuid_ns_dns(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_dns() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO dashboard_user;


--
-- TOC entry 4479 (class 0 OID 0)
-- Dependencies: 353
-- Name: FUNCTION uuid_ns_oid(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_oid() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO dashboard_user;


--
-- TOC entry 4480 (class 0 OID 0)
-- Dependencies: 352
-- Name: FUNCTION uuid_ns_url(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_url() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO dashboard_user;


--
-- TOC entry 4481 (class 0 OID 0)
-- Dependencies: 354
-- Name: FUNCTION uuid_ns_x500(); Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON FUNCTION extensions.uuid_ns_x500() FROM postgres;
GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO dashboard_user;


--
-- TOC entry 4482 (class 0 OID 0)
-- Dependencies: 416
-- Name: FUNCTION graphql("operationName" text, query text, variables jsonb, extensions jsonb); Type: ACL; Schema: graphql_public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO postgres;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO anon;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO authenticated;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO service_role;


--
-- TOC entry 4483 (class 0 OID 0)
-- Dependencies: 346
-- Name: FUNCTION get_auth(p_usename text); Type: ACL; Schema: pgbouncer; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION pgbouncer.get_auth(p_usename text) FROM PUBLIC;
GRANT ALL ON FUNCTION pgbouncer.get_auth(p_usename text) TO pgbouncer;
GRANT ALL ON FUNCTION pgbouncer.get_auth(p_usename text) TO postgres;


--
-- TOC entry 4484 (class 0 OID 0)
-- Dependencies: 445
-- Name: FUNCTION create_quick_task(template_id uuid, task_data jsonb); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.create_quick_task(template_id uuid, task_data jsonb) TO anon;
GRANT ALL ON FUNCTION public.create_quick_task(template_id uuid, task_data jsonb) TO authenticated;
GRANT ALL ON FUNCTION public.create_quick_task(template_id uuid, task_data jsonb) TO service_role;


--
-- TOC entry 4485 (class 0 OID 0)
-- Dependencies: 444
-- Name: FUNCTION generate_recurring_events(parent_schedule_id uuid, recurrence_rule jsonb, end_date timestamp with time zone); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.generate_recurring_events(parent_schedule_id uuid, recurrence_rule jsonb, end_date timestamp with time zone) TO anon;
GRANT ALL ON FUNCTION public.generate_recurring_events(parent_schedule_id uuid, recurrence_rule jsonb, end_date timestamp with time zone) TO authenticated;
GRANT ALL ON FUNCTION public.generate_recurring_events(parent_schedule_id uuid, recurrence_rule jsonb, end_date timestamp with time zone) TO service_role;


--
-- TOC entry 4486 (class 0 OID 0)
-- Dependencies: 441
-- Name: FUNCTION handle_new_user(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.handle_new_user() TO anon;
GRANT ALL ON FUNCTION public.handle_new_user() TO authenticated;
GRANT ALL ON FUNCTION public.handle_new_user() TO service_role;


--
-- TOC entry 4487 (class 0 OID 0)
-- Dependencies: 442
-- Name: FUNCTION handle_updated_at(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.handle_updated_at() TO anon;
GRANT ALL ON FUNCTION public.handle_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.handle_updated_at() TO service_role;


--
-- TOC entry 4488 (class 0 OID 0)
-- Dependencies: 439
-- Name: FUNCTION is_admin(user_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.is_admin(user_id uuid) TO anon;
GRANT ALL ON FUNCTION public.is_admin(user_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.is_admin(user_id uuid) TO service_role;


--
-- TOC entry 4489 (class 0 OID 0)
-- Dependencies: 443
-- Name: FUNCTION update_blog_comments_updated_at(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_blog_comments_updated_at() TO anon;
GRANT ALL ON FUNCTION public.update_blog_comments_updated_at() TO authenticated;
GRANT ALL ON FUNCTION public.update_blog_comments_updated_at() TO service_role;


--
-- TOC entry 4490 (class 0 OID 0)
-- Dependencies: 440
-- Name: FUNCTION update_updated_at_column(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.update_updated_at_column() TO anon;
GRANT ALL ON FUNCTION public.update_updated_at_column() TO authenticated;
GRANT ALL ON FUNCTION public.update_updated_at_column() TO service_role;


--
-- TOC entry 4491 (class 0 OID 0)
-- Dependencies: 432
-- Name: FUNCTION apply_rls(wal jsonb, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO supabase_realtime_admin;


--
-- TOC entry 4492 (class 0 OID 0)
-- Dependencies: 438
-- Name: FUNCTION broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) TO postgres;
GRANT ALL ON FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) TO dashboard_user;


--
-- TOC entry 4493 (class 0 OID 0)
-- Dependencies: 434
-- Name: FUNCTION build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO postgres;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO anon;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO service_role;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO supabase_realtime_admin;


--
-- TOC entry 4494 (class 0 OID 0)
-- Dependencies: 430
-- Name: FUNCTION "cast"(val text, type_ regtype); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO postgres;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO dashboard_user;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO anon;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO authenticated;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO service_role;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO supabase_realtime_admin;


--
-- TOC entry 4495 (class 0 OID 0)
-- Dependencies: 429
-- Name: FUNCTION check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO postgres;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO anon;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO authenticated;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO service_role;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO supabase_realtime_admin;


--
-- TOC entry 4496 (class 0 OID 0)
-- Dependencies: 433
-- Name: FUNCTION is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO postgres;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO anon;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO service_role;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO supabase_realtime_admin;


--
-- TOC entry 4497 (class 0 OID 0)
-- Dependencies: 435
-- Name: FUNCTION list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO supabase_realtime_admin;


--
-- TOC entry 4498 (class 0 OID 0)
-- Dependencies: 428
-- Name: FUNCTION quote_wal2json(entity regclass); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO postgres;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO anon;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO authenticated;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO service_role;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO supabase_realtime_admin;


--
-- TOC entry 4499 (class 0 OID 0)
-- Dependencies: 437
-- Name: FUNCTION send(payload jsonb, event text, topic text, private boolean); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) TO postgres;
GRANT ALL ON FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) TO dashboard_user;


--
-- TOC entry 4500 (class 0 OID 0)
-- Dependencies: 427
-- Name: FUNCTION subscription_check_filters(); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO postgres;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO dashboard_user;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO anon;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO authenticated;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO service_role;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO supabase_realtime_admin;


--
-- TOC entry 4501 (class 0 OID 0)
-- Dependencies: 431
-- Name: FUNCTION to_regrole(role_name text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO postgres;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO anon;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO authenticated;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO service_role;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO supabase_realtime_admin;


--
-- TOC entry 4502 (class 0 OID 0)
-- Dependencies: 436
-- Name: FUNCTION topic(); Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON FUNCTION realtime.topic() TO postgres;
GRANT ALL ON FUNCTION realtime.topic() TO dashboard_user;


--
-- TOC entry 4503 (class 0 OID 0)
-- Dependencies: 406
-- Name: FUNCTION _crypto_aead_det_decrypt(message bytea, additional bytea, key_id bigint, context bytea, nonce bytea); Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT ALL ON FUNCTION vault._crypto_aead_det_decrypt(message bytea, additional bytea, key_id bigint, context bytea, nonce bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION vault._crypto_aead_det_decrypt(message bytea, additional bytea, key_id bigint, context bytea, nonce bytea) TO service_role;


--
-- TOC entry 4504 (class 0 OID 0)
-- Dependencies: 408
-- Name: FUNCTION create_secret(new_secret text, new_name text, new_description text, new_key_id uuid); Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT ALL ON FUNCTION vault.create_secret(new_secret text, new_name text, new_description text, new_key_id uuid) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION vault.create_secret(new_secret text, new_name text, new_description text, new_key_id uuid) TO service_role;


--
-- TOC entry 4505 (class 0 OID 0)
-- Dependencies: 409
-- Name: FUNCTION update_secret(secret_id uuid, new_secret text, new_name text, new_description text, new_key_id uuid); Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT ALL ON FUNCTION vault.update_secret(secret_id uuid, new_secret text, new_name text, new_description text, new_key_id uuid) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION vault.update_secret(secret_id uuid, new_secret text, new_name text, new_description text, new_key_id uuid) TO service_role;


--
-- TOC entry 4507 (class 0 OID 0)
-- Dependencies: 283
-- Name: TABLE audit_log_entries; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.audit_log_entries TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.audit_log_entries TO postgres;
GRANT SELECT ON TABLE auth.audit_log_entries TO postgres WITH GRANT OPTION;


--
-- TOC entry 4509 (class 0 OID 0)
-- Dependencies: 300
-- Name: TABLE flow_state; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.flow_state TO postgres;
GRANT SELECT ON TABLE auth.flow_state TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.flow_state TO dashboard_user;


--
-- TOC entry 4512 (class 0 OID 0)
-- Dependencies: 291
-- Name: TABLE identities; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.identities TO postgres;
GRANT SELECT ON TABLE auth.identities TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.identities TO dashboard_user;


--
-- TOC entry 4514 (class 0 OID 0)
-- Dependencies: 282
-- Name: TABLE instances; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.instances TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.instances TO postgres;
GRANT SELECT ON TABLE auth.instances TO postgres WITH GRANT OPTION;


--
-- TOC entry 4516 (class 0 OID 0)
-- Dependencies: 295
-- Name: TABLE mfa_amr_claims; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.mfa_amr_claims TO postgres;
GRANT SELECT ON TABLE auth.mfa_amr_claims TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_amr_claims TO dashboard_user;


--
-- TOC entry 4518 (class 0 OID 0)
-- Dependencies: 294
-- Name: TABLE mfa_challenges; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.mfa_challenges TO postgres;
GRANT SELECT ON TABLE auth.mfa_challenges TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_challenges TO dashboard_user;


--
-- TOC entry 4520 (class 0 OID 0)
-- Dependencies: 293
-- Name: TABLE mfa_factors; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.mfa_factors TO postgres;
GRANT SELECT ON TABLE auth.mfa_factors TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_factors TO dashboard_user;


--
-- TOC entry 4521 (class 0 OID 0)
-- Dependencies: 302
-- Name: TABLE oauth_clients; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.oauth_clients TO postgres;
GRANT ALL ON TABLE auth.oauth_clients TO dashboard_user;


--
-- TOC entry 4522 (class 0 OID 0)
-- Dependencies: 301
-- Name: TABLE one_time_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.one_time_tokens TO postgres;
GRANT SELECT ON TABLE auth.one_time_tokens TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.one_time_tokens TO dashboard_user;


--
-- TOC entry 4524 (class 0 OID 0)
-- Dependencies: 281
-- Name: TABLE refresh_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.refresh_tokens TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.refresh_tokens TO postgres;
GRANT SELECT ON TABLE auth.refresh_tokens TO postgres WITH GRANT OPTION;


--
-- TOC entry 4526 (class 0 OID 0)
-- Dependencies: 280
-- Name: SEQUENCE refresh_tokens_id_seq; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO dashboard_user;
GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO postgres;


--
-- TOC entry 4528 (class 0 OID 0)
-- Dependencies: 298
-- Name: TABLE saml_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.saml_providers TO postgres;
GRANT SELECT ON TABLE auth.saml_providers TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.saml_providers TO dashboard_user;


--
-- TOC entry 4530 (class 0 OID 0)
-- Dependencies: 299
-- Name: TABLE saml_relay_states; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.saml_relay_states TO postgres;
GRANT SELECT ON TABLE auth.saml_relay_states TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.saml_relay_states TO dashboard_user;


--
-- TOC entry 4532 (class 0 OID 0)
-- Dependencies: 284
-- Name: TABLE schema_migrations; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT SELECT ON TABLE auth.schema_migrations TO postgres WITH GRANT OPTION;


--
-- TOC entry 4535 (class 0 OID 0)
-- Dependencies: 292
-- Name: TABLE sessions; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.sessions TO postgres;
GRANT SELECT ON TABLE auth.sessions TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sessions TO dashboard_user;


--
-- TOC entry 4537 (class 0 OID 0)
-- Dependencies: 297
-- Name: TABLE sso_domains; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.sso_domains TO postgres;
GRANT SELECT ON TABLE auth.sso_domains TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sso_domains TO dashboard_user;


--
-- TOC entry 4540 (class 0 OID 0)
-- Dependencies: 296
-- Name: TABLE sso_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.sso_providers TO postgres;
GRANT SELECT ON TABLE auth.sso_providers TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sso_providers TO dashboard_user;


--
-- TOC entry 4543 (class 0 OID 0)
-- Dependencies: 279
-- Name: TABLE users; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.users TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,MAINTAIN,UPDATE ON TABLE auth.users TO postgres;
GRANT SELECT ON TABLE auth.users TO postgres WITH GRANT OPTION;


--
-- TOC entry 4544 (class 0 OID 0)
-- Dependencies: 278
-- Name: TABLE pg_stat_statements; Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON TABLE extensions.pg_stat_statements FROM postgres;
GRANT ALL ON TABLE extensions.pg_stat_statements TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements TO dashboard_user;


--
-- TOC entry 4545 (class 0 OID 0)
-- Dependencies: 277
-- Name: TABLE pg_stat_statements_info; Type: ACL; Schema: extensions; Owner: postgres
--

REVOKE ALL ON TABLE extensions.pg_stat_statements_info FROM postgres;
GRANT ALL ON TABLE extensions.pg_stat_statements_info TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements_info TO dashboard_user;


--
-- TOC entry 4546 (class 0 OID 0)
-- Dependencies: 319
-- Name: TABLE achievements; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.achievements TO anon;
GRANT ALL ON TABLE public.achievements TO authenticated;
GRANT ALL ON TABLE public.achievements TO service_role;


--
-- TOC entry 4547 (class 0 OID 0)
-- Dependencies: 326
-- Name: TABLE blog_comments; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.blog_comments TO anon;
GRANT ALL ON TABLE public.blog_comments TO authenticated;
GRANT ALL ON TABLE public.blog_comments TO service_role;


--
-- TOC entry 4548 (class 0 OID 0)
-- Dependencies: 325
-- Name: TABLE blog_likes; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.blog_likes TO anon;
GRANT ALL ON TABLE public.blog_likes TO authenticated;
GRANT ALL ON TABLE public.blog_likes TO service_role;


--
-- TOC entry 4550 (class 0 OID 0)
-- Dependencies: 320
-- Name: TABLE blog_posts; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.blog_posts TO anon;
GRANT ALL ON TABLE public.blog_posts TO authenticated;
GRANT ALL ON TABLE public.blog_posts TO service_role;


--
-- TOC entry 4551 (class 0 OID 0)
-- Dependencies: 323
-- Name: TABLE contact_messages; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.contact_messages TO anon;
GRANT ALL ON TABLE public.contact_messages TO authenticated;
GRANT ALL ON TABLE public.contact_messages TO service_role;


--
-- TOC entry 4552 (class 0 OID 0)
-- Dependencies: 324
-- Name: TABLE courses; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.courses TO anon;
GRANT ALL ON TABLE public.courses TO authenticated;
GRANT ALL ON TABLE public.courses TO service_role;


--
-- TOC entry 4553 (class 0 OID 0)
-- Dependencies: 315
-- Name: TABLE education; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.education TO anon;
GRANT ALL ON TABLE public.education TO authenticated;
GRANT ALL ON TABLE public.education TO service_role;


--
-- TOC entry 4554 (class 0 OID 0)
-- Dependencies: 316
-- Name: TABLE experience; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.experience TO anon;
GRANT ALL ON TABLE public.experience TO authenticated;
GRANT ALL ON TABLE public.experience TO service_role;


--
-- TOC entry 4555 (class 0 OID 0)
-- Dependencies: 331
-- Name: TABLE notifications; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.notifications TO anon;
GRANT ALL ON TABLE public.notifications TO authenticated;
GRANT ALL ON TABLE public.notifications TO service_role;


--
-- TOC entry 4556 (class 0 OID 0)
-- Dependencies: 314
-- Name: TABLE personal_info; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.personal_info TO anon;
GRANT ALL ON TABLE public.personal_info TO authenticated;
GRANT ALL ON TABLE public.personal_info TO service_role;


--
-- TOC entry 4557 (class 0 OID 0)
-- Dependencies: 313
-- Name: TABLE profiles; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.profiles TO anon;
GRANT ALL ON TABLE public.profiles TO authenticated;
GRANT ALL ON TABLE public.profiles TO service_role;


--
-- TOC entry 4558 (class 0 OID 0)
-- Dependencies: 317
-- Name: TABLE projects; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.projects TO anon;
GRANT ALL ON TABLE public.projects TO authenticated;
GRANT ALL ON TABLE public.projects TO service_role;


--
-- TOC entry 4559 (class 0 OID 0)
-- Dependencies: 332
-- Name: TABLE quick_actions; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.quick_actions TO anon;
GRANT ALL ON TABLE public.quick_actions TO authenticated;
GRANT ALL ON TABLE public.quick_actions TO service_role;


--
-- TOC entry 4560 (class 0 OID 0)
-- Dependencies: 329
-- Name: TABLE schedule_templates; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.schedule_templates TO anon;
GRANT ALL ON TABLE public.schedule_templates TO authenticated;
GRANT ALL ON TABLE public.schedule_templates TO service_role;


--
-- TOC entry 4561 (class 0 OID 0)
-- Dependencies: 322
-- Name: TABLE schedules; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.schedules TO anon;
GRANT ALL ON TABLE public.schedules TO authenticated;
GRANT ALL ON TABLE public.schedules TO service_role;


--
-- TOC entry 4562 (class 0 OID 0)
-- Dependencies: 318
-- Name: TABLE skills; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.skills TO anon;
GRANT ALL ON TABLE public.skills TO authenticated;
GRANT ALL ON TABLE public.skills TO service_role;


--
-- TOC entry 4563 (class 0 OID 0)
-- Dependencies: 330
-- Name: TABLE task_dependencies; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.task_dependencies TO anon;
GRANT ALL ON TABLE public.task_dependencies TO authenticated;
GRANT ALL ON TABLE public.task_dependencies TO service_role;


--
-- TOC entry 4564 (class 0 OID 0)
-- Dependencies: 328
-- Name: TABLE task_templates; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.task_templates TO anon;
GRANT ALL ON TABLE public.task_templates TO authenticated;
GRANT ALL ON TABLE public.task_templates TO service_role;


--
-- TOC entry 4565 (class 0 OID 0)
-- Dependencies: 321
-- Name: TABLE tasks; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.tasks TO anon;
GRANT ALL ON TABLE public.tasks TO authenticated;
GRANT ALL ON TABLE public.tasks TO service_role;


--
-- TOC entry 4566 (class 0 OID 0)
-- Dependencies: 327
-- Name: TABLE timeline_events; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.timeline_events TO anon;
GRANT ALL ON TABLE public.timeline_events TO authenticated;
GRANT ALL ON TABLE public.timeline_events TO service_role;


--
-- TOC entry 4567 (class 0 OID 0)
-- Dependencies: 311
-- Name: TABLE messages; Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON TABLE realtime.messages TO postgres;
GRANT ALL ON TABLE realtime.messages TO dashboard_user;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO anon;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO authenticated;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO service_role;


--
-- TOC entry 4568 (class 0 OID 0)
-- Dependencies: 303
-- Name: TABLE schema_migrations; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.schema_migrations TO postgres;
GRANT ALL ON TABLE realtime.schema_migrations TO dashboard_user;
GRANT SELECT ON TABLE realtime.schema_migrations TO anon;
GRANT SELECT ON TABLE realtime.schema_migrations TO authenticated;
GRANT SELECT ON TABLE realtime.schema_migrations TO service_role;
GRANT ALL ON TABLE realtime.schema_migrations TO supabase_realtime_admin;


--
-- TOC entry 4569 (class 0 OID 0)
-- Dependencies: 308
-- Name: TABLE subscription; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.subscription TO postgres;
GRANT ALL ON TABLE realtime.subscription TO dashboard_user;
GRANT SELECT ON TABLE realtime.subscription TO anon;
GRANT SELECT ON TABLE realtime.subscription TO authenticated;
GRANT SELECT ON TABLE realtime.subscription TO service_role;
GRANT ALL ON TABLE realtime.subscription TO supabase_realtime_admin;


--
-- TOC entry 4570 (class 0 OID 0)
-- Dependencies: 307
-- Name: SEQUENCE subscription_id_seq; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO postgres;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO dashboard_user;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO anon;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO service_role;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO supabase_realtime_admin;


--
-- TOC entry 4572 (class 0 OID 0)
-- Dependencies: 285
-- Name: TABLE buckets; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.buckets TO anon;
GRANT ALL ON TABLE storage.buckets TO authenticated;
GRANT ALL ON TABLE storage.buckets TO service_role;
GRANT ALL ON TABLE storage.buckets TO postgres WITH GRANT OPTION;


--
-- TOC entry 4573 (class 0 OID 0)
-- Dependencies: 334
-- Name: TABLE buckets_analytics; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.buckets_analytics TO service_role;
GRANT ALL ON TABLE storage.buckets_analytics TO authenticated;
GRANT ALL ON TABLE storage.buckets_analytics TO anon;


--
-- TOC entry 4575 (class 0 OID 0)
-- Dependencies: 286
-- Name: TABLE objects; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.objects TO anon;
GRANT ALL ON TABLE storage.objects TO authenticated;
GRANT ALL ON TABLE storage.objects TO service_role;
GRANT ALL ON TABLE storage.objects TO postgres WITH GRANT OPTION;


--
-- TOC entry 4576 (class 0 OID 0)
-- Dependencies: 333
-- Name: TABLE prefixes; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.prefixes TO service_role;
GRANT ALL ON TABLE storage.prefixes TO authenticated;
GRANT ALL ON TABLE storage.prefixes TO anon;


--
-- TOC entry 4577 (class 0 OID 0)
-- Dependencies: 304
-- Name: TABLE s3_multipart_uploads; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.s3_multipart_uploads TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO anon;


--
-- TOC entry 4578 (class 0 OID 0)
-- Dependencies: 305
-- Name: TABLE s3_multipart_uploads_parts; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.s3_multipart_uploads_parts TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO anon;


--
-- TOC entry 4579 (class 0 OID 0)
-- Dependencies: 288
-- Name: TABLE secrets; Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT SELECT,REFERENCES,DELETE,TRUNCATE ON TABLE vault.secrets TO postgres WITH GRANT OPTION;
GRANT SELECT,DELETE ON TABLE vault.secrets TO service_role;


--
-- TOC entry 4580 (class 0 OID 0)
-- Dependencies: 289
-- Name: TABLE decrypted_secrets; Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT SELECT,REFERENCES,DELETE,TRUNCATE ON TABLE vault.decrypted_secrets TO postgres WITH GRANT OPTION;
GRANT SELECT,DELETE ON TABLE vault.decrypted_secrets TO service_role;


--
-- TOC entry 2469 (class 826 OID 16603)
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES TO dashboard_user;


--
-- TOC entry 2470 (class 826 OID 16604)
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS TO dashboard_user;


--
-- TOC entry 2468 (class 826 OID 16602)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES TO dashboard_user;


--
-- TOC entry 2479 (class 826 OID 16682)
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON SEQUENCES TO postgres WITH GRANT OPTION;


--
-- TOC entry 2478 (class 826 OID 16681)
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON FUNCTIONS TO postgres WITH GRANT OPTION;


--
-- TOC entry 2477 (class 826 OID 16680)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON TABLES TO postgres WITH GRANT OPTION;


--
-- TOC entry 2482 (class 826 OID 16637)
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES TO service_role;


--
-- TOC entry 2481 (class 826 OID 16636)
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS TO service_role;


--
-- TOC entry 2480 (class 826 OID 16635)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES TO service_role;


--
-- TOC entry 2474 (class 826 OID 16617)
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES TO service_role;


--
-- TOC entry 2476 (class 826 OID 16616)
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS TO service_role;


--
-- TOC entry 2475 (class 826 OID 16615)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES TO service_role;


--
-- TOC entry 2461 (class 826 OID 16490)
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES TO service_role;


--
-- TOC entry 2462 (class 826 OID 16491)
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES TO service_role;


--
-- TOC entry 2460 (class 826 OID 16489)
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS TO service_role;


--
-- TOC entry 2464 (class 826 OID 16493)
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS TO service_role;


--
-- TOC entry 2459 (class 826 OID 16488)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES TO service_role;


--
-- TOC entry 2463 (class 826 OID 16492)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES TO service_role;


--
-- TOC entry 2472 (class 826 OID 16607)
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES TO dashboard_user;


--
-- TOC entry 2473 (class 826 OID 16608)
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS TO dashboard_user;


--
-- TOC entry 2471 (class 826 OID 16606)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES TO dashboard_user;


--
-- TOC entry 2467 (class 826 OID 16545)
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES TO service_role;


--
-- TOC entry 2466 (class 826 OID 16544)
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS TO service_role;


--
-- TOC entry 2465 (class 826 OID 16543)
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES TO service_role;


--
-- TOC entry 3649 (class 3466 OID 16621)
-- Name: issue_graphql_placeholder; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_graphql_placeholder ON sql_drop
         WHEN TAG IN ('DROP EXTENSION')
   EXECUTE FUNCTION extensions.set_graphql_placeholder();


ALTER EVENT TRIGGER issue_graphql_placeholder OWNER TO supabase_admin;

--
-- TOC entry 3654 (class 3466 OID 16700)
-- Name: issue_pg_cron_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_cron_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_cron_access();


ALTER EVENT TRIGGER issue_pg_cron_access OWNER TO supabase_admin;

--
-- TOC entry 3648 (class 3466 OID 16619)
-- Name: issue_pg_graphql_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_graphql_access ON ddl_command_end
         WHEN TAG IN ('CREATE FUNCTION')
   EXECUTE FUNCTION extensions.grant_pg_graphql_access();


ALTER EVENT TRIGGER issue_pg_graphql_access OWNER TO supabase_admin;

--
-- TOC entry 3655 (class 3466 OID 16703)
-- Name: issue_pg_net_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_net_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_net_access();


ALTER EVENT TRIGGER issue_pg_net_access OWNER TO supabase_admin;

--
-- TOC entry 3650 (class 3466 OID 16622)
-- Name: pgrst_ddl_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_ddl_watch ON ddl_command_end
   EXECUTE FUNCTION extensions.pgrst_ddl_watch();


ALTER EVENT TRIGGER pgrst_ddl_watch OWNER TO supabase_admin;

--
-- TOC entry 3651 (class 3466 OID 16623)
-- Name: pgrst_drop_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_drop_watch ON sql_drop
   EXECUTE FUNCTION extensions.pgrst_drop_watch();


ALTER EVENT TRIGGER pgrst_drop_watch OWNER TO supabase_admin;

-- Completed on 2025-09-23 10:29:29 IST

--
-- PostgreSQL database dump complete
--

\unrestrict FcGai7xdXYpX8qityJ6SUz4FHDjuircSvil274BNQLJdFJKJs1cH9DPCnWPW3L4

